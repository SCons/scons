#version: '3.0.1.{build}'

image: 
  - Visual Studio 2015
  - Visual Studio 2017
  - Ubuntu

cache:
  - downloads -> appveyor.yml
  - '%LOCALAPPDATA%\pip\Cache'
  - C:\ProgramData\chocolatey\bin -> appveyor.yml
  - C:\ProgramData\chocolatey\lib -> appveyor.yml

install:
  ### WINDOWS ###
  # add python and python user-base to path for pip installs
  - cmd: for /F "tokens=*" %%g in ('C:\\%WINPYTHON%\\python.exe -m site --user-base') do (set PYUSERBASESITE=%%g)
  - cmd: for /F "tokens=*" %%g in ('C:\\%WINPYTHON%\\python.exe -m site --user-site') do (set PYSITEDIR=%%g)
  - cmd: "set PATH=%PYUSERBASESITE%;%PYUSERBASESITE%\\%WINPYTHON%\\Scripts;%PYUSERBASESITE%\\Scripts;C:\\%WINPYTHON%;C:\\%WINPYTHON%\\Scripts;C:\\cygwin64\\bin;C:\\msys64;C:\\ProgramData\\chocolatey\\bin;%PATH%"
  - cmd: set
  - cmd: "C:\\%WINPYTHON%\\python.exe --version"
  - cmd: "C:\\%WINPYTHON%\\python.exe -m pip install --user -U pip setuptools wheel"
  - cmd: "C:\\%WINPYTHON%\\python.exe -m pip install --user -U pypiwin32 coverage coveralls"
  - cmd: set STATIC_DEPS=true & C:\\%WINPYTHON%\\python.exe -m pip install --user -U lxml
  # install 3rd party tools to test with
  - cmd: choco install --allow-empty-checksums dmd
  - cmd: choco install --allow-empty-checksums ldc
  - cmd: choco install --allow-empty-checksums swig
  - cmd: choco install --allow-empty-checksums vswhere
  - cmd: choco install --allow-empty-checksums xsltproc
  ### LINUX ###
  - sh: export PATH=$($LINUXPYTHON -m site --user-base):$($LINUXPYTHON -m site --user-base)/Scripts:$PATH
  - sh: $LINUXPYTHON --version
  - sh: $LINUXPYTHON -m pip install --user -U pip setuptools wheel 
  - sh: $LINUXPYTHON -m pip install --user -U coverage==4.0.3 coveralls
  - sh: STATIC_DEPS=true & $LINUXPYTHON -m pip install --user -U lxml
  

environment:
  COVERAGE: 0
  matrix:
    - WINPYTHON: "Python27"
      LINUXPYTHON: "/usr/bin/python2.7"
      BUILD_JOB_NUM: 1
      COVERAGE: 1

    - WINPYTHON: "Python36"
      LINUXPYTHON: "/usr/bin/python3.6"
      BUILD_JOB_NUM: 1
      COVERAGE: 1

    - WINPYTHON: "Python35"
      LINUXPYTHON: "/usr/bin/python3.5"
      BUILD_JOB_NUM: 1

    - WINPYTHON: "Python37"
      LINUXPYTHON: "/usr/bin/python3.7"
      BUILD_JOB_NUM: 1

matrix:	
  exclude:	
    # test python 2 on Visual Studio 2015 image
    - image: Visual Studio 2015	
      WINPYTHON: "Python37"	
    - image: Visual Studio 2015	
      WINPYTHON: "Python36"	
    - image: Visual Studio 2015	
      WINPYTHON: "Python35"
    # test python 3 on Visual Studio 2017 image
    - image: Visual Studio 2017	
      WINPYTHON: "Python27"

    # test python 2 on Visual Studio 2015 image
    - image: Ubuntu	
      WINPYTHON: "Python37"	
    - image: Ubuntu		
      WINPYTHON: "Python35"

# total build jobs:
# 4 python versions X 4 Jobs each = 16 Jobs

before_build:
    - ps: |
        if ($isWindows) 
        {
          dir "C:\Program Files\Git\usr\bin\x*.exe"
          if (Test-Path "C:\Program Files\Git\usr\bin\xsltproc.EXE" ) {
            Remove-Item  "C:\Program Files\Git\usr\bin\xsltproc.EXE" -ErrorAction Ignore
          }
          dir "C:\Program Files\Git\usr\bin\x*.exe"
        }
  
build: off

build_script:
  - cmd: "C:\\%WINPYTHON%\\python.exe runtest.py -l -a > all_tests.txt"
  - sh: $LINUXPYTHON runtest.py -l -a > all_tests.txt
  # setup coverage is set in environment
  - ps: |
      if ($env:COVERAGE -eq 1){ 
        $env:COVERAGE_PROCESS_START = "$($env:APPVEYOR_BUILD_FOLDER)/.coveragerc";
        $env:PYTHONNOUSERSITE = "";
        New-Item -ItemType Directory -Force -Path "$($env:PYSITEDIR)";
        $env:COVERAGE_FILE = "$($env:APPVEYOR_BUILD_FOLDER)/.coverage_file";
        $usercustomizeText = "import os`r`nos.environ['COVERAGE_PROCESS_START'] = '$($env:COVERAGE_PROCESS_START)'`r`nimport coverage`r`ncoverage.process_startup()";
        $usercustomizeText|Set-Content "$($env:PYSITEDIR)/usercustomize.py";
        $coveragercFile = "[run]`r`nsource = $($env:APPVEYOR_BUILD_FOLDER)/src`r`nparallel = True`r`nomit =`r`n`t#Tests.py`r`n`tsrc\test_*`r`n`tsrc\setup.py`r`n`r`n[path]`r`nsource = $($env:APPVEYOR_BUILD_FOLDER)`r`n[report]`r`nomit =`r`n`t#Tests.py`r`n`tsrc\test_*`r`n`tsrc\setup.py`r`n`r`n"
        $coveragercFile|Set-Content "$env:COVERAGE_PROCESS_START";
      }
  # setup portion of tests for this build job (1-4)
  - ps: >-
      $TOTAL_BUILD_JOBS = 4;
      $Lines = (Get-Content all_tests.txt | Measure-Object -line).Lines;
      $start = ($Lines / $TOTAL_BUILD_JOBS) * ($Env:BUILD_JOB_NUM - 1);
      $end = ($Lines / $TOTAL_BUILD_JOBS) * $Env:BUILD_JOB_NUM;
      if ( $Env:BUILD_JOB_NUM -eq $TOTAL_BUILD_JOBS){ $end = $Lines };
      if ( $start -eq 0 ){ $start = 1 };
      get-content all_tests.txt | select -first ($end - $start) -skip ($start - 1) | Out-File -Encoding ASCII build_tests.txt;
  # NOTE: running powershell from cmd on purpose because it formats the output
  # correctly
  - cmd: powershell -Command "& { if($env:COVERAGE -eq 1) { coverage run -p --rcfile=$($env:COVERAGE_PROCESS_START) runtest.py test/ENV.py} else { C:\\%WINPYTHON%\\python.exe runtest.py -j 2 test/ENV.py }; if($LastExitCode -eq 2 -Or $LastExitCode -eq 0) { $host.SetShouldExit(0 )} else {$host.SetShouldExit(1)}}"
  - sh: if [ "$COVERAGE" -eq "1" ]; then coverage run -p --rcfile="$COVERAGE_PROCESS_START" runtest.py test/ENV.py || if [[ $? == 2 ]]; then true; else false; fi; else $LINUXPYTHON runtest.py -j 2 test/ENV.py || if [[ $? == 2 ]]; then true; else false; fi

on_success:
  - cmd: if %COVERAGE% equ 1 coverage combine
  - cmd: if %COVERAGE% equ 1 coverage report
  - cmd: if %COVERAGE% equ 1 coveralls --rcfile="%COVERAGE_PROCESS_START%"
  - sh: if [ "$COVERAGE" -eq "1" ]; then coverage combine; fi
  - sh: if [ "$COVERAGE" -eq "1" ]; then coverage report; fi
  - sh: if [ "$COVERAGE" -eq "1" ]; then coveralls --rcfile="$COVERAGE_PROCESS_START"; fi
