<!DOCTYPE sconsdoc [
    <!ENTITY % scons SYSTEM "../scons.mod">
    %scons;
    <!ENTITY % builders-mod SYSTEM "builders.mod">
    %builders-mod;
    <!ENTITY % functions-mod SYSTEM "functions.mod">
    %functions-mod;
    <!ENTITY % tools-mod SYSTEM "tools.mod">
    %tools-mod;
    <!ENTITY % variables-mod SYSTEM "variables.mod">
    %variables-mod;
]>

<variablelist xmlns="http://www.scons.org/dbxsd/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.scons.org/dbxsd/v1.0 http://www.scons.org/dbxsd/v1.0/scons.xsd">
  <varlistentry id="f-Action">
    <term><function>Action</function>(<parameter>action, [cmd/str/fun, [var, ...]] [option=value, ...]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Action</methodname>(<parameter>action, [cmd/str/fun, [var, ...]] [option=value, ...]</parameter>)</term>
    <listitem><para>
Creates an Action object for
the specified
<varname>action</varname>.
See the manpage section "Action Objects"
for a complete explanation of the arguments and behavior.
</para>

<para>
Note that the
<function>env.Action</function>()
form of the invocation will expand
construction variables in any argument strings,
including the
<varname>action</varname>
argument, at the time it is called
using the construction variables in the
<varname>env</varname>
construction environment through which
<function>env.Action</function>()
was called.
The
<function>Action</function>()
form delays all variable expansion
until the Action object is actually used.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-AddMethod">
    <term><function>AddMethod</function>(<parameter>object, function, [name]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>AddMethod</methodname>(<parameter>function, [name]</parameter>)</term>
    <listitem><para>
When called with the
<function>AddMethod</function>()
form,
adds the specified
<varname>function</varname>
to the specified
<varname>object</varname>
as the specified method
<varname>name</varname>.
When called with the
<function>env.AddMethod</function>()
form,
adds the specified
<varname>function</varname>
to the construction environment
<varname>env</varname>
as the specified method
<varname>name</varname>.
In both cases, if
<varname>name</varname>
is omitted or
<literal>None</literal>,
the name of the
specified
<varname>function</varname>
itself is used for the method name.
</para>

<para>
Examples:
</para>

<example_commands>
# Note that the first argument to the function to
# be attached as a method must be the object through
# which the method will be called; the Python
# convention is to call it 'self'.
def my_method(self, arg):
    print("my_method() got", arg)

# Use the global AddMethod() function to add a method
# to the Environment class.  This
AddMethod(Environment, my_method)
env = Environment()
env.my_method('arg')

# Add the function as a method, using the function
# name for the method call.
env = Environment()
env.AddMethod(my_method, 'other_method_name')
env.other_method_name('another arg')
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-AddOption">
    <term><function>AddOption</function>(<parameter>arguments</parameter>)</term>
    <listitem><para>
This function adds a new command-line option to be recognized.
The specified
<varname>arguments</varname>
are the same as supported by the <function>add_option</function>
method in the standard Python library module <emphasis>optparse</emphasis>,
with a few additional capabilities noted below;
see the documentation for
<emphasis>optparse</emphasis>
for a thorough discussion of its option-processing capabities.
</para>

<para>
In addition to the arguments and values supported by the
<function>optparse.add_option</function>()
method,
the SCons
<function>AddOption</function>
function allows you to set the
<literal>nargs</literal>
keyword value to
<literal>'?'</literal>
(a string with just the question mark)
to indicate that the specified long option(s) take(s) an
<emphasis>optional</emphasis>
argument.
When
<literal>nargs = '?'</literal>
is passed to the
<function>AddOption</function>
function, the
<literal>const</literal>
keyword argument
may be used to supply the "default"
value that should be used when the
option is specified on the command line
without an explicit argument.
</para>

<para>
If no
<literal>default=</literal>
keyword argument is supplied when calling
<function>AddOption</function>,
the option will have a default value of
<literal>None</literal>.
</para>

<para>
Unlike regular <emphasis>optparse</emphasis>, option names
added via <function>AddOption</function> must be matched
exactly, the automatic matching of abbreviations on the
command line for long options is not supported.
To allow specific abbreviations,
include them in the <function>AddOption</function> call.
</para>

<para>
Once a new command-line option has been added with
<function>AddOption</function>,
the option value may be accessed using
<function>GetOption</function>
or
<function>env.GetOption</function>().
<!--
The value may also be set, using
&f-SetOption;
or
<function>env.SetOption</function>(),
if conditions in a
&SConscript;
require overriding any default value.
Note, however, that a
value specified on the command line will
<emphasis>always</emphasis>
override a value set by any SConscript file.
-->
<function>SetOption</function> is not currently supported for
options added with <function>AddOption</function>.
</para>

<para>
Any specified
<literal>help=</literal>
strings for the new option(s)
will be displayed by the
<option>-H</option>
or
<option>-h</option>
options
(the latter only if no other help text is
specified in the SConscript files).
The help text for the local options specified by
<function>AddOption</function>
will appear below the SCons options themselves,
under a separate
<literal>Local Options</literal>
heading.
The options will appear in the help text
in the order in which the
<function>AddOption</function>
calls occur.
</para>

<para>
Example:
</para>

<example_commands>
AddOption('--prefix',
          dest='prefix',
          nargs=1, type='string',
          action='store',
          metavar='DIR',
          help='installation prefix')
env = Environment(PREFIX = GetOption('prefix'))
</example_commands>

<note>
<para>
While <function>AddOption</function> behaves like
<function>add_option</function>,
from the <emphasis>optparse</emphasis> module,
the behavior of options added by <function>AddOption</function>
which take arguments is underfined in
<command>scons</command> if whitespace
(rather than an <literal>=</literal> sign) is used as
the separator on the command line when
the option is invoked.
Such usage should be avoided.
</para>
</note>

</listitem>
  </varlistentry>
  <varlistentry id="f-AddPostAction">
    <term><function>AddPostAction</function>(<parameter>target, action</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>AddPostAction</methodname>(<parameter>target, action</parameter>)</term>
    <listitem><para>
Arranges for the specified
<varname>action</varname>
to be performed
after the specified
<varname>target</varname>
has been built.
The specified action(s) may be
an Action object, or anything that
can be converted into an Action object
See the manpage section "Action Objects"
for a complete explanation.
</para>

<para>
When multiple targets are supplied,
the action may be called multiple times,
once after each action that generates
one or more targets in the list.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-AddPreAction">
    <term><function>AddPreAction</function>(<parameter>target, action</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>AddPreAction</methodname>(<parameter>target, action</parameter>)</term>
    <listitem><para>
Arranges for the specified
<varname>action</varname>
to be performed
before the specified
<varname>target</varname>
is built.
The specified action(s) may be
an Action object, or anything that
can be converted into an Action object
See the manpage section "Action Objects"
for a complete explanation.
</para>

<para>
When multiple targets are specified,
the action(s) may be called multiple times,
once before each action that generates
one or more targets in the list.
</para>

<para>
Note that if any of the targets are built in multiple steps,
the action will be invoked just
before the "final" action that specifically
generates the specified target(s).
For example, when building an executable program
from a specified source
<filename>.c</filename>
file via an intermediate object file:
</para>

<example_commands>
foo = Program('foo.c')
AddPreAction(foo, 'pre_action')
</example_commands>

<para>
The specified
<literal>pre_action</literal>
would be executed before
<command>scons</command>
calls the link command that actually
generates the executable program binary
<filename>foo</filename>,
not before compiling the
<filename>foo.c</filename>
file into an object file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Alias">
    <term><function>Alias</function>(<parameter>alias, [targets, [action]]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Alias</methodname>(<parameter>alias, [targets, [action]]</parameter>)</term>
    <listitem><para>
Creates one or more phony targets that
expand to one or more other targets.
An optional
<varname>action</varname>
(command)
or list of actions
can be specified that will be executed
whenever the any of the alias targets are out-of-date.
Returns the Node object representing the alias,
which exists outside of any file system.
This Node object, or the alias name,
may be used as a dependency of any other target,
including another alias.
<function>Alias</function>
can be called multiple times for the same
alias to add additional targets to the alias,
or additional actions to the list for this alias.
Aliases are global even if set through
the construction environment method.
</para>

<para>
Examples:
</para>

<example_commands>
Alias('install')
Alias('install', '/usr/bin')
Alias(['install', 'install-lib'], '/usr/local/lib')

env.Alias('install', ['/usr/local/bin', '/usr/local/lib'])
env.Alias('install', ['/usr/local/man'])

env.Alias('update', ['file1', 'file2'], "update_database $SOURCES")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-AllowSubstExceptions">
    <term><function>AllowSubstExceptions</function>(<parameter>[exception, ...]</parameter>)</term>
    <listitem><para>
Specifies the exceptions that will be allowed
when expanding construction variables.
By default,
any construction variable expansions that generate a
<literal>NameError</literal>
or
<literal>IndexError</literal>
exception will expand to a
<literal>''</literal>
(an empty string) and not cause scons to fail.
All exceptions not in the specified list
will generate an error message
and terminate processing.
</para>

<para>
If
<function>AllowSubstExceptions</function>
is called multiple times,
each call completely overwrites the previous list
of allowed exceptions.
</para>

<para>
Example:
</para>

<example_commands>
# Requires that all construction variable names exist.
# (You may wish to do this if you want to enforce strictly
# that all construction variables must be defined before use.)
AllowSubstExceptions()

# Also allow a string containing a zero-division expansion
# like '${1 / 0}' to evalute to ''.
AllowSubstExceptions(IndexError, NameError, ZeroDivisionError)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-AlwaysBuild">
    <term><function>AlwaysBuild</function>(<parameter>target, ...</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>AlwaysBuild</methodname>(<parameter>target, ...</parameter>)</term>
    <listitem><para>
Marks each given
<varname>target</varname>
so that it is always assumed to be out of date,
and will always be rebuilt if needed.
Note, however, that
<function>AlwaysBuild</function>
does not add its target(s) to the default target list,
so the targets will only be built
if they are specified on the command line,
or are a dependent of a target specified on the command line--but
they will
<emphasis>always</emphasis>
be built if so specified.
Multiple targets can be passed in to a single call to
<function>AlwaysBuild</function>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Append">
    <term><replaceable>env</replaceable>.<methodname>Append</methodname>(<parameter>key=val, [...]</parameter>)</term>
    <listitem><para>
Appends the specified keyword arguments
to the end of construction variables in the environment.
If the Environment does not have
the specified construction variable,
it is simply added to the environment.
If the values of the construction variable
and the keyword argument are the same type,
then the two values will be simply added together.
Otherwise, the construction variable
and the value of the keyword argument
are both coerced to lists,
and the lists are added together.
(See also the <function>Prepend</function> method).
</para>

<para>
Example:
</para>

<example_commands>
env.Append(CCFLAGS = ' -g', FOO = ['foo.yyy'])
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-AppendENVPath">
    <term><replaceable>env</replaceable>.<methodname>AppendENVPath</methodname>(<parameter>name, newpath, [envname, sep, delete_existing]</parameter>)</term>
    <listitem><para>
This appends new path elements to the given path in the
specified external environment
(<literal>ENV</literal>
by default).
This will only add
any particular path once (leaving the last one it encounters and
ignoring the rest, to preserve path order),
and to help assure this,
will normalize all paths (using
<function>os.path.normpath</function>
and
<function>os.path.normcase</function>).
This can also handle the
case where the given old path variable is a list instead of a
string, in which case a list will be returned instead of a string.
</para>

<para>
If
<varname>delete_existing</varname>
is 0, then adding a path that already exists
will not move it to the end; it will stay where it is in the list.
</para>

<para>
Example:
</para>

<example_commands>
print 'before:',env['ENV']['INCLUDE']
include_path = '/foo/bar:/foo'
env.AppendENVPath('INCLUDE', include_path)
print 'after:',env['ENV']['INCLUDE']

yields:
before: /foo:/biz
after: /biz:/foo/bar:/foo
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-AppendUnique">
    <term><replaceable>env</replaceable>.<methodname>AppendUnique</methodname>(<parameter>key=val, [...], delete_existing=0</parameter>)</term>
    <listitem><para>
Appends the specified keyword arguments
to the end of construction variables in the environment.
If the Environment does not have
the specified construction variable,
it is simply added to the environment.
If the construction variable being appended to is a list,
then any value(s) that already exist in the
construction variable will
<emphasis>not</emphasis>
be added again to the list.
However, if delete_existing is 1,
existing matching values are removed first, so
existing values in the arg list move to the end of the list.
</para>

<para>
Example:
</para>

<example_commands>
env.AppendUnique(CCFLAGS = '-g', FOO = ['foo.yyy'])
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Builder">
    <term><function>Builder</function>(<parameter>action, [arguments]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Builder</methodname>(<parameter>action, [arguments]</parameter>)</term>
    <listitem><para>
Creates a Builder object for
the specified
<varname>action</varname>.
See the manpage section "Builder Objects"
for a complete explanation of the arguments and behavior.
</para>

<para>
Note that the
<function>env.Builder</function>()
form of the invocation will expand
construction variables in any arguments strings,
including the
<varname>action</varname>
argument,
at the time it is called
using the construction variables in the
<varname>env</varname>
construction environment through which
<function>env.Builder</function>()
was called.
The
<function>Builder</function>
form delays all variable expansion
until after the Builder object is actually called.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-CacheDir">
    <term><function>CacheDir</function>(<parameter>cache_dir</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>CacheDir</methodname>(<parameter>cache_dir</parameter>)</term>
    <listitem><para>
Specifies that
<command>scons</command>
will maintain a cache of derived files in
<varname>cache_dir</varname>.
The derived files in the cache will be shared
among all the builds using the same
<function>CacheDir</function>
call.
Specifying a
<varname>cache_dir</varname>
of
<literal>None</literal>
disables derived file caching.
</para>

<para>
Calling
<function>env.CacheDir</function>()
will only affect targets built
through the specified construction environment.
Calling
<function>CacheDir</function>
sets a global default
that will be used by all targets built
through construction environments
that do
<emphasis>not</emphasis>
have an
<function>env.CacheDir</function>()
specified.
</para>

<para>
When a
<function>CacheDir</function>()
is being used and
<command>scons</command>
finds a derived file that needs to be rebuilt,
it will first look in the cache to see if a
derived file has already been built
from identical input files and an identical build action
(as incorporated into the MD5 build signature).
If so,
<command>scons</command>
will retrieve the file from the cache.
If the derived file is not present in the cache,
<command>scons</command>
will rebuild it and
then place a copy of the built file in the cache
(identified by its MD5 build signature),
so that it may be retrieved by other
builds that need to build the same derived file
from identical inputs.
</para>

<para>
Use of a specified
<function>CacheDir</function>
may be disabled for any invocation
by using the
<option>--cache-disable</option>
option.
</para>

<para>
If the
<option>--cache-force</option>
option is used,
<command>scons</command>
will place a copy of
<emphasis>all</emphasis>
derived files in the cache,
even if they already existed
and were not built by this invocation.
This is useful to populate a cache
the first time
<function>CacheDir</function>
is added to a build,
or after using the
<option>--cache-disable</option>
option.
</para>

<para>
When using
<function>CacheDir</function>,
<command>scons</command>
will report,
"Retrieved `file' from cache,"
unless the
<option>--cache-show</option>
option is being used.
When the
<option>--cache-show</option>
option is used,
<command>scons</command>
will print the action that
<emphasis>would</emphasis>
have been used to build the file,
without any indication that
the file was actually retrieved from the cache.
This is useful to generate build logs
that are equivalent regardless of whether
a given derived file has been built in-place
or retrieved from the cache.
</para>

<para>
The
<link linkend="f-NoCache"><function>NoCache</function></link>
method can be used to disable caching of specific files.  This can be
useful if inputs and/or outputs of some tool are impossible to
predict or prohibitively large.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Clean">
    <term><function>Clean</function>(<parameter>targets, files_or_dirs</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Clean</methodname>(<parameter>targets, files_or_dirs</parameter>)</term>
    <listitem><para>
This specifies a list of files or directories which should be removed
whenever the targets are specified with the
<option>-c</option>
command line option.
The specified targets may be a list
or an individual target.
Multiple calls to
<function>Clean</function>
are legal,
and create new targets or add files and directories to the
clean list for the specified targets.
</para>

<para>
Multiple files or directories should be specified
either as separate arguments to the
<function>Clean</function>
method, or as a list.
<function>Clean</function>
will also accept the return value of any of the construction environment
Builder methods.
Examples:
</para>

<para>
The related
<link linkend="f-NoClean"><function>NoClean</function></link>
function overrides calling
<function>Clean</function>
for the same target,
and any targets passed to both functions will
<emphasis>not</emphasis>
be removed by the
<option>-c</option>
option.
</para>

<para>
Examples:
</para>

<example_commands>
Clean('foo', ['bar', 'baz'])
Clean('dist', env.Program('hello', 'hello.c'))
Clean(['foo', 'bar'], 'something_else_to_clean')
</example_commands>

<para>
In this example,
installing the project creates a subdirectory for the documentation.
This statement causes the subdirectory to be removed
if the project is deinstalled.
</para>
<example_commands>
Clean(docdir, os.path.join(docdir, projectname))
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Clone">
    <term><replaceable>env</replaceable>.<methodname>Clone</methodname>(<parameter>[key=val, ...]</parameter>)</term>
    <listitem><para>
Returns a separate copy of a construction environment.
If there are any keyword arguments specified,
they are added to the returned copy,
overwriting any existing values
for the keywords.
</para>

<para>
Example:
</para>

<example_commands>
env2 = env.Clone()
env3 = env.Clone(CCFLAGS = '-g')
</example_commands>

<para>
Additionally, a list of tools and a toolpath may be specified, as in
the <link linkend="f-Environment"><function>Environment</function></link> constructor:
</para>

<example_commands>
def MyTool(env): env['FOO'] = 'bar'
env4 = env.Clone(tools = ['msvc', MyTool])
</example_commands>

<para>
The
<varname>parse_flags</varname>
keyword argument is also recognized to allow merging command-line
style arguments into the appropriate construction
variables (see <link linkend="f-MergeFlags"><function>env.MergeFlags</function></link>).
</para>

<example_commands>
# create an environment for compiling programs that use wxWidgets
wx_env = env.Clone(parse_flags='!wx-config --cflags --cxxflags')
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Command">
    <term><function>Command</function>(<parameter>target, source, action, [key=val, ...]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Command</methodname>(<parameter>target, source, action, [key=val, ...]</parameter>)</term>
    <listitem><para>
Executes a specific action
(or list of actions)
to build a target file or files.
This is more convenient
than defining a separate Builder object
for a single special-case build.
</para>

<para>
<function>Command</function> builder accepts
<varname>source_scanner</varname>,
<varname>target_scanner</varname>,
<varname>source_factory</varname>, and
<varname>target_factory</varname>
keyword arguments. The *_scanner args can
be used to specify
a Scanner object
that will be used to apply a custom
scanner for a source or target.
For example, the global
<literal>DirScanner</literal>
object can be used
if any of the sources will be directories
that must be scanned on-disk for
changes to files that aren't
already specified in other Builder of function calls.
The *_factory args take a factory function that the
Command will use to turn any sources or targets
specified as strings into SCons Nodes.
See the sections "Builder Objects"
below, for more information about how these
args work in a Builder.
</para>

<para>
Any other keyword arguments specified override any
same-named existing construction variables.
</para>

<para>
An action can be an external command,
specified as a string,
or a callable Python object;
see the manpage section "Action Objects"
for more complete information.
Also note that a string specifying an external command
may be preceded by an
<literal>@</literal>
(at-sign)
to suppress printing the command in question,
or by a
<literal>-</literal>
(hyphen)
to ignore the exit status of the external command.
</para>

<para>
Examples:
</para>

<example_commands>
env.Command('foo.out', 'foo.in',
            "$FOO_BUILD &lt; $SOURCES &gt; $TARGET")

env.Command('bar.out', 'bar.in',
            ["rm -f $TARGET",
             "$BAR_BUILD &lt; $SOURCES &gt; $TARGET"],
            ENV={'PATH': '/usr/local/bin/'})

def rename(env, target, source):
    import os
    os.rename('.tmp', str(target[0]))

env.Command('baz.out', 'baz.in',
            ["$BAZ_BUILD &lt; $SOURCES &gt; .tmp",
	     rename])
</example_commands>

<para>
Note that the
<function>Command</function>
function will usually assume, by default,
that the specified targets and/or sources are Files,
if no other part of the configuration
identifies what type of entries they are.
If necessary, you can explicitly specify
that targets or source nodes should
be treated as directories
by using the
<link linkend="f-Dir"><function>Dir</function></link>
or
<function>env.Dir</function>
functions.
</para>

<para>
Examples:
</para>

<example_commands>
env.Command('ddd.list', Dir('ddd'), 'ls -l $SOURCE &gt; $TARGET')

env['DISTDIR'] = 'destination/directory'
env.Command(env.Dir('$DISTDIR')), None, make_distdir)
</example_commands>

<para>
Also note that SCons will usually
automatically create any directory necessary to hold a target file,
so you normally don't need to create directories by hand.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Configure">
    <term><function>Configure</function>(<parameter>env, [custom_tests, conf_dir, log_file, config_h]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Configure</methodname>(<parameter>[custom_tests, conf_dir, log_file, config_h]</parameter>)</term>
    <listitem><para>
Creates a Configure object for integrated
functionality similar to GNU autoconf.
See the manpage section "Configure Contexts"
for a complete explanation of the arguments and behavior.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Copy">
    <term><replaceable>env</replaceable>.<methodname>Copy</methodname>(<parameter>[key=val, ...]</parameter>)</term>
    <listitem><para>
A now-deprecated synonym for
<function>env.Clone</function>().
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Decider">
    <term><function>Decider</function>(<parameter>function</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Decider</methodname>(<parameter>function</parameter>)</term>
    <listitem><para>
Specifies that all up-to-date decisions for
targets built through this construction environment
will be handled by the specified
<varname>function</varname>.
The
<varname>function</varname>
can be one of the following strings
that specify the type of decision function
to be performed:
</para>

<para>
<variablelist>
<varlistentry>
<term><literal>timestamp-newer</literal></term>
<listitem>
<para>
Specifies that a target shall be considered out of date and rebuilt
if the dependency's timestamp is newer than the target file's timestamp.
This is the behavior of the classic Make utility,
and
<literal>make</literal>
can be used a synonym for
<literal>timestamp-newer</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>timestamp-match</literal></term>
<listitem>
<para>
Specifies that a target shall be considered out of date and rebuilt
if the dependency's timestamp is different than the
timestamp recorded the last time the target was built.
This provides behavior very similar to the classic Make utility
(in particular, files are not opened up so that their
contents can be checksummed)
except that the target will also be rebuilt if a
dependency file has been restored to a version with an
<emphasis>earlier</emphasis>
timestamp, such as can happen when restoring files from backup archives.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>MD5</literal></term>
<listitem>
<para>
Specifies that a target shall be considered out of date and rebuilt
if the dependency's content has changed since the last time
the target was built,
as determined be performing an MD5 checksum
on the dependency's contents
and comparing it to the checksum recorded the
last time the target was built.
<literal>content</literal>
can be used as a synonym for
<literal>MD5</literal>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>MD5-timestamp</literal></term>
<listitem>
<para>
Specifies that a target shall be considered out of date and rebuilt
if the dependency's content has changed since the last time
the target was built,
except that dependencies with a timestamp that matches
the last time the target was rebuilt will be
assumed to be up-to-date and
<emphasis>not</emphasis>
rebuilt.
This provides behavior very similar
to the
<literal>MD5</literal>
behavior of always checksumming file contents,
with an optimization of not checking
the contents of files whose timestamps haven't changed.
The drawback is that SCons will
<emphasis>not</emphasis>
detect if a file's content has changed
but its timestamp is the same,
as might happen in an automated script
that runs a build,
updates a file,
and runs the build again,
all within a single second.
</para>
</listitem>
</varlistentry>
</variablelist>
</para>

<para>
Examples:
</para>

<example_commands>
# Use exact timestamp matches by default.
Decider('timestamp-match')

# Use MD5 content signatures for any targets built
# with the attached construction environment.
env.Decider('content')
</example_commands>

<para>
In addition to the above already-available functions, the
<varname>function</varname>
argument may be a Python function you supply.
Such a function must accept the following four arguments:
</para>

<para>
<variablelist>
<varlistentry>
<term><parameter>dependency</parameter></term>
<listitem>
<para>
The Node (file) which
should cause the
<varname>target</varname>
to be rebuilt
if it has "changed" since the last tme
<varname>target</varname>
was built.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><parameter>target</parameter></term>
<listitem>
<para>
The Node (file) being built.
In the normal case,
this is what should get rebuilt
if the
<varname>dependency</varname>
has "changed."
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><parameter>prev_ni</parameter></term>
<listitem>
<para>
Stored information about the state of the
<varname>dependency</varname>
the last time the
<varname>target</varname>
was built.
This can be consulted to match various
file characteristics
such as the timestamp,
size, or content signature.
</para>
</listitem>
</varlistentry>
    <varlistentry>
<term><parameter>repo_node</parameter></term>
<listitem>
<para>
If set, use this Node instead of the one specified by
<varname>dependency</varname>
to determine if the dependency has changed.
This argument is optional so should be written
as a default argument (typically it would be
written as <literal>repo_node=None</literal>).
A caller will normally only set this if the
target only exists in a Repository.
</para>
</listitem>
</varlistentry>

</variablelist>
</para>

<para>
The
<varname>function</varname>
should return a value which evaluates
<constant>True</constant>
if the
<varname>dependency</varname>
has "changed" since the last time
the
<varname>target</varname>
was built
(indicating that the target
<emphasis>should</emphasis>
be rebuilt),
and a value which evaluates
<constant>False</constant>
otherwise
(indicating that the target should
<emphasis>not</emphasis>
be rebuilt).
Note that the decision can be made
using whatever criteria are appopriate.
Ignoring some or all of the function arguments
is perfectly normal.
</para>

<para>
Example:
</para>

<example_commands>
def my_decider(dependency, target, prev_ni, repo_node=None):
    return not os.path.exists(str(target))

env.Decider(my_decider)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Default">
    <term><function>Default</function>(<parameter>targets...</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Default</methodname>(<parameter>targets...</parameter>)</term>
    <listitem><para>
This specifies a list of default targets,
which will be built by
<command>scons</command>
if no explicit targets are given on the command line.
Multiple calls to
<function>Default</function>
are legal,
and add to the list of default targets.
As noted above, both forms of this call affect the
same global list of default targets; the
construction environment method applies
construction variable expansion to the targets.
</para>

<para>
Multiple targets should be specified as
separate arguments to the
<function>Default</function>
method, or as a list.
<function>Default</function>
will also accept the Node returned by any
of a construction environment's
builder methods.
</para>

<para>
Examples:
</para>

<example_commands>
Default('foo', 'bar', 'baz')
env.Default(['a', 'b', 'c'])
hello = env.Program('hello', 'hello.c')
env.Default(hello)
</example_commands>

<para>
An argument to
<function>Default</function>
of
<literal>None</literal>
will clear all default targets.
Later calls to
<function>Default</function>
will add to the (now empty) default-target list
like normal.
</para>

<para>
The current list of targets added using the
<function>Default</function>
function or method is available in the
<literal>DEFAULT_TARGETS</literal>
list;
see below.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-DefaultEnvironment">
    <term><function>DefaultEnvironment</function>(<parameter>[**kwargs]</parameter>)</term>
    <listitem><para>
Creates and returns the default <phrase>construction environment</phrase> object.
The default <phrase>construction environment</phrase> is used internally by SCons
in order to execute many of the global functions in this list
(i.e. those not called as methods of a specific
<phrase>construction environment</phrase>), and to fetch source files transparently
from source code management systems.
The default environment is a singleton, so the keyword
arguments affect it only on the first call, on subsequent
calls the already-constructed object is returned and
any arguments are ignored.
The default environment can be modified in the same way
as any <phrase>construction environment</phrase>.
Modifying the <phrase>default environment</phrase> has no effect on the environment
constructed by a subsequent <function>Environment</function> call.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Depends">
    <term><function>Depends</function>(<parameter>target, dependency</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Depends</methodname>(<parameter>target, dependency</parameter>)</term>
    <listitem><para>
Specifies an explicit dependency;
the
<varname>target</varname>
will be rebuilt
whenever the
<varname>dependency</varname>
has changed.
Both the specified
<varname>target</varname>
and
<varname>dependency</varname>
can be a string
(usually the path name of a file or directory)
or Node objects,
or a list of strings or Node objects
(such as returned by a Builder call).
This should only be necessary
for cases where the dependency
is not caught by a Scanner
for the file.
</para>

<para>
Example:
</para>

<example_commands>
env.Depends('foo', 'other-input-file-for-foo')

mylib = env.Library('mylib.c')
installed_lib = env.Install('lib', mylib)
bar = env.Program('bar.c')

# Arrange for the library to be copied into the installation
# directory before trying to build the "bar" program.
# (Note that this is for example only.  A "real" library
# dependency would normally be configured through the $LIBS
# and $LIBPATH variables, not using an env.Depends() call.)

env.Depends(bar, installed_lib)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Detect">
    <term><replaceable>env</replaceable>.<methodname>Detect</methodname>(<parameter>progs</parameter>)</term>
    <listitem><para>
Find an executable from one or more choices:
<parameter>progs</parameter> may be a string or a list of strings.
Returns the first value from <parameter>progs</parameter>
that was found, or <constant>None</constant>.
Executable is searched by checking the paths specified
by <replaceable>env</replaceable><literal>['ENV']['PATH']</literal>.
On Windows systems, additionally applies the filename suffixes found in
<replaceable>env</replaceable><literal>['ENV']['PATHEXT']</literal>
but will not include any such extension in the return value.
<function>env.Detect</function> is a wrapper around <link linkend="f-WhereIs"><function>env.WhereIs</function></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Dictionary">
    <term><replaceable>env</replaceable>.<methodname>Dictionary</methodname>(<parameter>[vars]</parameter>)</term>
    <listitem><para>
Returns a dictionary object
containing the <phrase>construction variables</phrase> in the <phrase>construction environment</phrase>.
If there are any arguments specified,
the values of the specified <phrase>construction variables</phrase>
are returned as a string (if one
argument) or as a list of strings.
</para>

<para>
Example:
</para>

<example_commands>
cvars = env.Dictionary()
cc_values = env.Dictionary('CC', 'CCFLAGS', 'CCCOM')
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Dir">
    <term><function>Dir</function>(<parameter>name, [directory]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Dir</methodname>(<parameter>name, [directory]</parameter>)</term>
    <listitem><para>
Returns Directory Node(s).
A Directory Node is an object that represents a directory.
<varname>name</varname>
can be a relative or absolute path or a list of such paths.
<varname>directory</varname>
is an optional directory that will be used as the parent directory.
If no
<varname>directory</varname>
is specified, the current script's directory is used as the parent.
</para>

<para>
If
<varname>name</varname>
is a single pathname, the corresponding node is returned.
If
<varname>name</varname>
is a list, SCons returns a list of nodes.
Construction variables are expanded in
<varname>name</varname>.
</para>

<para>
Directory Nodes can be used anywhere you
would supply a string as a directory name
to a Builder method or function.
Directory Nodes have attributes and methods
that are useful in many situations;
see manpage section "File and Directory Nodes"
for more information.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Dump">
    <term><replaceable>env</replaceable>.<methodname>Dump</methodname>(<parameter>[key]</parameter>)</term>
    <listitem><para>
Returns a pretty printable representation of the environment.
<varname>key</varname>,
if not
<literal>None</literal>,
should be a string containing the name of the variable of interest.
</para>

<para>
This SConstruct:
</para>

<example_commands>
env=Environment()
print(env.Dump('CCCOM'))
</example_commands>

<para>
will print:
</para>

<example_commands>
'$CC -c -o $TARGET $CCFLAGS $CPPFLAGS $_CPPDEFFLAGS $_CPPINCFLAGS $SOURCES'
</example_commands>

<para>
While this SConstruct:
</para>

<example_commands>
env=Environment()
print(env.Dump())
</example_commands>

<para>
will print:
</para>
<example_commands>
{ 'AR': 'ar',
  'ARCOM': '$AR $ARFLAGS $TARGET $SOURCES\n$RANLIB $RANLIBFLAGS $TARGET',
  'ARFLAGS': ['r'],
  'AS': 'as',
  'ASCOM': '$AS $ASFLAGS -o $TARGET $SOURCES',
  'ASFLAGS': [],
  ...
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-EnsurePythonVersion">
    <term><function>EnsurePythonVersion</function>(<parameter>major, minor</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>EnsurePythonVersion</methodname>(<parameter>major, minor</parameter>)</term>
    <listitem><para>
Ensure that the Python version is at least
<varname>major</varname>.<varname>minor</varname>.
This function will
print out an error message and exit SCons with a non-zero exit code if the
actual Python version is not late enough.
</para>

<para>
Example:
</para>

<example_commands>
EnsurePythonVersion(2,2)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-EnsureSConsVersion">
    <term><function>EnsureSConsVersion</function>(<parameter>major, minor, [revision]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>EnsureSConsVersion</methodname>(<parameter>major, minor, [revision]</parameter>)</term>
    <listitem><para>
Ensure that the SCons version is at least
<varname>major.minor</varname>,
or
<varname>major.minor.revision</varname>.
if
<varname>revision</varname>
is specified.
This function will
print out an error message and exit SCons with a non-zero exit code if the
actual SCons version is not late enough.
</para>

<para>
Examples:
</para>

<example_commands>
EnsureSConsVersion(0,14)

EnsureSConsVersion(0,96,90)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Environment">
    <term><function>Environment</function>(<parameter>[key=value, ...]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Environment</methodname>(<parameter>[key=value, ...]</parameter>)</term>
    <listitem><para>
Return a new construction environment
initialized with the specified
<varname>key</varname><literal>=</literal><varname>value</varname>
pairs.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Execute">
    <term><function>Execute</function>(<parameter>action, [strfunction, varlist]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Execute</methodname>(<parameter>action, [strfunction, varlist]</parameter>)</term>
    <listitem><para>
Executes an Action object.
The specified
<varname>action</varname>
may be an Action object
(see manpage section "Action Objects"
for a complete explanation of the arguments and behavior),
or it may be a command-line string,
list of commands,
or executable Python function,
each of which will be converted
into an Action object
and then executed.
The exit value of the command
or return value of the Python function
will be returned.
</para>

<para>
Note that
<command>scons</command>
will print an error message if the executed
<varname>action</varname>
fails--that is,
exits with or returns a non-zero value.
<command>scons</command>
will
<emphasis>not</emphasis>,
however,
automatically terminate the build
if the specified
<varname>action</varname>
fails.
If you want the build to stop in response to a failed
<function>Execute</function>
call,
you must explicitly check for a non-zero return value:
</para>

<example_commands>
Execute(Copy('file.out', 'file.in'))

if Execute("mkdir sub/dir/ectory"):
    # The mkdir failed, don't try to build.
    Exit(1)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Exit">
    <term><function>Exit</function>(<parameter>[value]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Exit</methodname>(<parameter>[value]</parameter>)</term>
    <listitem><para>
This tells
<command>scons</command>
to exit immediately
with the specified
<varname>value</varname>.
A default exit value of
<literal>0</literal>
(zero)
is used if no value is specified.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Export">
    <term><function>Export</function>(<parameter>[vars...], [key=value...]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Export</methodname>(<parameter>[vars...], [key=value...]</parameter>)</term>
    <listitem><para>
Exports variables from the current
SConscript file to a global collection where they can be
imported by other SConscript files.
<parameter>vars</parameter> may be one or more
strings representing variable names to be exported.
If a string contains whitespace, it is split into
separate strings, as if multiple string arguments
had been given.  A <parameter>vars</parameter> argument
may also be a dictionary, which can be used to map variables
to different names when exported.
Keyword arguments can be used to provide names and their values.
</para>

<para>
<function>Export</function> calls are cumulative. Specifying a previously
exported variable will overwrite the earlier value.
Both local variables and global variables can be exported.
</para>

<para>
Examples:
</para>

<example_commands>
env = Environment()
# Make env available for all SConscript files to Import().
Export("env")

package = 'my_name'
# Make env and package available for all SConscript files:.
Export("env", "package")

# Make env and package available for all SConscript files:
Export(["env", "package"])

# Make env available using the name debug:
Export(debug=env)

# Make env available using the name debug:
Export({"debug": env})
</example_commands>

<para>
Note that the
<link linkend="f-SConscript"><function>SConscript</function></link>
function supports an <varname>exports</varname>
argument that allows exporting a variable or
set of variables to a specific SConscript file or files.
See the description below.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-File">
    <term><function>File</function>(<parameter>name, [directory]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>File</methodname>(<parameter>name, [directory]</parameter>)</term>
    <listitem><para>
Returns File Node(s).
A File Node is an object that represents a file.
<varname>name</varname>
can be a relative or absolute path or a list of such paths.
<varname>directory</varname>
is an optional directory that will be used as the parent directory.
If no
<varname>directory</varname>
is specified, the current script's directory is used as the parent.
</para>

<para>
If
<varname>name</varname>
is a single pathname, the corresponding node is returned.
If
<varname>name</varname>
is a list, SCons returns a list of nodes.
Construction variables are expanded in
<varname>name</varname>.
</para>

<para>
File Nodes can be used anywhere you
would supply a string as a file name
to a Builder method or function.
File Nodes have attributes and methods
that are useful in many situations;
see manpage section "File and Directory Nodes"
for more information.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-FindFile">
    <term><function>FindFile</function>(<parameter>file, dirs</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>FindFile</methodname>(<parameter>file, dirs</parameter>)</term>
    <listitem><para>
Search for
<varname>file</varname>
in the path specified by
<varname>dirs</varname>.
<varname>dirs</varname>
may be a list of directory names or a single directory name.
In addition to searching for files that exist in the filesystem,
this function also searches for derived files
that have not yet been built.
</para>

<para>
Example:
</para>

<example_commands>
foo = env.FindFile('foo', ['dir1', 'dir2'])
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-FindInstalledFiles">
    <term><function>FindInstalledFiles</function>()</term>
    <term><replaceable>env</replaceable>.<methodname>FindInstalledFiles</methodname>()</term>
    <listitem><para>
Returns the list of targets set up by the
<link linkend="b-Install"><function>Install</function></link>
or
<link linkend="b-InstallAs"><function>InstallAs</function></link>
builders.
</para>

<para>
This function serves as a convenient method to select the contents of
a binary package.
</para>

<para>
Example:
</para>

<example_commands>
Install( '/bin', [ 'executable_a', 'executable_b' ] )

# will return the file node list
# [ '/bin/executable_a', '/bin/executable_b' ]
FindInstalledFiles()

Install( '/lib', [ 'some_library' ] )

# will return the file node list
# [ '/bin/executable_a', '/bin/executable_b', '/lib/some_library' ]
FindInstalledFiles()
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-FindPathDirs">
    <term><function>FindPathDirs</function>(<parameter>variable</parameter>)</term>
    <listitem><para>
Returns a function
(actually a callable Python object)
intended to be used as the
<varname>path_function</varname>
of a Scanner object.
The returned object will look up the specified
<varname>variable</varname>
in a construction environment
and treat the construction variable's value as a list of
directory paths that should be searched
(like
<link linkend="cv-CPPPATH"><envar>$CPPPATH</envar></link>,
<link linkend="cv-LIBPATH"><envar>$LIBPATH</envar></link>,
etc.).
</para>

<para>
Note that use of
<function>FindPathDirs</function>
is generally preferable to
writing your own
<varname>path_function</varname>
for the following reasons:
1) The returned list will contain all appropriate directories
found in source trees
(when
<link linkend="f-VariantDir"><function>VariantDir</function></link>
is used)
or in code repositories
(when
<function>Repository</function>
or the
<option>-Y</option>
option are used).
2) scons will identify expansions of
<varname>variable</varname>
that evaluate to the same list of directories as,
in fact, the same list,
and avoid re-scanning the directories for files,
when possible.
</para>

<para>
Example:
</para>

<example_commands>
def my_scan(node, env, path, arg):
    # Code to scan file contents goes here...
    return include_files

scanner = Scanner(name = 'myscanner',
                  function = my_scan,
                  path_function = FindPathDirs('MYPATH'))
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-FindSourceFiles">
    <term><function>FindSourceFiles</function>(<parameter>node='"."'</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>FindSourceFiles</methodname>(<parameter>node='"."'</parameter>)</term>
    <listitem><para>
Returns the list of nodes which serve as the source of the built files.
It does so by inspecting the dependency tree starting at the optional
argument
<varname>node</varname>
which defaults to the '"."'-node. It will then return all leaves of
<varname>node</varname>.
These are all children which have no further children.
</para>

<para>
This function is a convenient method to select the contents of a Source
Package.
</para>

<para>
Example:
</para>

<example_commands>
Program( 'src/main_a.c' )
Program( 'src/main_b.c' )
Program( 'main_c.c' )

# returns ['main_c.c', 'src/main_a.c', 'SConstruct', 'src/main_b.c']
FindSourceFiles()

# returns ['src/main_b.c', 'src/main_a.c' ]
FindSourceFiles( 'src' )
</example_commands>

<para>
As you can see build support files (SConstruct in the above example)
will also be returned by this function.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Flatten">
    <term><function>Flatten</function>(<parameter>sequence</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Flatten</methodname>(<parameter>sequence</parameter>)</term>
    <listitem><para>
Takes a sequence (that is, a Python list or tuple)
that may contain nested sequences
and returns a flattened list containing
all of the individual elements in any sequence.
This can be helpful for collecting
the lists returned by calls to Builders;
other Builders will automatically
flatten lists specified as input,
but direct Python manipulation of
these lists does not.
</para>

<para>
Examples:
</para>

<example_commands>
foo = Object('foo.c')
bar = Object('bar.c')

# Because `foo' and `bar' are lists returned by the Object() Builder,
# `objects' will be a list containing nested lists:
objects = ['f1.o', foo, 'f2.o', bar, 'f3.o']

# Passing such a list to another Builder is all right because
# the Builder will flatten the list automatically:
Program(source = objects)

# If you need to manipulate the list directly using Python, you need to
# call Flatten() yourself, or otherwise handle nested lists:
for object in Flatten(objects):
    print str(object)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-GetBuildFailures">
    <term><function>GetBuildFailures</function>()</term>
    <listitem><para>
Returns a list of exceptions for the
actions that failed while
attempting to build targets.
Each element in the returned list is a
<classname>BuildError</classname>
object
with the following attributes
that record various aspects
of the build failure:
</para>

<para>
<literal>.node</literal>
The node that was being built
when the build failure occurred.
</para>

<para>
<literal>.status</literal>
The numeric exit status
returned by the command or Python function
that failed when trying to build the
specified Node.
</para>

<para>
<literal>.errstr</literal>
The SCons error string
describing the build failure.
(This is often a generic
message like "Error 2"
to indicate that an executed
command exited with a status of 2.)
</para>

<para>
<literal>.filename</literal>
The name of the file or
directory that actually caused the failure.
This may be different from the
<literal>.node</literal>
attribute.
For example,
if an attempt to build a target named
<filename>sub/dir/target</filename>
fails because the
<filename>sub/dir</filename>
directory could not be created,
then the
<literal>.node</literal>
attribute will be
<filename>sub/dir/target</filename>
but the
<literal>.filename</literal>
attribute will be
<filename>sub/dir</filename>.
</para>

<para>
<literal>.executor</literal>
The SCons Executor object
for the target Node
being built.
This can be used to retrieve
the construction environment used
for the failed action.
</para>

<para>
<literal>.action</literal>
The actual SCons Action object that failed.
This will be one specific action
out of the possible list of
actions that would have been
executed to build the target.
</para>

<para>
<literal>.command</literal>
The actual expanded command that was executed and failed,
after expansion of
<link linkend="cv-TARGET"><envar>$TARGET</envar></link>,
<link linkend="cv-SOURCE"><envar>$SOURCE</envar></link>,
and other construction variables.
</para>

<para>
Note that the
<function>GetBuildFailures</function>
function
will always return an empty list
until any build failure has occurred,
which means that
<function>GetBuildFailures</function>
will always return an empty list
while the
<filename>SConscript</filename>
files are being read.
Its primary intended use is
for functions that will be
executed before SCons exits
by passing them to the
standard Python
<function>atexit.register</function>()
function.
Example:
</para>

<example_commands>
import atexit

def print_build_failures():
    from SCons.Script import GetBuildFailures
    for bf in GetBuildFailures():
        print("%s failed: %s" % (bf.node, bf.errstr))

atexit.register(print_build_failures)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-GetBuildPath">
    <term><function>GetBuildPath</function>(<parameter>file, [...]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>GetBuildPath</methodname>(<parameter>file, [...]</parameter>)</term>
    <listitem><para>
Returns the
<command>scons</command>
path name (or names) for the specified
<varname>file</varname>
(or files).
The specified
<varname>file</varname>
or files
may be
<command>scons</command>
Nodes or strings representing path names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-GetLaunchDir">
    <term><function>GetLaunchDir</function>()</term>
    <term><replaceable>env</replaceable>.<methodname>GetLaunchDir</methodname>()</term>
    <listitem><para>
Returns the absolute path name of the directory from which
<command>scons</command>
was initially invoked.
This can be useful when using the
<option>-u</option>,
<option>-U</option>
or
<option>-D</option>
options, which internally
change to the directory in which the
<filename>SConstruct</filename>
file is found.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-GetOption">
    <term><function>GetOption</function>(<parameter>name</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>GetOption</methodname>(<parameter>name</parameter>)</term>
    <listitem><para>
This function provides a way to query the value of
SCons options set on scons command line
(or set using the
<link linkend="f-SetOption"><function>SetOption</function></link>
function).
The options supported are:
</para>

<para>
<variablelist>
<varlistentry>
<term><literal>cache_debug</literal></term>
<listitem>
<para>
which corresponds to <option>--cache-debug</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>cache_disable</literal></term>
<listitem>
<para>
which corresponds to <option>--cache-disable</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>cache_force</literal></term>
<listitem>
<para>
which corresponds to <option>--cache-force</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>cache_show</literal></term>
<listitem>
<para>
which corresponds to <option>--cache-show</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>clean</literal></term>
<listitem>
<para>
which corresponds to <option>-c</option>, <option>--clean</option>
and <option>--remove</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>config</literal></term>
<listitem>
<para>
which corresponds to <option>--config</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>directory</literal></term>
<listitem>
<para>
which corresponds to <option>-C</option> and <option>--directory</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>diskcheck</literal></term>
<listitem>
<para>
which corresponds to <option>--diskcheck</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>duplicate</literal></term>
<listitem>
<para>
which corresponds to <option>--duplicate</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>file</literal></term>
<listitem>
<para>
which corresponds to <option>-f</option>, <option>--file</option>, <option>--makefile</option> and <option>--sconstruct</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>help</literal></term>
<listitem>
<para>
which corresponds to <option>-h</option> and <option>--help</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>ignore_errors</literal></term>
<listitem>
<para>
which corresponds to <option>--ignore-errors</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>implicit_cache</literal></term>
<listitem>
<para>
which corresponds to <option>--implicit-cache</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>implicit_deps_changed</literal></term>
<listitem>
<para>
which corresponds to <option>--implicit-deps-changed</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>implicit_deps_unchanged</literal></term>
<listitem>
<para>
which corresponds to <option>--implicit-deps-unchanged</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>interactive</literal></term>
<listitem>
<para>
which corresponds to <option>--interact</option> and <option>--interactive</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>keep_going</literal></term>
<listitem>
<para>
which corresponds to <option>-k</option> and <option>--keep-going</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>max_drift</literal></term>
<listitem>
<para>
which corresponds to <option>--max-drift</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>no_exec</literal></term>
<listitem>
<para>
which corresponds to <option>-n</option>,
<option>--no-exec</option>, <option>--just-print</option>,
<option>--dry-run</option> and <option>--recon</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>no_site_dir</literal></term>
<listitem>
<para>
which corresponds to <option>--no-site-dir</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>num_jobs</literal></term>
<listitem>
<para>
which corresponds to <option>-j</option> and <option>--jobs</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>profile_file</literal></term>
<listitem>
<para>
which corresponds to <option>--profile</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>question</literal></term>
<listitem>
<para>
which corresponds to <option>-q</option> and <option>--question</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>random</literal></term>
<listitem>
<para>
which corresponds to <option>--random</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>repository</literal></term>
<listitem>
<para>
which corresponds to <option>-Y</option>, <option>--repository</option> and <option>--srcdir</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>silent</literal></term>
<listitem>
<para>
which corresponds to <option>-s</option>, <option>--silent</option> and <option>--quiet</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>site_dir</literal></term>
<listitem>
<para>
which corresponds to <option>--site-dir</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>stack_size</literal></term>
<listitem>
<para>
which corresponds to <option>--stack-size</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>taskmastertrace_file</literal></term>
<listitem>
<para>
which corresponds to <option>--taskmastertrace</option>; and
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>warn</literal></term>
<listitem>
<para>
which corresponds to <option>--warn</option> and <option>--warning</option>.
</para>
</listitem>
</varlistentry>
</variablelist>
</para>

<para>
See the documentation for the
corresponding command line option for information about each specific
option.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Glob">
    <term><function>Glob</function>(<parameter>pattern, [ondisk, source, strings, exclude]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Glob</methodname>(<parameter>pattern, [ondisk, source, strings, exclude]</parameter>)</term>
    <listitem><para>
Returns Nodes (or strings) that match the specified
<varname>pattern</varname>,
relative to the directory of the current
<filename>SConscript</filename>
file.
The
<function>env.Glob</function>()
form performs string substition on
<varname>pattern</varname>
and returns whatever matches
the resulting expanded pattern.
</para>

<para>
The specified
<varname>pattern</varname>
uses Unix shell style metacharacters for matching:
</para>

<example_commands>
  *       matches everything
  ?       matches any single character
  [seq]   matches any character in seq
  [!seq]  matches any char not in seq
</example_commands>

<para>
If the first character of a filename is a dot,
it must be matched explicitly.
Character matches do
<emphasis>not</emphasis>
span directory separators.
</para>

<para>
The
<function>Glob</function>
knows about
repositories
(see the
<link linkend="f-Repository"><function>Repository</function></link>
function)
and source directories
(see the
<link linkend="f-VariantDir"><function>VariantDir</function></link>
function)
and
returns a Node (or string, if so configured)
in the local (SConscript) directory
if matching Node is found
anywhere in a corresponding
repository or source directory.
</para>

<para>
The
<varname>ondisk</varname>
argument may be set to a value which evaluates
<constant>False</constant>
to disable the search for matches on disk,
thereby only returning matches among
already-configured File or Dir Nodes.
The default behavior is to
return corresponding Nodes
for any on-disk matches found.
</para>

<para>
The
<varname>source</varname>
argument may be set to a value which evaluates
<constant>True</constant>
to specify that,
when the local directory is a
<function>VariantDir</function>,
the returned Nodes should be from the
corresponding source directory,
not the local directory.
</para>

<para>
The
<varname>strings</varname>
argument may be set to a value which evaluates
<constant>True</constant>
to have the
<function>Glob</function>
function return strings, not Nodes,
that represent the matched files or directories.
The returned strings will be relative to
the local (SConscript) directory.
(Note that This may make it easier to perform
arbitrary manipulation of file names,
but if the returned strings are
passed to a different
<filename>SConscript</filename>
file,
any Node translation will be relative
to the other
<filename>SConscript</filename>
directory,
not the original
<filename>SConscript</filename>
directory.)
</para>

<para>
The
<varname>exclude</varname>
argument may be set to a pattern or a list of patterns
(following the same Unix shell semantics)
which must be filtered out of returned elements.
Elements matching a least one pattern of
this list will be excluded.
</para>

<para>
Examples:
</para>

<example_commands>
Program("foo", Glob("*.c"))
Zip("/tmp/everything", Glob(".??*") + Glob("*"))
sources = Glob("*.cpp", exclude=["os_*_specific_*.cpp"]) + \
          Glob( "os_%s_specific_*.cpp" % currentOS)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Help">
    <term><function>Help</function>(<parameter>text, append=False</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Help</methodname>(<parameter>text, append=False</parameter>)</term>
    <listitem><para>
This specifies help text to be printed if the
<option>-h</option>
argument is given to
<command>scons</command>.
If
<function>Help</function>
is called multiple times, the text is appended together in the order that
<function>Help</function>
is called. With append set to False, any
<function>Help</function>
text generated with
<function>AddOption</function>
is clobbered. If append is True, the AddOption help is prepended to the help
string, thus preserving the
<option>-h</option>
message.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Ignore">
    <term><function>Ignore</function>(<parameter>target, dependency</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Ignore</methodname>(<parameter>target, dependency</parameter>)</term>
    <listitem><para>
The specified dependency file(s)
will be ignored when deciding if
the target file(s) need to be rebuilt.
</para>

<para>
You can also use
<function>Ignore</function>
to remove a target from the default build.
In order to do this you must specify the directory the target will
be built in as the target, and the file you want to skip building
as the dependency.
</para>

<para>
Note that this will only remove the dependencies listed from
the files built by default.  It will still be built if that
dependency is needed by another object being built.
See the third and forth examples below.
</para>

<para>
Examples:
</para>

<example_commands>
env.Ignore('foo', 'foo.c')
env.Ignore('bar', ['bar1.h', 'bar2.h'])
env.Ignore('.','foobar.obj')
env.Ignore('bar','bar/foobar.obj')
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Import">
    <term><function>Import</function>(<parameter>vars...</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Import</methodname>(<parameter>vars...</parameter>)</term>
    <listitem><para>
Imports variables into the current SConscript file.
<parameter>vars</parameter>
must be strings representing names of variables
which have been previously exported either by the
<link linkend="f-Export"><function>Export</function></link> function or by the
<varname>exports</varname> argument to
<link linkend="f-SConscript"><function>SConscript</function></link>.
Variables exported by
<function>SConscript</function>
take precedence.
Multiple variable names can be passed to
<function>Import</function>
as separate arguments or as words in a space-separated string.
The wildcard <literal>"*"</literal> can be used to import all
available variables.
</para>

<para>
Examples:
</para>

<example_commands>
Import("env")
Import("env", "variable")
Import(["env", "variable"])
Import("*")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Literal">
    <term><function>Literal</function>(<parameter>string</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Literal</methodname>(<parameter>string</parameter>)</term>
    <listitem><para>
The specified
<varname>string</varname>
will be preserved as-is
and not have construction variables expanded.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Local">
    <term><function>Local</function>(<parameter>targets</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Local</methodname>(<parameter>targets</parameter>)</term>
    <listitem><para>
The specified
<varname>targets</varname>
will have copies made in the local tree,
even if an already up-to-date copy
exists in a repository.
Returns a list of the target Node or Nodes.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-MergeFlags">
    <term><replaceable>env</replaceable>.<methodname>MergeFlags</methodname>(<parameter>arg, [unique]</parameter>)</term>
    <listitem><para>
Merges the specified
<varname>arg</varname>
values to the construction environment's construction variables.
If the
<varname>arg</varname>
argument is not a dictionary,
it is converted to one by calling
<link linkend="f-ParseFlags"><function>env.ParseFlags</function></link>
on the argument
before the values are merged.
Note that
<varname>arg</varname>
must be a single value,
so multiple strings must
be passed in as a list,
not as separate arguments to
<function>env.MergeFlags</function>.
</para>

<para>
By default,
duplicate values are eliminated;
you can, however, specify
<literal>unique=0</literal>
to allow duplicate
values to be added.
When eliminating duplicate values,
any construction variables that end with
the string
<literal>PATH</literal>
keep the left-most unique value.
All other construction variables keep
the right-most unique value.
</para>

<para>
Examples:
</para>

<example_commands>
# Add an optimization flag to $CCFLAGS.
env.MergeFlags('-O3')

# Combine the flags returned from running pkg-config with an optimization
# flag and merge the result into the construction variables.
env.MergeFlags(['!pkg-config gtk+-2.0 --cflags', '-O3'])

# Combine an optimization flag with the flags returned from running pkg-config
# twice and merge the result into the construction variables.
env.MergeFlags(['-O3',
               '!pkg-config gtk+-2.0 --cflags --libs',
               '!pkg-config libpng12 --cflags --libs'])
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-NoCache">
    <term><function>NoCache</function>(<parameter>target, ...</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>NoCache</methodname>(<parameter>target, ...</parameter>)</term>
    <listitem><para>
Specifies a list of files which should
<emphasis>not</emphasis>
be cached whenever the
<link linkend="f-CacheDir"><function>CacheDir</function></link>
method has been activated.
The specified targets may be a list
or an individual target.
</para>

<para>
Multiple files should be specified
either as separate arguments to the
<function>NoCache</function>
method, or as a list.
<function>NoCache</function>
will also accept the return value of any of the construction environment
Builder methods.
</para>

<para>
Calling
<function>NoCache</function>
on directories and other non-File Node types has no effect because
only File Nodes are cached.
</para>

<para>
Examples:
</para>

<example_commands>
NoCache('foo.elf')
NoCache(env.Program('hello', 'hello.c'))
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-NoClean">
    <term><function>NoClean</function>(<parameter>target, ...</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>NoClean</methodname>(<parameter>target, ...</parameter>)</term>
    <listitem><para>
Specifies a list of files or directories which should
<emphasis>not</emphasis>
be removed whenever the targets (or their dependencies)
are specified with the
<option>-c</option>
command line option.
The specified targets may be a list
or an individual target.
Multiple calls to
<function>NoClean</function>
are legal,
and prevent each specified target
from being removed by calls to the
<option>-c</option>
option.
</para>

<para>
Multiple files or directories should be specified
either as separate arguments to the
<function>NoClean</function>
method, or as a list.
<function>NoClean</function>
will also accept the return value of any of the construction environment
Builder methods.
</para>

<para>
Calling
<function>NoClean</function>
for a target overrides calling
<link linkend="f-Clean"><function>Clean</function></link>
for the same target,
and any targets passed to both functions will
<emphasis>not</emphasis>
be removed by the
<option>-c</option>
option.
</para>

<para>
Examples:
</para>

<example_commands>
NoClean('foo.elf')
NoClean(env.Program('hello', 'hello.c'))
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-ParseConfig">
    <term><replaceable>env</replaceable>.<methodname>ParseConfig</methodname>(<parameter>command, [function, unique]</parameter>)</term>
    <listitem><para>
Calls the specified
<varname>function</varname>
to modify the environment as specified by the output of
<varname>command</varname>.
The default
<varname>function</varname>
is
<link linkend="f-MergeFlags"><function>env.MergeFlags</function></link>,
which expects the output of a typical
<application>*-config</application>
command
(for example,
<application>gtk-config</application>)
and adds the options
to the appropriate construction variables.
By default,
duplicate values are not
added to any construction variables;
you can specify
<literal>unique=0</literal>
to allow duplicate
values to be added.
</para>

<para>
Interpreted options
and the construction variables they affect
are as specified for the
<link linkend="f-ParseFlags"><function>env.ParseFlags</function></link>
method (which this method calls).
See that method's description
for a table of options and construction variables.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-ParseDepends">
    <term><function>ParseDepends</function>(<parameter>filename, [must_exist, only_one]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>ParseDepends</methodname>(<parameter>filename, [must_exist, only_one]</parameter>)</term>
    <listitem><para>
Parses the contents of the specified
<varname>filename</varname>
as a list of dependencies in the style of
<application>Make</application>
or
<application>mkdep</application>,
and explicitly establishes all of the listed dependencies.
</para>

<para>
By default,
it is not an error
if the specified
<varname>filename</varname>
does not exist.
The optional
<varname>must_exist</varname>
argument may be set to a non-zero
value to have
scons
throw an exception and
generate an error if the file does not exist,
or is otherwise inaccessible.
</para>

<para>
The optional
<varname>only_one</varname>
argument may be set to a non-zero
value to have
scons
thrown an exception and
generate an error
if the file contains dependency
information for more than one target.
This can provide a small sanity check
for files intended to be generated
by, for example, the
<literal>gcc -M</literal>
flag,
which should typically only
write dependency information for
one output file into a corresponding
<filename>.d</filename>
file.
</para>

<para>
The
<varname>filename</varname>
and all of the files listed therein
will be interpreted relative to
the directory of the
<filename>SConscript</filename>
file which calls the
<function>ParseDepends</function>
function.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-ParseFlags">
    <term><replaceable>env</replaceable>.<methodname>ParseFlags</methodname>(<parameter>flags, ...</parameter>)</term>
    <listitem><para>
Parses one or more strings containing
typical command-line flags for GCC tool chains
and returns a dictionary with the flag values
separated into the appropriate SCons construction variables.
This is intended as a companion to the
<link linkend="f-MergeFlags"><function>env.MergeFlags</function></link>
method, but allows for the values in the returned dictionary
to be modified, if necessary,
before merging them into the construction environment.
(Note that
<function>env.MergeFlags</function>
will call this method if its argument is not a dictionary,
so it is usually not necessary to call
<link linkend="f-ParseFlags"><function>env.ParseFlags</function></link>
directly unless you want to manipulate the values.)
</para>

<para>
If the first character in any string is
an exclamation mark (!),
the rest of the string is executed as a command,
and the output from the command is
parsed as GCC tool chain command-line flags
and added to the resulting dictionary.
</para>

<para>
Flag values are translated accordig to the prefix found,
and added to the following construction variables:
</para>

<example_commands>
-arch                   CCFLAGS, LINKFLAGS
-D                      CPPDEFINES
-framework              FRAMEWORKS
-frameworkdir=          FRAMEWORKPATH
-fmerge-all-constants   CCFLAGS, LINKFLAGS
-fopenmp                CCFLAGS, LINKFLAGS
-include                CCFLAGS
-imacros                CCFLAGS
-isysroot               CCFLAGS, LINKFLAGS
-isystem                CCFLAGS
-iquote                 CCFLAGS
-idirafter              CCFLAGS
-I                      CPPPATH
-l                      LIBS
-L                      LIBPATH
-mno-cygwin             CCFLAGS, LINKFLAGS
-mwindows               LINKFLAGS
-openmp                 CCFLAGS, LINKFLAGS
-pthread                CCFLAGS, LINKFLAGS
-std=                   CFLAGS
-Wa,                    ASFLAGS, CCFLAGS
-Wl,-rpath=             RPATH
-Wl,-R,                 RPATH
-Wl,-R                  RPATH
-Wl,                    LINKFLAGS
-Wp,                    CPPFLAGS
-                       CCFLAGS
+                       CCFLAGS, LINKFLAGS
</example_commands>

<para>
Any other strings not associated with options
are assumed to be the names of libraries
and added to the
<envar>$LIBS</envar>
construction variable.
</para>

<para>
Examples (all of which produce the same result):
</para>

<example_commands>
dict = env.ParseFlags('-O2 -Dfoo -Dbar=1')
dict = env.ParseFlags('-O2', '-Dfoo', '-Dbar=1')
dict = env.ParseFlags(['-O2', '-Dfoo -Dbar=1'])
dict = env.ParseFlags('-O2', '!echo -Dfoo -Dbar=1')
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Platform">
    <term><function>Platform</function>(<parameter>string</parameter>)</term>
    <listitem><para>
The
<function>Platform</function>
form returns a callable object
that can be used to initialize
a construction environment using the
platform keyword of the
<function>Environment</function>
function.
</para>

<para>
Example:
</para>

<example_commands>
env = Environment(platform = Platform('win32'))
</example_commands>

<para>
The
<function>env.Platform</function>
form applies the callable object for the specified platform
<varname>string</varname>
to the environment through which the method was called.
</para>

<example_commands>
env.Platform('posix')
</example_commands>

<para>
Note that the
<literal>win32</literal>
platform adds the
<literal>SystemDrive</literal>
and
<literal>SystemRoot</literal>
variables from the user's external environment
to the construction environment's
<link linkend="cv-ENV"><envar>$ENV</envar></link>
dictionary.
This is so that any executed commands
that use sockets to connect with other systems
(such as fetching source files from
external CVS repository specifications like
<literal>:pserver:anonymous@cvs.sourceforge.net:/cvsroot/scons</literal>)
will work on Windows systems.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Precious">
    <term><function>Precious</function>(<parameter>target, ...</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Precious</methodname>(<parameter>target, ...</parameter>)</term>
    <listitem><para>
Marks each given
<varname>target</varname>
as precious so it is not deleted before it is rebuilt. Normally
<command>scons</command>
deletes a target before building it.
Multiple targets can be passed in to a single call to
<function>Precious</function>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Prepend">
    <term><replaceable>env</replaceable>.<methodname>Prepend</methodname>(<parameter>key=val, [...]</parameter>)</term>
    <listitem><para>
Appends the specified keyword arguments
to the beginning of construction variables in the environment.
If the Environment does not have
the specified construction variable,
it is simply added to the environment.
If the values of the construction variable
and the keyword argument are the same type,
then the two values will be simply added together.
Otherwise, the construction variable
and the value of the keyword argument
are both coerced to lists,
and the lists are added together.
(See also the Append method, above.)
</para>

<para>
Example:
</para>

<example_commands>
env.Prepend(CCFLAGS = '-g ', FOO = ['foo.yyy'])
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-PrependENVPath">
    <term><replaceable>env</replaceable>.<methodname>PrependENVPath</methodname>(<parameter>name, newpath, [envname, sep, delete_existing]</parameter>)</term>
    <listitem><para>
This appends new path elements to the given path in the
specified external environment
(<envar>$ENV</envar>
by default).
This will only add
any particular path once (leaving the first one it encounters and
ignoring the rest, to preserve path order),
and to help assure this,
will normalize all paths (using
<literal>os.path.normpath</literal>
and
<literal>os.path.normcase</literal>).
This can also handle the
case where the given old path variable is a list instead of a
string, in which case a list will be returned instead of a string.
</para>

<para>
If
<varname>delete_existing</varname>
is 0, then adding a path that already exists
will not move it to the beginning;
it will stay where it is in the list.
</para>

<para>
Example:
</para>

<example_commands>
print 'before:',env['ENV']['INCLUDE']
include_path = '/foo/bar:/foo'
env.PrependENVPath('INCLUDE', include_path)
print 'after:',env['ENV']['INCLUDE']
</example_commands>

<para>
The above example will print:
</para>

<example_commands>
before: /biz:/foo
after: /foo/bar:/foo:/biz
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-PrependUnique">
    <term><replaceable>env</replaceable>.<methodname>PrependUnique</methodname>(<parameter>key=val, delete_existing=0, [...]</parameter>)</term>
    <listitem><para>
Appends the specified keyword arguments
to the beginning of construction variables in the environment.
If the Environment does not have
the specified construction variable,
it is simply added to the environment.
If the construction variable being appended to is a list,
then any value(s) that already exist in the
construction variable will
<emphasis>not</emphasis>
be added again to the list.
However, if delete_existing is 1,
existing matching values are removed first, so
existing values in the arg list move to the front of the list.
</para>

<para>
Example:
</para>

<example_commands>
env.PrependUnique(CCFLAGS = '-g', FOO = ['foo.yyy'])
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Progress">
    <term><function>Progress</function>(<parameter>callable, [interval]</parameter>)</term>
    <term><function>Progress</function>(<parameter>string, [interval, file, overwrite]</parameter>)</term>
    <term><function>Progress</function>(<parameter>list_of_strings, [interval, file, overwrite]</parameter>)</term>
    <listitem><para>
Allows SCons to show progress made during the build
by displaying a string or calling a function while
evaluating Nodes (e.g. files).
</para>

<para>
If the first specified argument is a Python callable
(a function or an object that has a
<function>__call__</function>()
method),
the function will be called
once every
<varname>interval</varname>
times a Node is evaluated.
The callable will be passed the evaluated Node
as its only argument.
(For future compatibility,
it's a good idea to also add
<literal>*args</literal>
and
<literal>**kw</literal>
as arguments to your function or method.
This will prevent the code from breaking
if SCons ever changes the interface
to call the function with additional arguments in the future.)
</para>

<para>
An example of a simple custom progress function
that prints a string containing the Node name
every 10 Nodes:
</para>

<example_commands>
def my_progress_function(node, *args, **kw):
    print('Evaluating node %s!' % node)
Progress(my_progress_function, interval=10)
</example_commands>

<para>
A more complicated example of a custom progress display object
that prints a string containing a count
every 100 evaluated Nodes.
Note the use of
<literal>\r</literal>
(a carriage return)
at the end so that the string
will overwrite itself on a display:
</para>

<example_commands>
import sys

class ProgressCounter:
    count = 0
    def __call__(self, node, *args, **kw):
        self.count += 100
        sys.stderr.write('Evaluated %s nodes\r' % self.count)

Progress(ProgressCounter(), interval=100)
</example_commands>

<para>
If the first argument
<link linkend="f-Progress"><function>Progress</function></link>
is a string,
the string will be displayed
every
<varname>interval</varname>
evaluated Nodes.
The default is to print the string on standard output;
an alternate output stream
may be specified with the
<literal>file=</literal>
argument.
The following will print a series of dots
on the error output,
one dot for every 100 evaluated Nodes:
</para>

<example_commands>
import sys
Progress('.', interval=100, file=sys.stderr)
</example_commands>

<para>
If the string contains the verbatim substring
<envar>$TARGET</envar>,
it will be replaced with the Node.
Note that, for performance reasons, this is
<emphasis>not</emphasis>
a regular SCons variable substition,
so you can not use other variables
or use curly braces.
The following example will print the name of
every evaluated Node,
using a
<literal>\r</literal>
(carriage return) to cause each line to overwritten by the next line,
and the
<literal>overwrite=</literal>
keyword argument to make sure the previously-printed
file name is overwritten with blank spaces:
</para>

<example_commands>
import sys
Progress('$TARGET\r', overwrite=True)
</example_commands>

<para>
If the first argument to
<function>Progress</function>
is a list of strings,
then each string in the list will be displayed
in rotating fashion every
<varname>interval</varname>
evaluated Nodes.
This can be used to implement a "spinner"
on the user's screen as follows:
</para>

<example_commands>
Progress(['-\r', '\\\r', '|\r', '/\r'], interval=5)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Pseudo">
    <term><function>Pseudo</function>(<parameter>target, ...</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Pseudo</methodname>(<parameter>target, ...</parameter>)</term>
    <listitem><para>
This indicates that each given
<varname>target</varname>
should not be created by the build rule, and if the target is created,
an error will be generated. This is similar to the gnu make .PHONY
target. However, in the vast majority of cases, an
<function>Alias</function>
is more appropriate.

Multiple targets can be passed in to a single call to
<function>Pseudo</function>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-PyPackageDir">
    <term><function>PyPackageDir</function>(<parameter>modulename</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>PyPackageDir</methodname>(<parameter>modulename</parameter>)</term>
    <listitem><para>
This returns a Directory Node similar to Dir.
The python module / package is looked up and if located
the directory is returned for the location.
<varname>modulename</varname>
Is a named python package / module to
lookup the directory for it's location.
</para>
<para>
If
<varname>modulename</varname>
is a list, SCons returns a list of Dir nodes.
Construction variables are expanded in
<varname>modulename</varname>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Replace">
    <term><replaceable>env</replaceable>.<methodname>Replace</methodname>(<parameter>key=val, [...]</parameter>)</term>
    <listitem><para>
Replaces construction variables in the Environment
with the specified keyword arguments.
</para>

<para>
Example:
</para>

<example_commands>
env.Replace(CCFLAGS = '-g', FOO = 'foo.xxx')
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Repository">
    <term><function>Repository</function>(<parameter>directory</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Repository</methodname>(<parameter>directory</parameter>)</term>
    <listitem><para>
Specifies that
<varname>directory</varname>
is a repository to be searched for files.
Multiple calls to
<function>Repository</function>
are legal,
and each one adds to the list of
repositories that will be searched.
</para>

<para>
To
<command>scons</command>,
a repository is a copy of the source tree,
from the top-level directory on down,
which may contain
both source files and derived files
that can be used to build targets in
the local source tree.
The canonical example would be an
official source tree maintained by an integrator.
If the repository contains derived files,
then the derived files should have been built using
<command>scons</command>,
so that the repository contains the necessary
signature information to allow
<command>scons</command>
to figure out when it is appropriate to
use the repository copy of a derived file,
instead of building one locally.
</para>

<para>
Note that if an up-to-date derived file
already exists in a repository,
<command>scons</command>
will
<emphasis>not</emphasis>
make a copy in the local directory tree.
In order to guarantee that a local copy
will be made,
use the
<link linkend="f-Local"><function>Local</function></link>
method.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Requires">
    <term><function>Requires</function>(<parameter>target, prerequisite</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Requires</methodname>(<parameter>target, prerequisite</parameter>)</term>
    <listitem><para>
Specifies an order-only relationship
between the specified target file(s)
and the specified prerequisite file(s).
The prerequisite file(s)
will be (re)built, if necessary,
<emphasis>before</emphasis>
the target file(s),
but the target file(s) do not actually
depend on the prerequisites
and will not be rebuilt simply because
the prerequisite file(s) change.
</para>

<para>
Example:
</para>

<example_commands>
env.Requires('foo', 'file-that-must-be-built-before-foo')
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Return">
    <term><function>Return</function>(<parameter>[vars..., stop=True]</parameter>)</term>
    <listitem><para>
Return to the calling SConscript, optionally
returning the values of variables named in
<varname>vars</varname>.
Multiple strings contaning variable names may be passed to
<function>Return</function>. A string containing white space
is split into individual variable names.
Returns the value if one variable is specified,
else returns a tuple of values.
Returns an empty tuple if <parameter>vars</parameter>
is omitted.
</para>

<para>
By default <function>Return</function> stops processing the current SConscript
and returns immediately.
The optional
<literal>stop</literal>
keyword argument
may be set to a false value
to continue processing the rest of the SConscript
file after the
<function>Return</function>
call (this was the default behavior prior to SCons 0.98.)
However, the values returned
are still the values of the variables in the named
<varname>vars</varname>
at the point
<function>Return</function>
was called.
</para>

<para>
Examples:
</para>

<example_commands>
# Returns no values (evaluates False)
Return()

# Returns the value of the 'foo' Python variable.
Return("foo")

# Returns the values of the Python variables 'foo' and 'bar'.
Return("foo", "bar")

# Returns the values of Python variables 'val1' and 'val2'.
Return('val1 val2')
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Scanner">
    <term><function>Scanner</function>(<parameter>function, [argument, keys, path_function, node_class, node_factory, scan_check, recursive]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Scanner</methodname>(<parameter>function, [argument, keys, path_function, node_class, node_factory, scan_check, recursive]</parameter>)</term>
    <listitem><para>
Creates a Scanner object for
the specified
<varname>function</varname>.
See manpage section "Scanner Objects"
for a complete explanation of the arguments and behavior.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-SConscript">
    <term><function>SConscript</function>(<parameter>scripts, [exports, variant_dir, duplicate, must_exist]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>SConscript</methodname>(<parameter>scripts, [exports, variant_dir, duplicate, must_exist]</parameter>)</term>
    <term><function>SConscript</function>(<parameter>dirs=subdirs, [name=script, exports, variant_dir, duplicate, must_exist]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>SConscript</methodname>(<parameter>dirs=subdirs, [name=script, exports, variant_dir, duplicate, must_exist]</parameter>)</term>
    <listitem><para>
Execute one or more subsidiary SConscript (configuration) files.
There are two ways to call the
<function>SConscript</function> function.
</para>

<para>
The first calling style
is to explicitly specify one or more
<varname>scripts</varname>
as the first argument.
A single script may be specified as a string;
multiple scripts must be specified as a list
(either explicitly or as created by
a function like
<link linkend="f-Split"><function>Split</function></link>).
Examples:
</para>
<example_commands>
SConscript('SConscript')      # run SConscript in the current directory
SConscript('src/SConscript')  # run SConscript in the src directory
SConscript(['src/SConscript', 'doc/SConscript'])
config = SConscript('MyConfig.py')
</example_commands>

<para>
The second way to call
<function>SConscript</function>
is to specify a list of (sub)directory names
as a
<varname>dirs</varname>=<replaceable>subdirs</replaceable>
keyword argument.
In this case,
<command>scons</command>
will
execute a subsidiary configuration file named
<filename>SConscript</filename>
in each of the specified directories.
You may specify a name other than
<filename>SConscript</filename>
by supplying an optional
<varname>name</varname>=<replaceable>script</replaceable>
keyword argument.
The first three examples below have the same effect
as the first three examples above:
</para>
<example_commands>
SConscript(dirs='.')      # run SConscript in the current directory
SConscript(dirs='src')    # run SConscript in the src directory
SConscript(dirs=['src', 'doc'])
SConscript(dirs=['sub1', 'sub2'], name='MySConscript')
</example_commands>

<para>
The optional
<varname>exports</varname>
argument provides a string or list of strings representing
variable names, or a dictionary of named values, to export.
These variables are locally exported only to the called
SConscript file(s)
and do not affect the global pool of variables managed by the
<link linkend="f-Export"><function>Export</function></link>
function.
<!-- If multiple dirs are provided, each script gets a fresh export. -->
The subsidiary SConscript files
must use the
<link linkend="f-Import"><function>Import</function></link>
function to import the variables.
Examples:
</para>
<example_commands>
foo = SConscript('sub/SConscript', exports='env')
SConscript('dir/SConscript', exports=['env', 'variable'])
SConscript(dirs='subdir', exports='env variable')
SConscript(dirs=['one', 'two', 'three'], exports='shared_info')
</example_commands>

<para>
If the optional
<varname>variant_dir</varname>
argument is present, it causes an effect equivalent to the
<link linkend="f-VariantDir"><function>VariantDir</function></link> function.
The <varname>variant_dir</varname>
argument is interpreted relative to the directory of the calling
SConscript file.
The optional
<varname>duplicate</varname> argument is
interpreted as for <link linkend="f-VariantDir"><function>VariantDir</function></link>.
If <varname>variant_dir</varname>
is omitted, the <varname>duplicate</varname> argument is ignored.
See the description of
<link linkend="f-VariantDir"><function>VariantDir</function></link>
below for additional details and restrictions.
</para>

<para>
If
<varname>variant_dir</varname>
is present,
the source directory is the directory in which the
SConscript
file resides and the
SConscript
file is evaluated as if it were in the
<varname>variant_dir</varname>
directory:
</para>
<example_commands>
SConscript('src/SConscript', variant_dir='build')
</example_commands>

<para>
is equivalent to
</para>

<example_commands>
VariantDir('build', 'src')
SConscript('build/SConscript')
</example_commands>

<para>
This later paradigm is often used when the sources are
in the same directory as the
<filename>SConstruct</filename>:
</para>

<example_commands>
SConscript('SConscript', variant_dir='build')
</example_commands>

<para>
is equivalent to
</para>

<example_commands>
VariantDir('build', '.')
SConscript('build/SConscript')
</example_commands>

<para>
<!--
If
<varname>variant_dir</varname>
and"
<varname>src_dir</varname>
are both present,
xxxxx everything is in a state of confusion.
</para>
<example_commands>
SConscript(dirs = 'src', variant_dir = 'build', src_dir = '.')
runs src/SConscript in build/src, but
SConscript(dirs = 'lib', variant_dir = 'build', src_dir = 'src')
runs lib/SConscript (in lib!).  However,
SConscript(dirs = 'src', variant_dir = 'build', src_dir = 'src')
runs src/SConscript in build.  Moreover,
SConscript(dirs = 'src/lib', variant_dir = 'build', src_dir = 'src')
runs src/lib/SConscript in build/lib.  Moreover,
SConscript(dirs = 'build/src/lib', variant_dir = 'build', src_dir = 'src')
can't find build/src/lib/SConscript, even though it ought to exist.
</example_commands>
<para>
is equivalent to
</para>
<example_commands>
????????????????
</example_commands>
<para>
and what about this alternative?
TODO??? SConscript('build/SConscript', src_dir='src')
-->
</para>

<para>
If the optional
<varname>must_exist</varname>
is <constant>True</constant>,
causes an exception to be raised if a requested
SConscript file is not found. The current default is
<constant>False</constant>,
causing only a warning to be emitted, but this default is deprecated
(<emphasis>since 3.1</emphasis>).
For scripts which truly intend to be optional, transition to
explicitly supplying
<literal>must_exist=False</literal> to the <function>SConscript</function> call.
</para>

<para>
Here are some composite examples:
</para>

<example_commands>
# collect the configuration information and use it to build src and doc
shared_info = SConscript('MyConfig.py')
SConscript('src/SConscript', exports='shared_info')
SConscript('doc/SConscript', exports='shared_info')
</example_commands>

<example_commands>
# build debugging and production versions.  SConscript
# can use Dir('.').path to determine variant.
SConscript('SConscript', variant_dir='debug', duplicate=0)
SConscript('SConscript', variant_dir='prod', duplicate=0)
</example_commands>

<example_commands>
# build debugging and production versions.  SConscript
# is passed flags to use.
opts = { 'CPPDEFINES' : ['DEBUG'], 'CCFLAGS' : '-pgdb' }
SConscript('SConscript', variant_dir='debug', duplicate=0, exports=opts)
opts = { 'CPPDEFINES' : ['NODEBUG'], 'CCFLAGS' : '-O' }
SConscript('SConscript', variant_dir='prod', duplicate=0, exports=opts)
</example_commands>

<example_commands>
# build common documentation and compile for different architectures
SConscript('doc/SConscript', variant_dir='build/doc', duplicate=0)
SConscript('src/SConscript', variant_dir='build/x86', duplicate=0)
SConscript('src/SConscript', variant_dir='build/ppc', duplicate=0)
</example_commands>

<para>
<function>SConscript</function> returns the values of any variables
named by the executed SConscript(s) in arguments
to the <link linkend="f-Return"><function>Return</function></link> function (see above for details).
If a single <function>SConscript</function> call causes multiple scripts to
be executed, the return value is a tuple containing
the returns of all of the scripts. If an executed
script does not explicitly call <function>Return</function>, it returns
<constant>None</constant>.
</para>

</listitem>
  </varlistentry>
  <varlistentry id="f-SConscriptChdir">
    <term><function>SConscriptChdir</function>(<parameter>value</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>SConscriptChdir</methodname>(<parameter>value</parameter>)</term>
    <listitem><para>
By default,
<command>scons</command>
changes its working directory
to the directory in which each
subsidiary SConscript file lives.
This behavior may be disabled
by specifying either:
</para>

<example_commands>
SConscriptChdir(0)
env.SConscriptChdir(0)
</example_commands>

<para>
in which case
<command>scons</command>
will stay in the top-level directory
while reading all SConscript files.
(This may be necessary when building from repositories,
when all the directories in which SConscript files may be found
don't necessarily exist locally.)
You may enable and disable
this ability by calling
SConscriptChdir()
multiple times.
</para>

<para>
Example:
</para>

<example_commands>
env = Environment()
SConscriptChdir(0)
SConscript('foo/SConscript')	# will not chdir to foo
env.SConscriptChdir(1)
SConscript('bar/SConscript')	# will chdir to bar
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-SConsignFile">
    <term><function>SConsignFile</function>(<parameter>[file, dbm_module]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>SConsignFile</methodname>(<parameter>[file, dbm_module]</parameter>)</term>
    <listitem><para>
This tells
<command>scons</command>
to store all file signatures
in the specified database
<varname>file</varname>.
If the
<varname>file</varname>
name is omitted,
<filename>.sconsign</filename>
is used by default.
(The actual file name(s) stored on disk
may have an appropriated suffix appended
by the
<varname> dbm_module</varname>.)
If
<varname>file</varname>
is not an absolute path name,
the file is placed in the same directory as the top-level
<filename>SConstruct</filename>
file.
</para>

<para>
If
<varname>file</varname>
is
<literal>None</literal>,
then
<command>scons</command>
will store file signatures
in a separate
<filename>.sconsign</filename>
file in each directory,
not in one global database file.
(This was the default behavior
prior to SCons 0.96.91 and 0.97.)
</para>

<para>
The optional
<varname>dbm_module</varname>
argument can be used to specify
which Python database module
The default is to use a custom
<filename>SCons.dblite</filename>
module that uses pickled
Python data structures,
and which works on all Python versions.
</para>

<para>
Examples:
</para>

<example_commands>
# Explicitly stores signatures in ".sconsign.dblite"
# in the top-level SConstruct directory (the
# default behavior).
SConsignFile()

# Stores signatures in the file "etc/scons-signatures"
# relative to the top-level SConstruct directory.
SConsignFile("etc/scons-signatures")

# Stores signatures in the specified absolute file name.
SConsignFile("/home/me/SCons/signatures")

# Stores signatures in a separate .sconsign file
# in each directory.
SConsignFile(None)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-SetDefault">
    <term><replaceable>env</replaceable>.<methodname>SetDefault</methodname>(<parameter>key=val, [...]</parameter>)</term>
    <listitem><para>
Sets construction variables to default values specified with the keyword
arguments if (and only if) the variables are not already set.
The following statements are equivalent:
</para>

<example_commands>
env.SetDefault(FOO = 'foo')

if 'FOO' not in env: env['FOO'] = 'foo'
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-SetOption">
    <term><function>SetOption</function>(<parameter>name, value</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>SetOption</methodname>(<parameter>name, value</parameter>)</term>
    <listitem><para>
This function provides a way to set a select subset of the scons command
line options from a SConscript file. The options supported are:
</para>

<para>
<variablelist>
<varlistentry>
<term><literal>clean</literal></term>
<listitem>
<para>
which corresponds to <option>-c</option>, <option>--clean</option>
and <option>--remove</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>duplicate</literal></term>
<listitem>
<para>
which corresponds to <option>--duplicate</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>help</literal></term>
<listitem>
<para>
which corresponds to <option>-h</option> and <option>--help</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>implicit_cache</literal></term>
<listitem>
<para>
which corresponds to <option>--implicit-cache</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>max_drift</literal></term>
<listitem>
<para>
which corresponds to <option>--max-drift</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>no_exec</literal></term>
<listitem>
<para>
which corresponds to <option>-n</option>, <option>--no-exec</option>,
<option>--just-print</option>, <option>--dry-run</option>
and <option>--recon</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>num_jobs</literal></term>
<listitem>
<para>
which corresponds to <option>-j</option> and <option>--jobs</option>;
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>random</literal></term>
<listitem>
<para>
which corresponds to <option>--random</option>; and
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>silent</literal></term>
<listitem>
<para>
which corresponds to <option>--silent</option>.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>no_progress</literal></term>
<listitem>
<para>
which corresponds to -Q.
</para>
<para>
    Note: The initial progress output will still be output as this is done before the SConstruct/SConscript which contains the SetOption is processed
    <literal>scons: Reading SConscript files ...</literal>
</para>
<para><emphasis>Available since <command>scons</command> 4.0.</emphasis></para>
</listitem>
</varlistentry>
<varlistentry>
<term><literal>stack_size</literal></term>
<listitem>
<para>
which corresponds to --stack-size.
</para>
</listitem>
</varlistentry>
</variablelist>
</para>

<para>
See the documentation for the
corresponding command line option for information about each specific
option.
</para>

<para>
Example:
</para>

<example_commands>
SetOption('max_drift', 1)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-SideEffect">
    <term><function>SideEffect</function>(<parameter>side_effect, target</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>SideEffect</methodname>(<parameter>side_effect, target</parameter>)</term>
    <listitem><para>
Declares
<varname>side_effect</varname>
as a side effect of building
<varname>target</varname>.
Both
<varname>side_effect</varname>
and
<varname>target</varname>
can be a list, a file name, or a node.
A side effect is a target file that is created or updated
as a side effect of building other targets.
For example, a Windows PDB
file is created as a side effect of building the .obj
files for a static library,
and various log files are created updated
as side effects of various TeX commands.
If a target is a side effect of multiple build commands,
<command>scons</command>
will ensure that only one set of commands
is executed at a time.
Consequently, you only need to use this method
for side-effect targets that are built as a result of
multiple build commands.
</para>

<para>
Because multiple build commands may update
the same side effect file,
by default the
<varname>side_effect</varname>
target is
<emphasis>not</emphasis>
automatically removed
when the
<varname>target</varname>
is removed by the
<option>-c</option>
option.
(Note, however, that the
<varname>side_effect</varname>
might be removed as part of
cleaning the directory in which it lives.)
If you want to make sure the
<varname>side_effect</varname>
is cleaned whenever a specific
<varname>target</varname>
is cleaned,
you must specify this explicitly
with the
<link linkend="f-Clean"><function>Clean</function></link>
or
<function>env.Clean</function>
function.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="f-Split">
    <term><function>Split</function>(<parameter>arg</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Split</methodname>(<parameter>arg</parameter>)</term>
    <listitem><para>
Returns a list of file names or other objects.
If <varname>arg</varname> is a string,
it will be split on strings of white-space characters
within the string,
making it easier to write long lists of file names.
If <varname>arg</varname> is already a list,
the list will be returned untouched.
If <varname>arg</varname> is any other type of object,
it will be returned as a list
containing just the object.
</para>

<para>
Example:
</para>

<example_commands>
files = Split("f1.c f2.c f3.c")
files = env.Split("f4.c f5.c f6.c")
files = Split("""
       f7.c
       f8.c
       f9.c
""")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-subst">
    <term><replaceable>env</replaceable>.<methodname>subst</methodname>(<parameter>input, [raw, target, source, conv]</parameter>)</term>
    <listitem><para>
Performs construction variable interpolation
on the specified string or sequence argument
<varname>input</varname>.
</para>

<para>
By default,
leading or trailing white space will
be removed from the result.
and all sequences of white space
will be compressed to a single space character.
Additionally, any
<literal>$(</literal>
and
<literal>$)</literal>
character sequences will be stripped from the returned string,
The optional
<varname>raw</varname>
argument may be set to
<literal>1</literal>
if you want to preserve white space and
<literal>$(</literal>-<literal>$)</literal>
sequences.
The
<varname>raw</varname>
argument may be set to
<literal>2</literal>
if you want to strip
all characters between
any
<literal>$(</literal>
and
<literal>$)</literal>
pairs
(as is done for signature calculation).
</para>

<para>
If the input is a sequence
(list or tuple),
the individual elements of
the sequence will be expanded,
and the results will be returned as a list.
</para>

<para>
The optional
<varname>target</varname>
and
<varname>source</varname>
keyword arguments
must be set to lists of
target and source nodes, respectively,
if you want the
<envar>$TARGET</envar>,
<envar>$TARGETS</envar>,
<envar>$SOURCE</envar>
and
<envar>$SOURCES</envar>
to be available for expansion.
This is usually necessary if you are
calling
<function>env.subst</function>
from within a Python function used
as an SCons action.
</para>

<para>
Returned string values or sequence elements
are converted to their string representation by default.
The optional
<varname>conv</varname>
argument
may specify a conversion function
that will be used in place of
the default.
For example, if you want Python objects
(including SCons Nodes)
to be returned as Python objects,
you can use the Python
Λ
idiom to pass in an unnamed function
that simply returns its unconverted argument.
</para>

<para>
Example:
</para>

<example_commands>
print(env.subst("The C compiler is: $CC"))

def compile(target, source, env):
    sourceDir = env.subst("${SOURCE.srcdir}",
                          target=target,
                          source=source)

source_nodes = env.subst('$EXPAND_TO_NODELIST',
                         conv=lambda x: x)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Tag">
    <term><function>Tag</function>(<parameter>node, tags</parameter>)</term>
    <listitem><para>
Annotates file or directory Nodes with
information about how the
<link linkend="b-Package"><function>Package</function></link>
Builder should package those files or directories.
All tags are optional.
</para>

<para>
Examples:
</para>

<example_commands>
# makes sure the built library will be installed with 0o644 file
# access mode
Tag( Library( 'lib.c' ), UNIX_ATTR="0o644" )

# marks file2.txt to be a documentation file
Tag( 'file2.txt', DOC )
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Tool">
    <term><function>Tool</function>(<parameter>name, [toolpath, **kwargs]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Tool</methodname>(<parameter>name, [toolpath, **kwargs]</parameter>)</term>
    <listitem><para>
Runs the tool identified by
<parameter>name</parameter>, which is
searched for in standard locations and any
paths specified by the optional
<parameter>toolpath</parameter>,
to update a <phrase>construction environment</phrase> with <phrase>construction variables</phrase>
needed to use the mechanisms that tool describes.
Any additional keyword arguments
<parameter>kwargs</parameter> are passed
on to the tool module's <function>generate</function> function.
</para>

<para>
When called as a <phrase>construction environment</phrase> method,
the tool module is called to update the
<phrase>construction environment</phrase> and the name of the tool is
appended to the <link linkend="cv-TOOLS"><envar>$TOOLS</envar></link>
<phrase>construction variable</phrase> in that environment.
</para>

<para>
Examples:
</para>

<example_commands>
env.Tool('gcc')
env.Tool('opengl', toolpath=['build/tools'])
</example_commands>

<para>
When called as a global function,
returns a callable tool object;
the tool is not called at this time,
as it lacks the context of an environment to update.
This tool object can be passed to an
<link linkend="f-Environment"><function>Environment</function></link> or <link linkend="f-Clone"><function>Clone</function></link> call
as part of the <parameter>tools</parameter> keyword argument,
or it can be called directly,
passing a <phrase>construction environment</phrase> to update as the argument.
Either approach will also update the
<varname>TOOLS</varname> <phrase>construction variable</phrase>.
</para>

<para>
Examples:
</para>

<example_commands>
env = Environment(tools=[Tool('msvc')])

env = Environment()
t = Tool('msvc')
t(env)  # adds 'msvc' to the TOOLS variable
u = Tool('opengl', toolpath = ['tools'])
u(env)  # adds 'opengl' to the TOOLS variable
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-Value">
    <term><function>Value</function>(<parameter>value, [built_value], [name]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>Value</methodname>(<parameter>value, [built_value], [name]</parameter>)</term>
    <listitem><para>
Returns a Node object representing the specified Python value.  Value
Nodes can be used as dependencies of targets.  If the result of
calling
<function>str</function>(<varname>value</varname>)
changes between SCons runs, any targets depending on
<function>Value</function>(<varname>value</varname>)
will be rebuilt.
(This is true even when using timestamps to decide if
files are up-to-date.)
When using timestamp source signatures, Value Nodes'
timestamps are equal to the system time when the Node is created.
<varname>name</varname> can be provided as an alternative name
for the resulting <literal>Value</literal> node; this is advised
if the <varname>value</varname> parameter can't be converted to
a string.
</para>

<para>
The returned Value Node object has a
<function>write</function>()
method that can be used to "build" a Value Node
by setting a new value.
The optional
<varname>built_value</varname>
argument can be specified
when the Value Node is created
to indicate the Node should already be considered
"built."
There is a corresponding
<function>read</function>()
method that will return the built value of the Node.
</para>

<para>
Examples:
</para>

<example_commands>
env = Environment()

def create(target, source, env):
    # A function that will write a 'prefix=$SOURCE'
    # string into the file name specified as the
    # $TARGET.
    f = open(str(target[0]), 'wb')
    f.write('prefix=' + source[0].get_contents())

# Fetch the prefix= argument, if any, from the command
# line, and use /usr/local as the default.
prefix = ARGUMENTS.get('prefix', '/usr/local')

# Attach a .Config() builder for the above function action
# to the construction environment.
env['BUILDERS']['Config'] = Builder(action = create)
env.Config(target = 'package-config', source = Value(prefix))

def build_value(target, source, env):
    # A function that "builds" a Python Value by updating
    # the the Python value with the contents of the file
    # specified as the source of the Builder call ($SOURCE).
    target[0].write(source[0].get_contents())

output = env.Value('before')
input = env.Value('after')

# Attach a .UpdateValue() builder for the above function
# action to the construction environment.
env['BUILDERS']['UpdateValue'] = Builder(action = build_value)
env.UpdateValue(target = Value(output), source = Value(input))
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-VariantDir">
    <term><function>VariantDir</function>(<parameter>variant_dir, src_dir, [duplicate]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>VariantDir</methodname>(<parameter>variant_dir, src_dir, [duplicate]</parameter>)</term>
    <listitem><para>
Use the
<function>VariantDir</function>
function to create a copy of your sources in another location:
if a name under
<varname>variant_dir</varname>
is not found but exists under
<varname>src_dir</varname>,
the file or directory is copied to
<varname>variant_dir</varname>.
Target files can be built in a different directory
than the original sources by simply refering to the sources (and targets)
within the variant tree.
</para>

<para>
<function>VariantDir</function>
can be called multiple times with the same
<varname>src_dir</varname>
to set up multiple builds with different options
(<varname>variants</varname>).
The
<varname>src_dir</varname>
location must be in or underneath the SConstruct file's directory, and
<varname>variant_dir</varname>
may not be underneath
<varname>src_dir</varname>.
<!--
TODO: Can the above restrictions be clarified or relaxed?
TODO: The latter restriction is clearly not completely right;
TODO: src_dir = '.' works fine with a build dir under it.
-->
</para>

<para>
The default behavior is for
<command>scons</command>
to physically duplicate the source files in the variant tree.
Thus, a build performed in the variant tree is guaranteed to be identical
to a build performed in the source tree even if
intermediate source files are generated during the build,
or preprocessors or other scanners search for included files
relative to the source file,
or individual compilers or other invoked tools are hard-coded
to put derived files in the same directory as source files.
</para>

<para>
If possible on the platform,
the duplication is performed by linking rather than copying;
see also the
<option>--duplicate</option>
command-line option.
Moreover, only the files needed for the build are duplicated;
files and directories that are not used are not present in
<varname>variant_dir</varname>.
</para>

<para>
Duplicating the source tree may be disabled by setting the
<literal>duplicate</literal>
argument to
<literal>0</literal>
(zero).
This will cause
<command>scons</command>
to invoke Builders using the path names of source files in
<varname>src_dir</varname>
and the path names of derived files within
<varname>variant_dir</varname>.
This is always more efficient than
<literal>duplicate=1</literal>,
and is usually safe for most builds
(but see above for cases that may cause problems).
</para>

<para>
Note that
<function>VariantDir</function>
works most naturally with a subsidiary SConscript file.
However, you would then call the subsidiary SConscript file
not in the source directory, but in the
<varname>variant_dir</varname>,
regardless of the value of
<literal>duplicate</literal>.
This is how you tell
<command>scons</command>
which variant of a source tree to build:
</para>

<example_commands>
# run src/SConscript in two variant directories
VariantDir('build/variant1', 'src')
SConscript('build/variant1/SConscript')
VariantDir('build/variant2', 'src')
SConscript('build/variant2/SConscript')
</example_commands>

<para>
See also the
<link linkend="f-SConscript"><function>SConscript</function></link>
function, described above,
for another way to specify a variant directory
in conjunction with calling a subsidiary SConscript file.
</para>

<para>
Examples:
</para>

<example_commands>
# use names in the build directory, not the source directory
VariantDir('build', 'src', duplicate=0)
Program('build/prog', 'build/source.c')
</example_commands>

<example_commands>
# this builds both the source and docs in a separate subtree
VariantDir('build', '.', duplicate=0)
SConscript(dirs=['build/src','build/doc'])
</example_commands>

<example_commands>
# same as previous example, but only uses SConscript
SConscript(dirs='src', variant_dir='build/src', duplicate=0)
SConscript(dirs='doc', variant_dir='build/doc', duplicate=0)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="f-WhereIs">
    <term><function>WhereIs</function>(<parameter>program, [path, pathext, reject]</parameter>)</term>
    <term><replaceable>env</replaceable>.<methodname>WhereIs</methodname>(<parameter>program, [path, pathext, reject]</parameter>)</term>
    <listitem><para>
Searches for the specified executable
<varname>program</varname>,
returning the full path to the program
or <constant>None</constant>.
</para>
<para>
When called as a <phrase>construction environment</phrase> method,
searches the paths in the
<varname>path</varname> keyword argument,
or if <constant>None</constant> (the default)
the paths listed in the <phrase>construction environment</phrase>
(<replaceable>env</replaceable><literal>['ENV']['PATH']</literal>).
The external environment's path list
(<literal>os.environ['PATH']</literal>)
is used as a fallback if the key
<replaceable>env</replaceable><literal>['ENV']['PATH']</literal>
does not exist.
</para>
<para>
On Windows systems, searches for executable
programs with any of the file extensions listed in the
<varname>pathext</varname> keyword argument,
or if <literal>None</literal> (the default)
the pathname extensions listed in the <phrase>construction environment</phrase>
(<replaceable>env</replaceable><literal>['ENV']['PATHEXT']</literal>).
The external environment's pathname extensions list
(<literal>os.environ['PATHEXT']</literal>)
is used as a fallback if the key
<replaceable>env</replaceable><literal>['ENV']['PATHEXT']</literal>
does not exist.
</para>
<para>
When called as a global function, uses the external
environment's path 
<literal>os.environ['PATH']</literal>
and path extensions
<literal>os.environ['PATHEXT']</literal>,
respectively, if
<varname>path</varname> and
<varname>pathext</varname> are
<constant>None</constant>.
</para>
<para>
Will not select any
path name or names
in the optional
<varname>reject</varname>
list.
</para>

</listitem>
  </varlistentry>
</variablelist>
