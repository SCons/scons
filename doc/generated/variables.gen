<!DOCTYPE sconsdoc [
    <!ENTITY % scons SYSTEM "../scons.mod">
    %scons;
    <!ENTITY % builders-mod SYSTEM "builders.mod">
    %builders-mod;
    <!ENTITY % functions-mod SYSTEM "functions.mod">
    %functions-mod;
    <!ENTITY % tools-mod SYSTEM "tools.mod">
    %tools-mod;
    <!ENTITY % variables-mod SYSTEM "variables.mod">
    %variables-mod;
]>

<variablelist xmlns="http://www.scons.org/dbxsd/v1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.scons.org/dbxsd/v1.0 http://www.scons.org/dbxsd/v1.0/scons.xsd">
  <varlistentry id="cv-__LDMODULEVERSIONFLAGS">
    <term>
      <envar>__LDMODULEVERSIONFLAGS</envar>
    </term>
    <listitem><para>
This construction variable automatically introduces <link linkend="cv-_LDMODULEVERSIONFLAGS"><envar>$_LDMODULEVERSIONFLAGS</envar></link>
if <link linkend="cv-LDMODULEVERSION"><envar>$LDMODULEVERSION</envar></link> is set. Othervise it evaluates to an empty string.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-__SHLIBVERSIONFLAGS">
    <term>
      <envar>__SHLIBVERSIONFLAGS</envar>
    </term>
    <listitem><para>
This construction variable automatically introduces <link linkend="cv-_SHLIBVERSIONFLAGS"><envar>$_SHLIBVERSIONFLAGS</envar></link>
if <link linkend="cv-SHLIBVERSION"><envar>$SHLIBVERSION</envar></link> is set. Othervise it evaluates to an empty string.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-APPLELINK_COMPATIBILITY_VERSION">
    <term>
      <envar>APPLELINK_COMPATIBILITY_VERSION</envar>
    </term>
    <listitem><para>
                On Mac OS X this is used to set the linker flag:

                -compatibility_version
            </para>
            <para>
                The value is specified as X[.Y[.Z]] where X is between 1 and 65535, Y can be omitted or between 1 and
                255, Z can be omitted or between 1 and 255. This value will be derived from <link linkend="cv-SHLIBVERSION"><envar>$SHLIBVERSION</envar></link> if
                not
                specified. The lowest digit will be dropped and replaced by a 0.
            </para>
            <para>
                If the <link linkend="cv-APPLELINK_NO_COMPATIBILITY_VERSION"><envar>$APPLELINK_NO_COMPATIBILITY_VERSION</envar></link> is set then no -compatibility_version will be
                output.
            </para>
            <para>See MacOS's ld manpage for more details</para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-_APPLELINK_COMPATIBILITY_VERSION">
    <term>
      <envar>_APPLELINK_COMPATIBILITY_VERSION</envar>
    </term>
    <listitem><para>
                A macro (by default a generator function) used to create the linker flags to specify
                apple's linker's -compatibility_version flag.
                The default generator uses <link linkend="cv-APPLELINK_COMPATIBILITY_VERSION"><envar>$APPLELINK_COMPATIBILITY_VERSION</envar></link>
                and <link linkend="cv-APPLELINK_NO_COMPATIBILITY_VERSION"><envar>$APPLELINK_NO_COMPATIBILITY_VERSION</envar></link> and  <link linkend="cv-SHLIBVERSION"><envar>$SHLIBVERSION</envar></link>
                to determine the correct flag.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-APPLELINK_CURRENT_VERSION">
    <term>
      <envar>APPLELINK_CURRENT_VERSION</envar>
    </term>
    <listitem><para>
                On Mac OS X this is used to set the linker flag:

                -current_version
            </para>
            <para>
                The value is specified as X[.Y[.Z]] where X is between 1 and 65535, Y can be omitted or between 1 and
                255, Z can be omitted or between 1 and 255. This value will be set to <link linkend="cv-SHLIBVERSION"><envar>$SHLIBVERSION</envar></link> if not
                specified.
            </para>
            <para>
                If the <link linkend="cv-APPLELINK_NO_CURRENT_VERSION"><envar>$APPLELINK_NO_CURRENT_VERSION</envar></link> is set then no -current_version will be
                output.
            </para>
            <para>See MacOS's ld manpage for more details</para>

        </listitem>
  </varlistentry>
  <varlistentry id="cv-_APPLELINK_CURRENT_VERSION">
    <term>
      <envar>_APPLELINK_CURRENT_VERSION</envar>
    </term>
    <listitem><para>
                A macro (by default a generator function) used to create the linker flags to specify apple's linker's
                -current_version flag.  The default generator uses <link linkend="cv-APPLELINK_CURRENT_VERSION"><envar>$APPLELINK_CURRENT_VERSION</envar></link> and
                <link linkend="cv-APPLELINK_NO_CURRENT_VERSION"><envar>$APPLELINK_NO_CURRENT_VERSION</envar></link> and  <link linkend="cv-SHLIBVERSION"><envar>$SHLIBVERSION</envar></link> to determine the correct flag.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-APPLELINK_NO_COMPATIBILITY_VERSION">
    <term>
      <envar>APPLELINK_NO_COMPATIBILITY_VERSION</envar>
    </term>
    <listitem><para>
                Set this to any True (1|True|non-empty string) value to disable adding -compatibility_version flag when
                generating versioned shared libraries.
            </para>
            <para>
                This overrides <link linkend="cv-APPLELINK_COMPATIBILITY_VERSION"><envar>$APPLELINK_COMPATIBILITY_VERSION</envar></link>.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-APPLELINK_NO_CURRENT_VERSION">
    <term>
      <envar>APPLELINK_NO_CURRENT_VERSION</envar>
    </term>
    <listitem><para>
                Set this to any True (1|True|non-empty string) value to disable adding -current_version flag when
                generating versioned shared libraries.
            </para>
            <para>
                This overrides <link linkend="cv-APPLELINK_CURRENT_VERSION"><envar>$APPLELINK_CURRENT_VERSION</envar></link>.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-AR">
    <term>
      <envar>AR</envar>
    </term>
    <listitem><para>
The static library archiver.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ARCHITECTURE">
    <term>
      <envar>ARCHITECTURE</envar>
    </term>
    <listitem><para>
Specifies the system architecture for which
the package is being built.
The default is the system architecture
of the machine on which SCons is running.
This is used to fill in the
<literal>Architecture:</literal>
field in an Ipkg
<filename>control</filename> file,
and the <literal>BuildArch:</literal> field
in the RPM <filename>.spec</filename> file,
as well as forming part of the name of a generated RPM package file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ARCOM">
    <term>
      <envar>ARCOM</envar>
    </term>
    <listitem><para>
The command line used to generate a static library from object files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ARCOMSTR">
    <term>
      <envar>ARCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when a static library is
generated from object files.
If this is not set, then <link linkend="cv-ARCOM"><envar>$ARCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(ARCOMSTR = "Archiving $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ARFLAGS">
    <term>
      <envar>ARFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the static library archiver.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-AS">
    <term>
      <envar>AS</envar>
    </term>
    <listitem><para>
The assembler.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ASCOM">
    <term>
      <envar>ASCOM</envar>
    </term>
    <listitem><para>
The command line used to generate an object file
from an assembly-language source file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ASCOMSTR">
    <term>
      <envar>ASCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when an object file
is generated from an assembly-language source file.
If this is not set, then <link linkend="cv-ASCOM"><envar>$ASCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(ASCOMSTR = "Assembling $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ASFLAGS">
    <term>
      <envar>ASFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the assembler.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ASPPCOM">
    <term>
      <envar>ASPPCOM</envar>
    </term>
    <listitem><para>
The command line used to assemble an assembly-language
source file into an object file
after first running the file through the C preprocessor.
Any options specified
in the <link linkend="cv-ASFLAGS"><envar>$ASFLAGS</envar></link> and <link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ASPPCOMSTR">
    <term>
      <envar>ASPPCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when an object file
is generated from an assembly-language source file
after first running the file through the C preprocessor.
If this is not set, then <link linkend="cv-ASPPCOM"><envar>$ASPPCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(ASPPCOMSTR = "Assembling $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ASPPFLAGS">
    <term>
      <envar>ASPPFLAGS</envar>
    </term>
    <listitem><para>
General options when an assembling an assembly-language
source file into an object file
after first running the file through the C preprocessor.
The default is to use the value of <link linkend="cv-ASFLAGS"><envar>$ASFLAGS</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-BIBTEX">
    <term>
      <envar>BIBTEX</envar>
    </term>
    <listitem><para>
The bibliography generator for the TeX formatter and typesetter and the
LaTeX structured formatter and typesetter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-BIBTEXCOM">
    <term>
      <envar>BIBTEXCOM</envar>
    </term>
    <listitem><para>
The command line used to call the bibliography generator for the
TeX formatter and typesetter and the LaTeX structured formatter and
typesetter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-BIBTEXCOMSTR">
    <term>
      <envar>BIBTEXCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when generating a bibliography
for TeX or LaTeX.
If this is not set, then <link linkend="cv-BIBTEXCOM"><envar>$BIBTEXCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(BIBTEXCOMSTR = "Generating bibliography $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-BIBTEXFLAGS">
    <term>
      <envar>BIBTEXFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the bibliography generator for the TeX formatter
and typesetter and the LaTeX structured formatter and typesetter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-BUILDERS">
    <term>
      <envar>BUILDERS</envar>
    </term>
    <listitem><para>
A dictionary mapping the names of the builders
available through this environment
to underlying Builder objects.
Builders named
Alias, CFile, CXXFile, DVI, Library, Object, PDF, PostScript, and Program
are available by default.
If you initialize this variable when an
Environment is created:
</para>

<example_commands>
env = Environment(BUILDERS = {'NewBuilder' : foo})
</example_commands>

<para>
the default Builders will no longer be available.
To use a new Builder object in addition to the default Builders,
add your new Builder object like this:
</para>

<example_commands>
env = Environment()
env.Append(BUILDERS = {'NewBuilder' : foo})
</example_commands>

<para>
or this:
</para>

<example_commands>
env = Environment()
env['BUILDERS']['NewBuilder'] = foo
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CC">
    <term>
      <envar>CC</envar>
    </term>
    <listitem><para>
The C compiler.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CCCOM">
    <term>
      <envar>CCCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a C source file to a (static) object
file.  Any options specified in the <link linkend="cv-CFLAGS"><envar>$CFLAGS</envar></link>, <link linkend="cv-CCFLAGS"><envar>$CCFLAGS</envar></link> and
<link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables are included on this command line.
See also <link linkend="cv-SHCCCOM"><envar>$SHCCCOM</envar></link> for compiling to shared objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CCCOMSTR">
    <term>
      <envar>CCCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a C source file
is compiled to a (static) object file.
If not set, then <link linkend="cv-CCCOM"><envar>$CCCOM</envar></link> (the command line) is displayed.
See also <link linkend="cv-SHCCCOMSTR"><envar>$SHCCCOMSTR</envar></link> for compiling to shared objects.
</para>

<example_commands>
env = Environment(CCCOMSTR = "Compiling static object $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CCFLAGS">
    <term>
      <envar>CCFLAGS</envar>
    </term>
    <listitem><para>
General options that are passed to the C and C++ compilers.
See also <link linkend="cv-SHCCFLAGS"><envar>$SHCCFLAGS</envar></link> for compiling to shared objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CCPCHFLAGS">
    <term>
      <envar>CCPCHFLAGS</envar>
    </term>
    <listitem><para>
Options added to the compiler command line
to support building with precompiled headers.
The default value expands expands to the appropriate
Microsoft Visual C++ command-line options
when the <link linkend="cv-PCH"><envar>$PCH</envar></link> construction variable is set.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CCPDBFLAGS">
    <term>
      <envar>CCPDBFLAGS</envar>
    </term>
    <listitem><para>
Options added to the compiler command line
to support storing debugging information in a
Microsoft Visual C++ PDB file.
The default value expands expands to appropriate
Microsoft Visual C++ command-line options
when the <link linkend="cv-PDB"><envar>$PDB</envar></link> construction variable is set.
</para>

<para>
The Visual C++ compiler option that SCons uses by default
to generate PDB information is <option>/Z7</option>.
This works correctly with parallel (<option>-j</option>) builds
because it embeds the debug information in the intermediate object files,
as opposed to sharing a single PDB file between multiple object files.
This is also the only way to get debug information
embedded into a static library.
Using the <option>/Zi</option> instead may yield improved
link-time performance,
although parallel builds will no longer work.
</para>

<para>
You can generate PDB files with the <option>/Zi</option>
switch by overriding the default <link linkend="cv-CCPDBFLAGS"><envar>$CCPDBFLAGS</envar></link> variable as follows:
</para>

<example_commands>
env['CCPDBFLAGS'] = ['${(PDB and "/Zi /Fd%s" % File(PDB)) or ""}']
</example_commands>

<para>
An alternative would be to use the <option>/Zi</option>
to put the debugging information in a separate <filename>.pdb</filename>
file for each object file by overriding
the <link linkend="cv-CCPDBFLAGS"><envar>$CCPDBFLAGS</envar></link> variable as follows:
</para>

<example_commands>
env['CCPDBFLAGS'] = '/Zi /Fd${TARGET}.pdb'
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CCVERSION">
    <term>
      <envar>CCVERSION</envar>
    </term>
    <listitem><para>
The version number of the C compiler.
This may or may not be set,
depending on the specific C compiler being used.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CFILESUFFIX">
    <term>
      <envar>CFILESUFFIX</envar>
    </term>
    <listitem><para>
The suffix for C source files.
This is used by the internal CFile builder
when generating C files from Lex (.l) or YACC (.y) input files.
The default suffix, of course, is
<filename>.c</filename>
(lower case).
On case-insensitive systems (like Windows),
SCons also treats
<filename>.C</filename>
(upper case) files
as C files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CFLAGS">
    <term>
      <envar>CFLAGS</envar>
    </term>
    <listitem><para>
General options that are passed to the C compiler (C only; not C++).
See also <link linkend="cv-SHCFLAGS"><envar>$SHCFLAGS</envar></link> for compiling to shared objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CHANGE_SPECFILE">
    <term>
      <envar>CHANGE_SPECFILE</envar>
    </term>
    <listitem><para>
A hook for modifying the file that controls the packaging build
(the <filename>.spec</filename> for RPM,
the <filename>control</filename> for Ipkg,
the <filename>.wxs</filename> for MSI).
If set, the function will be called
after the SCons template for the file has been written.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CHANGED_SOURCES">
    <term>
      <envar>CHANGED_SOURCES</envar>
    </term>
    <listitem><para>
A reserved variable name
that may not be set or used in a construction environment.
(See the manpage section "Variable Substitution"
for more information).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CHANGED_TARGETS">
    <term>
      <envar>CHANGED_TARGETS</envar>
    </term>
    <listitem><para>
A reserved variable name
that may not be set or used in a construction environment.
(See the manpage section "Variable Substitution"
for more information).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CHANGELOG">
    <term>
      <envar>CHANGELOG</envar>
    </term>
    <listitem><para>
The name of a file containing the change log text
to be included in the package.
This is included as the
<literal>%changelog</literal>
section of the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_concat">
    <term>
      <envar>_concat</envar>
    </term>
    <listitem><para>
A function used to produce variables like <envar>$_CPPINCFLAGS</envar>. It takes
four or five
arguments: a prefix to concatenate onto each element, a list of
elements, a suffix to concatenate onto each element, an environment
for variable interpolation, and an optional function that will be
called to transform the list before concatenation.
</para>

<example_commands>
env['_CPPINCFLAGS'] = '$( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs)} $)',
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CONFIGUREDIR">
    <term>
      <envar>CONFIGUREDIR</envar>
    </term>
    <listitem><para>
The name of the directory in which
Configure context test files are written.
The default is
<filename>.sconf_temp</filename>
in the top-level directory
containing the
<filename>SConstruct</filename>
file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CONFIGURELOG">
    <term>
      <envar>CONFIGURELOG</envar>
    </term>
    <listitem><para>
The name of the Configure context log file.
The default is
<filename>config.log</filename>
in the top-level directory
containing the
<filename>SConstruct</filename>
file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_CPPDEFFLAGS">
    <term>
      <envar>_CPPDEFFLAGS</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the C preprocessor command-line options
to define values.
The value of <envar>$_CPPDEFFLAGS</envar> is created
by respectively prepending and appending
<envar>$CPPDEFPREFIX</envar> and <envar>$CPPDEFSUFFIX</envar>
to the beginning and end
of each definition in <envar>$CPPDEFINES</envar>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CPPDEFINES">
    <term>
      <envar>CPPDEFINES</envar>
    </term>
    <listitem><para>
A platform independent specification of C preprocessor definitions.
The definitions will be added to command lines
through the automatically-generated
<envar>$_CPPDEFFLAGS</envar> construction variable (see above),
which is constructed according to
the type of value of <envar>$CPPDEFINES</envar>:
</para>

<para>
If <envar>$CPPDEFINES</envar> is a string,
the values of the
<envar>$CPPDEFPREFIX</envar> and <envar>$CPPDEFSUFFIX</envar>
construction variables
will be respectively prepended and appended to the beginning and end
of each definition in <envar>$CPPDEFINES</envar>.
</para>

<example_commands>
# Will add -Dxyz to POSIX compiler command lines,
# and /Dxyz to Microsoft Visual C++ command lines.
env = Environment(CPPDEFINES='xyz')
</example_commands>

<para>
If <envar>$CPPDEFINES</envar> is a list,
the values of the
<envar>$CPPDEFPREFIX</envar> and <envar>$CPPDEFSUFFIX</envar>
construction variables
will be respectively prepended and appended to the beginning and end
of each element in the list.
If any element is a list or tuple,
then the first item is the name being
defined and the second item is its value:
</para>

<example_commands>
# Will add -DB=2 -DA to POSIX compiler command lines,
# and /DB=2 /DA to Microsoft Visual C++ command lines.
env = Environment(CPPDEFINES=[('B', 2), 'A'])
</example_commands>

<para>
If <envar>$CPPDEFINES</envar> is a dictionary,
the values of the
<envar>$CPPDEFPREFIX</envar> and <envar>$CPPDEFSUFFIX</envar>
construction variables
will be respectively prepended and appended to the beginning and end
of each item from the dictionary.
The key of each dictionary item
is a name being defined
to the dictionary item's corresponding value;
if the value is
<literal>None</literal>,
then the name is defined without an explicit value.
Note that the resulting flags are sorted by keyword
to ensure that the order of the options on the
command line is consistent each time
<command>scons</command>
is run.
</para>

<example_commands>
# Will add -DA -DB=2 to POSIX compiler command lines,
# and /DA /DB=2 to Microsoft Visual C++ command lines.
env = Environment(CPPDEFINES={'B':2, 'A':None})
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CPPDEFPREFIX">
    <term>
      <envar>CPPDEFPREFIX</envar>
    </term>
    <listitem><para>
The prefix used to specify preprocessor definitions
on the C compiler command line.
This will be prepended to the beginning of each definition
in the <envar>$CPPDEFINES</envar> construction variable
when the <envar>$_CPPDEFFLAGS</envar> variable is automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CPPDEFSUFFIX">
    <term>
      <envar>CPPDEFSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used to specify preprocessor definitions
on the C compiler command line.
This will be appended to the end of each definition
in the <envar>$CPPDEFINES</envar> construction variable
when the <envar>$_CPPDEFFLAGS</envar> variable is automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CPPFLAGS">
    <term>
      <envar>CPPFLAGS</envar>
    </term>
    <listitem><para>
User-specified C preprocessor options.
These will be included in any command that uses the C preprocessor,
including not just compilation of C and C++ source files
via the <link linkend="cv-CCCOM"><envar>$CCCOM</envar></link>,
<link linkend="cv-SHCCCOM"><envar>$SHCCCOM</envar></link>,
<link linkend="cv-CXXCOM"><envar>$CXXCOM</envar></link> and
<link linkend="cv-SHCXXCOM"><envar>$SHCXXCOM</envar></link> command lines,
but also the <link linkend="cv-FORTRANPPCOM"><envar>$FORTRANPPCOM</envar></link>,
<link linkend="cv-SHFORTRANPPCOM"><envar>$SHFORTRANPPCOM</envar></link>,
<link linkend="cv-F77PPCOM"><envar>$F77PPCOM</envar></link> and
<link linkend="cv-SHF77PPCOM"><envar>$SHF77PPCOM</envar></link> command lines
used to compile a Fortran source file,
and the <link linkend="cv-ASPPCOM"><envar>$ASPPCOM</envar></link> command line
used to assemble an assembly language source file,
after first running each file through the C preprocessor.
Note that this variable does
<emphasis>not</emphasis>
contain
<option>-I</option>
(or similar) include search path options
that scons generates automatically from <link linkend="cv-CPPPATH"><envar>$CPPPATH</envar></link>.
See <link linkend="cv-_CPPINCFLAGS"><envar>$_CPPINCFLAGS</envar></link>, below,
for the variable that expands to those options.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_CPPINCFLAGS">
    <term>
      <envar>_CPPINCFLAGS</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the C preprocessor command-line options
for specifying directories to be searched for include files.
The value of <envar>$_CPPINCFLAGS</envar> is created
by respectively prepending and appending <envar>$INCPREFIX</envar> and <envar>$INCSUFFIX</envar>
to the beginning and end
of each directory in <envar>$CPPPATH</envar>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CPPPATH">
    <term>
      <envar>CPPPATH</envar>
    </term>
    <listitem><para>
The list of directories that the C preprocessor will search for include
directories. The C/C++ implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in CCFLAGS or CXXFLAGS because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in CPPPATH will be looked-up relative to the SConscript
directory when they are used in a command. To force
<command>scons</command>
to look-up a directory relative to the root of the source tree use #:
</para>

<example_commands>
env = Environment(CPPPATH='#/include')
</example_commands>

<para>
The directory look-up can also be forced using the
<function>Dir</function>()
function:
</para>

<example_commands>
include = Dir('include')
env = Environment(CPPPATH=include)
</example_commands>

<para>
The directory list will be added to command lines
through the automatically-generated
<envar>$_CPPINCFLAGS</envar>
construction variable,
which is constructed by
respectively prepending and appending the value of the
<envar>$INCPREFIX</envar> and <envar>$INCSUFFIX</envar>
construction variables
to the beginning and end
of each directory in <envar>$CPPPATH</envar>.
Any command lines you define that need
the CPPPATH directory list should
include <envar>$_CPPINCFLAGS</envar>:
</para>

<example_commands>
env = Environment(CCCOM="my_compiler $_CPPINCFLAGS -c -o $TARGET $SOURCE")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CPPSUFFIXES">
    <term>
      <envar>CPPSUFFIXES</envar>
    </term>
    <listitem><para>
The list of suffixes of files that will be scanned
for C preprocessor implicit dependencies
(#include lines).
The default list is:
</para>

<example_commands>
[".c", ".C", ".cxx", ".cpp", ".c++", ".cc",
 ".h", ".H", ".hxx", ".hpp", ".hh",
 ".F", ".fpp", ".FPP",
 ".m", ".mm",
 ".S", ".spp", ".SPP"]
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CXX">
    <term>
      <envar>CXX</envar>
    </term>
    <listitem><para>
The C++ compiler.
See also <link linkend="cv-SHCXX"><envar>$SHCXX</envar></link> for compiling to shared objects..
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CXXCOM">
    <term>
      <envar>CXXCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a C++ source file to an object file.
Any options specified in the <link linkend="cv-CXXFLAGS"><envar>$CXXFLAGS</envar></link> and
<link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
See also <link linkend="cv-SHCXXCOM"><envar>$SHCXXCOM</envar></link> for compiling to shared objects..
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CXXCOMSTR">
    <term>
      <envar>CXXCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a C++ source file
is compiled to a (static) object file.
If not set, then <link linkend="cv-CXXCOM"><envar>$CXXCOM</envar></link> (the command line) is displayed.
See also <link linkend="cv-SHCXXCOMSTR"><envar>$SHCXXCOMSTR</envar></link> for compiling to shared objects..
</para>

<example_commands>
env = Environment(CXXCOMSTR = "Compiling static object $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CXXFILESUFFIX">
    <term>
      <envar>CXXFILESUFFIX</envar>
    </term>
    <listitem><para>
The suffix for C++ source files.
This is used by the internal CXXFile builder
when generating C++ files from Lex (.ll) or YACC (.yy) input files.
The default suffix is
<filename>.cc</filename>.
SCons also treats files with the suffixes
<filename>.cpp</filename>,
<filename>.cxx</filename>,
<filename>.c++</filename>,
and
<filename>.C++</filename>
as C++ files,
and files with
<filename>.mm</filename>
suffixes as Objective C++ files.
On case-sensitive systems (Linux, UNIX, and other POSIX-alikes),
SCons also treats
<filename>.C</filename>
(upper case) files
as C++ files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CXXFLAGS">
    <term>
      <envar>CXXFLAGS</envar>
    </term>
    <listitem><para>
General options that are passed to the C++ compiler.
By default, this includes the value of <link linkend="cv-CCFLAGS"><envar>$CCFLAGS</envar></link>,
so that setting <envar>$CCFLAGS</envar> affects both C and C++ compilation.
If you want to add C++-specific flags,
you must set or override the value of <link linkend="cv-CXXFLAGS"><envar>$CXXFLAGS</envar></link>.
See also <link linkend="cv-SHCXXFLAGS"><envar>$SHCXXFLAGS</envar></link> for compiling to shared objects..
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-CXXVERSION">
    <term>
      <envar>CXXVERSION</envar>
    </term>
    <listitem><para>
The version number of the C++ compiler.
This may or may not be set,
depending on the specific C++ compiler being used.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DC">
    <term>
      <envar>DC</envar>
    </term>
    <listitem><para>
The D compiler to use.
See also <link linkend="cv-SHDC"><envar>$SHDC</envar></link> for compiling to shared objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DCOM">
    <term>
      <envar>DCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a D file to an object file.
Any options specified in the <link linkend="cv-DFLAGS"><envar>$DFLAGS</envar></link> construction variable
is included on this command line.
See also <link linkend="cv-SHDCOM"><envar>$SHDCOM</envar></link> for compiling to shared objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DCOMSTR">
    <term>
      <envar>DCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a D source file
is compiled to a (static) object file.
If not set, then <link linkend="cv-DCOM"><envar>$DCOM</envar></link> (the command line) is displayed.
See also <link linkend="cv-SHDCOMSTR"><envar>$SHDCOMSTR</envar></link> for compiling to shared objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DDEBUG">
    <term>
      <envar>DDEBUG</envar>
    </term>
    <listitem><para>
List of debug tags to enable when compiling.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DDEBUGPREFIX">
    <term>
      <envar>DDEBUGPREFIX</envar>
    </term>
    <listitem><para>
DDEBUGPREFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DDEBUGSUFFIX">
    <term>
      <envar>DDEBUGSUFFIX</envar>
    </term>
    <listitem><para>
DDEBUGSUFFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DESCRIPTION">
    <term>
      <envar>DESCRIPTION</envar>
    </term>
    <listitem><para>
A long description of the project being packaged.
This is included in the relevant section
of the file that controls the packaging build.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DESCRIPTION_lang">
    <term>
      <envar>DESCRIPTION_lang</envar>
    </term>
    <listitem><para>
A language-specific long description for
the specified <varname>lang</varname>.
This is used to populate a
<literal>%description -l</literal>
section of an RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DFILESUFFIX">
    <term>
      <envar>DFILESUFFIX</envar>
    </term>
    <listitem><para>
DFILESUFFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DFLAGPREFIX">
    <term>
      <envar>DFLAGPREFIX</envar>
    </term>
    <listitem><para>
DFLAGPREFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DFLAGS">
    <term>
      <envar>DFLAGS</envar>
    </term>
    <listitem><para>
General options that are passed to the D compiler.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DFLAGSUFFIX">
    <term>
      <envar>DFLAGSUFFIX</envar>
    </term>
    <listitem><para>
DFLAGSUFFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DINCPREFIX">
    <term>
      <envar>DINCPREFIX</envar>
    </term>
    <listitem><para>
DINCPREFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DINCSUFFIX">
    <term>
      <envar>DINCSUFFIX</envar>
    </term>
    <listitem><para>
DLIBFLAGSUFFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-Dir">
    <term>
      <envar>Dir</envar>
    </term>
    <listitem><para>
A function that converts a string
into a Dir instance relative to the target being built.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-Dirs">
    <term>
      <envar>Dirs</envar>
    </term>
    <listitem><para>
A function that converts a list of strings
into a list of Dir instances relative to the target being built.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLIB">
    <term>
      <envar>DLIB</envar>
    </term>
    <listitem><para>
Name of the lib tool to use for D codes.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLIBCOM">
    <term>
      <envar>DLIBCOM</envar>
    </term>
    <listitem><para>
The command line to use when creating libraries.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLIBDIRPREFIX">
    <term>
      <envar>DLIBDIRPREFIX</envar>
    </term>
    <listitem><para>
DLIBLINKPREFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLIBDIRSUFFIX">
    <term>
      <envar>DLIBDIRSUFFIX</envar>
    </term>
    <listitem><para>
DLIBLINKSUFFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLIBFLAGPREFIX">
    <term>
      <envar>DLIBFLAGPREFIX</envar>
    </term>
    <listitem><para>
DLIBFLAGPREFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLIBFLAGSUFFIX">
    <term>
      <envar>DLIBFLAGSUFFIX</envar>
    </term>
    <listitem><para>
DLIBFLAGSUFFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLIBLINKPREFIX">
    <term>
      <envar>DLIBLINKPREFIX</envar>
    </term>
    <listitem><para>
DLIBLINKPREFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLIBLINKSUFFIX">
    <term>
      <envar>DLIBLINKSUFFIX</envar>
    </term>
    <listitem><para>
DLIBLINKSUFFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLINK">
    <term>
      <envar>DLINK</envar>
    </term>
    <listitem><para>
Name of the linker to use for linking systems including D sources.
See also <link linkend="cv-SHDLINK"><envar>$SHDLINK</envar></link> for linking shared objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLINKCOM">
    <term>
      <envar>DLINKCOM</envar>
    </term>
    <listitem><para>
The command line to use when linking systems including D sources.
See also <link linkend="cv-SHDLINKCOM"><envar>$SHDLINKCOM</envar></link> for linking shared objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLINKFLAGPREFIX">
    <term>
      <envar>DLINKFLAGPREFIX</envar>
    </term>
    <listitem><para>
DLINKFLAGPREFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLINKFLAGS">
    <term>
      <envar>DLINKFLAGS</envar>
    </term>
    <listitem><para>
List of linker flags.
See also <link linkend="cv-SHDLINKFLAGS"><envar>$SHDLINKFLAGS</envar></link> for linking shared objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DLINKFLAGSUFFIX">
    <term>
      <envar>DLINKFLAGSUFFIX</envar>
    </term>
    <listitem><para>
DLINKFLAGSUFFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_DEFAULT_XSL_EPUB">
    <term>
      <envar>DOCBOOK_DEFAULT_XSL_EPUB</envar>
    </term>
    <listitem><para>
The default XSLT file for the <link linkend="b-DocbookEpub"><function>DocbookEpub</function></link> builder within the
current environment, if no other XSLT gets specified via keyword.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_DEFAULT_XSL_HTML">
    <term>
      <envar>DOCBOOK_DEFAULT_XSL_HTML</envar>
    </term>
    <listitem><para>
The default XSLT file for the <link linkend="b-DocbookHtml"><function>DocbookHtml</function></link> builder within the
current environment, if no other XSLT gets specified via keyword.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_DEFAULT_XSL_HTMLCHUNKED">
    <term>
      <envar>DOCBOOK_DEFAULT_XSL_HTMLCHUNKED</envar>
    </term>
    <listitem><para>
The default XSLT file for the <link linkend="b-DocbookHtmlChunked"><function>DocbookHtmlChunked</function></link> builder within the
current environment, if no other XSLT gets specified via keyword.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_DEFAULT_XSL_HTMLHELP">
    <term>
      <envar>DOCBOOK_DEFAULT_XSL_HTMLHELP</envar>
    </term>
    <listitem><para>
The default XSLT file for the <link linkend="b-DocbookHtmlhelp"><function>DocbookHtmlhelp</function></link> builder within the
current environment, if no other XSLT gets specified via keyword.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_DEFAULT_XSL_MAN">
    <term>
      <envar>DOCBOOK_DEFAULT_XSL_MAN</envar>
    </term>
    <listitem><para>
The default XSLT file for the <link linkend="b-DocbookMan"><function>DocbookMan</function></link> builder within the
current environment, if no other XSLT gets specified via keyword.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_DEFAULT_XSL_PDF">
    <term>
      <envar>DOCBOOK_DEFAULT_XSL_PDF</envar>
    </term>
    <listitem><para>
The default XSLT file for the <link linkend="b-DocbookPdf"><function>DocbookPdf</function></link> builder within the
current environment, if no other XSLT gets specified via keyword.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_DEFAULT_XSL_SLIDESHTML">
    <term>
      <envar>DOCBOOK_DEFAULT_XSL_SLIDESHTML</envar>
    </term>
    <listitem><para>
The default XSLT file for the <link linkend="b-DocbookSlidesHtml"><function>DocbookSlidesHtml</function></link> builder within the
current environment, if no other XSLT gets specified via keyword.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_DEFAULT_XSL_SLIDESPDF">
    <term>
      <envar>DOCBOOK_DEFAULT_XSL_SLIDESPDF</envar>
    </term>
    <listitem><para>
The default XSLT file for the <link linkend="b-DocbookSlidesPdf"><function>DocbookSlidesPdf</function></link> builder within the
current environment, if no other XSLT gets specified via keyword.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_FOP">
    <term>
      <envar>DOCBOOK_FOP</envar>
    </term>
    <listitem><para>
The path to the PDF renderer <literal>fop</literal> or <literal>xep</literal>,
if one of them is installed (<literal>fop</literal> gets checked first).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_FOPCOM">
    <term>
      <envar>DOCBOOK_FOPCOM</envar>
    </term>
    <listitem><para>
The full command-line for the
PDF renderer <literal>fop</literal> or <literal>xep</literal>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_FOPCOMSTR">
    <term>
      <envar>DOCBOOK_FOPCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when a renderer like <literal>fop</literal> or
<literal>xep</literal> is used to create PDF output from an XML file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_FOPFLAGS">
    <term>
      <envar>DOCBOOK_FOPFLAGS</envar>
    </term>
    <listitem><para>
Additonal command-line flags for the
PDF renderer <literal>fop</literal> or <literal>xep</literal>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_XMLLINT">
    <term>
      <envar>DOCBOOK_XMLLINT</envar>
    </term>
    <listitem><para>
The path to the external executable <literal>xmllint</literal>, if it's installed.
Note, that this is only used as last fallback for resolving
XIncludes, if no libxml2 or lxml Python binding can be imported
in the current system.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_XMLLINTCOM">
    <term>
      <envar>DOCBOOK_XMLLINTCOM</envar>
    </term>
    <listitem><para>
The full command-line for the external executable
<literal>xmllint</literal>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_XMLLINTCOMSTR">
    <term>
      <envar>DOCBOOK_XMLLINTCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when <literal>xmllint</literal> is used to resolve
XIncludes for a given XML file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_XMLLINTFLAGS">
    <term>
      <envar>DOCBOOK_XMLLINTFLAGS</envar>
    </term>
    <listitem><para>
Additonal command-line flags for the external executable
<literal>xmllint</literal>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_XSLTPROC">
    <term>
      <envar>DOCBOOK_XSLTPROC</envar>
    </term>
    <listitem><para>
The path to the external executable <literal>xsltproc</literal>
(or <literal>saxon</literal>, <literal>xalan</literal>), if one of them
is installed.
Note, that this is only used as last fallback for XSL transformations, if
no libxml2 or lxml Python binding can be imported in the current system.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_XSLTPROCCOM">
    <term>
      <envar>DOCBOOK_XSLTPROCCOM</envar>
    </term>
    <listitem><para>
The full command-line for the external executable
<literal>xsltproc</literal> (or <literal>saxon</literal>, 
<literal>xalan</literal>).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_XSLTPROCCOMSTR">
    <term>
      <envar>DOCBOOK_XSLTPROCCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when <literal>xsltproc</literal> is used to transform
an XML file via a given XSLT stylesheet.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_XSLTPROCFLAGS">
    <term>
      <envar>DOCBOOK_XSLTPROCFLAGS</envar>
    </term>
    <listitem><para>
Additonal command-line flags for the external executable
<literal>xsltproc</literal> (or <literal>saxon</literal>, 
<literal>xalan</literal>).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DOCBOOK_XSLTPROCPARAMS">
    <term>
      <envar>DOCBOOK_XSLTPROCPARAMS</envar>
    </term>
    <listitem><para>
Additonal parameters that are not intended for the XSLT processor executable, but
the XSL processing itself. By default, they get appended at the end of the command line
for <literal>saxon</literal> and <literal>saxon-xslt</literal>, respectively.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DPATH">
    <term>
      <envar>DPATH</envar>
    </term>
    <listitem><para>
  List of paths to search for import modules.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DRPATHPREFIX">
    <term>
      <envar>DRPATHPREFIX</envar>
    </term>
    <listitem><para>
DRPATHPREFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DRPATHSUFFIX">
    <term>
      <envar>DRPATHSUFFIX</envar>
    </term>
    <listitem><para>
DRPATHSUFFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DShLibSonameGenerator">
    <term>
      <envar>DShLibSonameGenerator</envar>
    </term>
    <listitem><para>
DShLibSonameGenerator.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DSUFFIXES">
    <term>
      <envar>DSUFFIXES</envar>
    </term>
    <listitem><para>
The list of suffixes of files that will be scanned
for imported D package files.
The default list is <literal>['.d']</literal>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DVERPREFIX">
    <term>
      <envar>DVERPREFIX</envar>
    </term>
    <listitem><para>
DVERPREFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DVERSIONS">
    <term>
      <envar>DVERSIONS</envar>
    </term>
    <listitem><para>
List of version tags to enable when compiling.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DVERSUFFIX">
    <term>
      <envar>DVERSUFFIX</envar>
    </term>
    <listitem><para>
DVERSUFFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DVIPDF">
    <term>
      <envar>DVIPDF</envar>
    </term>
    <listitem><para>
The TeX DVI file to PDF file converter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DVIPDFCOM">
    <term>
      <envar>DVIPDFCOM</envar>
    </term>
    <listitem><para>
The command line used to convert TeX DVI files into a PDF file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DVIPDFCOMSTR">
    <term>
      <envar>DVIPDFCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when a TeX DVI file
is converted into a PDF file.
If this is not set, then <link linkend="cv-DVIPDFCOM"><envar>$DVIPDFCOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DVIPDFFLAGS">
    <term>
      <envar>DVIPDFFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the TeX DVI file to PDF file converter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DVIPS">
    <term>
      <envar>DVIPS</envar>
    </term>
    <listitem><para>
The TeX DVI file to PostScript converter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-DVIPSFLAGS">
    <term>
      <envar>DVIPSFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the TeX DVI file to PostScript converter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ENV">
    <term>
      <envar>ENV</envar>
    </term>
    <listitem><para>
A dictionary of environment variables
to use when invoking commands. When
<envar>$ENV</envar> is used in a command all list
values will be joined using the path separator and any other non-string
values will simply be coerced to a string.
Note that, by default,
<command>scons</command>
does
<emphasis>not</emphasis>
propagate the environment in force when you
execute
<command>scons</command>
to the commands used to build target files.
This is so that builds will be guaranteed
repeatable regardless of the environment
variables set at the time
<command>scons</command>
is invoked.
</para>

<para>
If you want to propagate your
environment variables
to the commands executed
to build target files,
you must do so explicitly:
</para>

<example_commands>
import os
env = Environment(ENV = os.environ)
</example_commands>

<para>
Note that you can choose only to propagate
certain environment variables.
A common example is
the system
<envar>PATH</envar>
environment variable,
so that
<command>scons</command>
uses the same utilities
as the invoking shell (or other process):
</para>

<example_commands>
import os
env = Environment(ENV = {'PATH' : os.environ['PATH']})
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ESCAPE">
    <term>
      <envar>ESCAPE</envar>
    </term>
    <listitem><para>
A function that will be called to escape shell special characters in
command lines. The function should take one argument: the command line
string to escape; and should return the escaped command line.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F03">
    <term>
      <envar>F03</envar>
    </term>
    <listitem><para>
The Fortran 03 compiler.
You should normally set the <link linkend="cv-FORTRAN"><envar>$FORTRAN</envar></link> variable,
which specifies the default Fortran compiler
for all Fortran versions.
You only need to set <link linkend="cv-F03"><envar>$F03</envar></link> if you need to use a specific compiler
or compiler version for Fortran 03 files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F03COM">
    <term>
      <envar>F03COM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 03 source file to an object file.
You only need to set <link linkend="cv-F03COM"><envar>$F03COM</envar></link> if you need to use a specific
command line for Fortran 03 files.
You should normally set the <link linkend="cv-FORTRANCOM"><envar>$FORTRANCOM</envar></link> variable,
which specifies the default command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F03COMSTR">
    <term>
      <envar>F03COMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 03 source file
is compiled to an object file.
If not set, then <link linkend="cv-F03COM"><envar>$F03COM</envar></link> or <link linkend="cv-FORTRANCOM"><envar>$FORTRANCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F03FILESUFFIXES">
    <term>
      <envar>F03FILESUFFIXES</envar>
    </term>
    <listitem><para>
The list of file extensions for which the F03 dialect will be used. By
default, this is ['.f03']
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F03FLAGS">
    <term>
      <envar>F03FLAGS</envar>
    </term>
    <listitem><para>
General user-specified options that are passed to the Fortran 03 compiler.
Note that this variable does
<emphasis>not</emphasis>
contain
<option>-I</option>
(or similar) include search path options
that scons generates automatically from <link linkend="cv-F03PATH"><envar>$F03PATH</envar></link>.
See
<link linkend="cv-_F03INCFLAGS"><envar>$_F03INCFLAGS</envar></link>
below,
for the variable that expands to those options.
You only need to set <link linkend="cv-F03FLAGS"><envar>$F03FLAGS</envar></link> if you need to define specific
user options for Fortran 03 files.
You should normally set the <link linkend="cv-FORTRANFLAGS"><envar>$FORTRANFLAGS</envar></link> variable,
which specifies the user-specified options
passed to the default Fortran compiler
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_F03INCFLAGS">
    <term>
      <envar>_F03INCFLAGS</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the Fortran 03 compiler command-line options
for specifying directories to be searched for include files.
The value of <link linkend="cv-_F03INCFLAGS"><envar>$_F03INCFLAGS</envar></link> is created
by appending <link linkend="cv-INCPREFIX"><envar>$INCPREFIX</envar></link> and <link linkend="cv-INCSUFFIX"><envar>$INCSUFFIX</envar></link>
to the beginning and end
of each directory in <link linkend="cv-F03PATH"><envar>$F03PATH</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F03PATH">
    <term>
      <envar>F03PATH</envar>
    </term>
    <listitem><para>
The list of directories that the Fortran 03 compiler will search for include
directories. The implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in <link linkend="cv-F03FLAGS"><envar>$F03FLAGS</envar></link> because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in <link linkend="cv-F03PATH"><envar>$F03PATH</envar></link> will be looked-up relative to the SConscript
directory when they are used in a command. To force
<command>scons</command>
to look-up a directory relative to the root of the source tree use #:
You only need to set <link linkend="cv-F03PATH"><envar>$F03PATH</envar></link> if you need to define a specific
include path for Fortran 03 files.
You should normally set the <link linkend="cv-FORTRANPATH"><envar>$FORTRANPATH</envar></link> variable,
which specifies the include path
for the default Fortran compiler
for all Fortran versions.
</para>

<example_commands>
env = Environment(F03PATH='#/include')
</example_commands>

<para>
The directory look-up can also be forced using the
<function>Dir</function>()
function:
</para>

<example_commands>
include = Dir('include')
env = Environment(F03PATH=include)
</example_commands>

<para>
The directory list will be added to command lines
through the automatically-generated
<link linkend="cv-_F03INCFLAGS"><envar>$_F03INCFLAGS</envar></link>
construction variable,
which is constructed by
appending the values of the
<link linkend="cv-INCPREFIX"><envar>$INCPREFIX</envar></link> and <link linkend="cv-INCSUFFIX"><envar>$INCSUFFIX</envar></link>
construction variables
to the beginning and end
of each directory in <link linkend="cv-F03PATH"><envar>$F03PATH</envar></link>.
Any command lines you define that need
the F03PATH directory list should
include <link linkend="cv-_F03INCFLAGS"><envar>$_F03INCFLAGS</envar></link>:
</para>

<example_commands>
env = Environment(F03COM="my_compiler $_F03INCFLAGS -c -o $TARGET $SOURCE")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F03PPCOM">
    <term>
      <envar>F03PPCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 03 source file to an object file
after first running the file through the C preprocessor.
Any options specified in the <link linkend="cv-F03FLAGS"><envar>$F03FLAGS</envar></link> and <link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
You only need to set <link linkend="cv-F03PPCOM"><envar>$F03PPCOM</envar></link> if you need to use a specific
C-preprocessor command line for Fortran 03 files.
You should normally set the <link linkend="cv-FORTRANPPCOM"><envar>$FORTRANPPCOM</envar></link> variable,
which specifies the default C-preprocessor command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F03PPCOMSTR">
    <term>
      <envar>F03PPCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 03 source file
is compiled to an object file
after first running the file through the C preprocessor.
If not set, then <link linkend="cv-F03PPCOM"><envar>$F03PPCOM</envar></link> or <link linkend="cv-FORTRANPPCOM"><envar>$FORTRANPPCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F03PPFILESUFFIXES">
    <term>
      <envar>F03PPFILESUFFIXES</envar>
    </term>
    <listitem><para>
The list of file extensions for which the compilation + preprocessor pass for
F03 dialect will be used. By default, this is empty
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F08">
    <term>
      <envar>F08</envar>
    </term>
    <listitem><para>
The Fortran 08 compiler.
You should normally set the <link linkend="cv-FORTRAN"><envar>$FORTRAN</envar></link> variable,
which specifies the default Fortran compiler
for all Fortran versions.
You only need to set <link linkend="cv-F08"><envar>$F08</envar></link> if you need to use a specific compiler
or compiler version for Fortran 08 files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F08COM">
    <term>
      <envar>F08COM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 08 source file to an object file.
You only need to set <link linkend="cv-F08COM"><envar>$F08COM</envar></link> if you need to use a specific
command line for Fortran 08 files.
You should normally set the <link linkend="cv-FORTRANCOM"><envar>$FORTRANCOM</envar></link> variable,
which specifies the default command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F08COMSTR">
    <term>
      <envar>F08COMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 08 source file
is compiled to an object file.
If not set, then <link linkend="cv-F08COM"><envar>$F08COM</envar></link> or <link linkend="cv-FORTRANCOM"><envar>$FORTRANCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F08FILESUFFIXES">
    <term>
      <envar>F08FILESUFFIXES</envar>
    </term>
    <listitem><para>
The list of file extensions for which the F08 dialect will be used. By
default, this is ['.f08']
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F08FLAGS">
    <term>
      <envar>F08FLAGS</envar>
    </term>
    <listitem><para>
General user-specified options that are passed to the Fortran 08 compiler.
Note that this variable does
<emphasis>not</emphasis>
contain
<option>-I</option>
(or similar) include search path options
that scons generates automatically from <link linkend="cv-F08PATH"><envar>$F08PATH</envar></link>.
See
<link linkend="cv-_F08INCFLAGS"><envar>$_F08INCFLAGS</envar></link>
below,
for the variable that expands to those options.
You only need to set <link linkend="cv-F08FLAGS"><envar>$F08FLAGS</envar></link> if you need to define specific
user options for Fortran 08 files.
You should normally set the <link linkend="cv-FORTRANFLAGS"><envar>$FORTRANFLAGS</envar></link> variable,
which specifies the user-specified options
passed to the default Fortran compiler
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_F08INCFLAGS">
    <term>
      <envar>_F08INCFLAGS</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the Fortran 08 compiler command-line options
for specifying directories to be searched for include files.
The value of <link linkend="cv-_F08INCFLAGS"><envar>$_F08INCFLAGS</envar></link> is created
by appending <link linkend="cv-INCPREFIX"><envar>$INCPREFIX</envar></link> and <link linkend="cv-INCSUFFIX"><envar>$INCSUFFIX</envar></link>
to the beginning and end
of each directory in <link linkend="cv-F08PATH"><envar>$F08PATH</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F08PATH">
    <term>
      <envar>F08PATH</envar>
    </term>
    <listitem><para>
The list of directories that the Fortran 08 compiler will search for include
directories. The implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in <link linkend="cv-F08FLAGS"><envar>$F08FLAGS</envar></link> because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in <link linkend="cv-F08PATH"><envar>$F08PATH</envar></link> will be looked-up relative to the SConscript
directory when they are used in a command. To force
<command>scons</command>
to look-up a directory relative to the root of the source tree use #:
You only need to set <link linkend="cv-F08PATH"><envar>$F08PATH</envar></link> if you need to define a specific
include path for Fortran 08 files.
You should normally set the <link linkend="cv-FORTRANPATH"><envar>$FORTRANPATH</envar></link> variable,
which specifies the include path
for the default Fortran compiler
for all Fortran versions.
</para>

<example_commands>
env = Environment(F08PATH='#/include')
</example_commands>

<para>
The directory look-up can also be forced using the
<function>Dir</function>()
function:
</para>

<example_commands>
include = Dir('include')
env = Environment(F08PATH=include)
</example_commands>

<para>
The directory list will be added to command lines
through the automatically-generated
<link linkend="cv-_F08INCFLAGS"><envar>$_F08INCFLAGS</envar></link>
construction variable,
which is constructed by
appending the values of the
<link linkend="cv-INCPREFIX"><envar>$INCPREFIX</envar></link> and <link linkend="cv-INCSUFFIX"><envar>$INCSUFFIX</envar></link>
construction variables
to the beginning and end
of each directory in <link linkend="cv-F08PATH"><envar>$F08PATH</envar></link>.
Any command lines you define that need
the F08PATH directory list should
include <link linkend="cv-_F08INCFLAGS"><envar>$_F08INCFLAGS</envar></link>:
</para>

<example_commands>
env = Environment(F08COM="my_compiler $_F08INCFLAGS -c -o $TARGET $SOURCE")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F08PPCOM">
    <term>
      <envar>F08PPCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 08 source file to an object file
after first running the file through the C preprocessor.
Any options specified in the <link linkend="cv-F08FLAGS"><envar>$F08FLAGS</envar></link> and <link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
You only need to set <link linkend="cv-F08PPCOM"><envar>$F08PPCOM</envar></link> if you need to use a specific
C-preprocessor command line for Fortran 08 files.
You should normally set the <link linkend="cv-FORTRANPPCOM"><envar>$FORTRANPPCOM</envar></link> variable,
which specifies the default C-preprocessor command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F08PPCOMSTR">
    <term>
      <envar>F08PPCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 08 source file
is compiled to an object file
after first running the file through the C preprocessor.
If not set, then <link linkend="cv-F08PPCOM"><envar>$F08PPCOM</envar></link> or <link linkend="cv-FORTRANPPCOM"><envar>$FORTRANPPCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F08PPFILESUFFIXES">
    <term>
      <envar>F08PPFILESUFFIXES</envar>
    </term>
    <listitem><para>
The list of file extensions for which the compilation + preprocessor pass for
F08 dialect will be used. By default, this is empty
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F77">
    <term>
      <envar>F77</envar>
    </term>
    <listitem><para>
The Fortran 77 compiler.
You should normally set the <link linkend="cv-FORTRAN"><envar>$FORTRAN</envar></link> variable,
which specifies the default Fortran compiler
for all Fortran versions.
You only need to set <link linkend="cv-F77"><envar>$F77</envar></link> if you need to use a specific compiler
or compiler version for Fortran 77 files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F77COM">
    <term>
      <envar>F77COM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 77 source file to an object file.
You only need to set <link linkend="cv-F77COM"><envar>$F77COM</envar></link> if you need to use a specific
command line for Fortran 77 files.
You should normally set the <link linkend="cv-FORTRANCOM"><envar>$FORTRANCOM</envar></link> variable,
which specifies the default command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F77COMSTR">
    <term>
      <envar>F77COMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 77 source file
is compiled to an object file.
If not set, then <link linkend="cv-F77COM"><envar>$F77COM</envar></link> or <link linkend="cv-FORTRANCOM"><envar>$FORTRANCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F77FILESUFFIXES">
    <term>
      <envar>F77FILESUFFIXES</envar>
    </term>
    <listitem><para>
The list of file extensions for which the F77 dialect will be used. By
default, this is ['.f77']
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F77FLAGS">
    <term>
      <envar>F77FLAGS</envar>
    </term>
    <listitem><para>
General user-specified options that are passed to the Fortran 77 compiler.
Note that this variable does
<emphasis>not</emphasis>
contain
<option>-I</option>
(or similar) include search path options
that scons generates automatically from <link linkend="cv-F77PATH"><envar>$F77PATH</envar></link>.
See
<link linkend="cv-_F77INCFLAGS"><envar>$_F77INCFLAGS</envar></link>
below,
for the variable that expands to those options.
You only need to set <link linkend="cv-F77FLAGS"><envar>$F77FLAGS</envar></link> if you need to define specific
user options for Fortran 77 files.
You should normally set the <link linkend="cv-FORTRANFLAGS"><envar>$FORTRANFLAGS</envar></link> variable,
which specifies the user-specified options
passed to the default Fortran compiler
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_F77INCFLAGS">
    <term>
      <envar>_F77INCFLAGS</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the Fortran 77 compiler command-line options
for specifying directories to be searched for include files.
The value of <link linkend="cv-_F77INCFLAGS"><envar>$_F77INCFLAGS</envar></link> is created
by appending <link linkend="cv-INCPREFIX"><envar>$INCPREFIX</envar></link> and <link linkend="cv-INCSUFFIX"><envar>$INCSUFFIX</envar></link>
to the beginning and end
of each directory in <link linkend="cv-F77PATH"><envar>$F77PATH</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F77PATH">
    <term>
      <envar>F77PATH</envar>
    </term>
    <listitem><para>
The list of directories that the Fortran 77 compiler will search for include
directories. The implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in <link linkend="cv-F77FLAGS"><envar>$F77FLAGS</envar></link> because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in <link linkend="cv-F77PATH"><envar>$F77PATH</envar></link> will be looked-up relative to the SConscript
directory when they are used in a command. To force
<command>scons</command>
to look-up a directory relative to the root of the source tree use #:
You only need to set <link linkend="cv-F77PATH"><envar>$F77PATH</envar></link> if you need to define a specific
include path for Fortran 77 files.
You should normally set the <link linkend="cv-FORTRANPATH"><envar>$FORTRANPATH</envar></link> variable,
which specifies the include path
for the default Fortran compiler
for all Fortran versions.
</para>

<example_commands>
env = Environment(F77PATH='#/include')
</example_commands>

<para>
The directory look-up can also be forced using the
<function>Dir</function>()
function:
</para>

<example_commands>
include = Dir('include')
env = Environment(F77PATH=include)
</example_commands>

<para>
The directory list will be added to command lines
through the automatically-generated
<link linkend="cv-_F77INCFLAGS"><envar>$_F77INCFLAGS</envar></link>
construction variable,
which is constructed by
appending the values of the
<link linkend="cv-INCPREFIX"><envar>$INCPREFIX</envar></link> and <link linkend="cv-INCSUFFIX"><envar>$INCSUFFIX</envar></link>
construction variables
to the beginning and end
of each directory in <link linkend="cv-F77PATH"><envar>$F77PATH</envar></link>.
Any command lines you define that need
the F77PATH directory list should
include <link linkend="cv-_F77INCFLAGS"><envar>$_F77INCFLAGS</envar></link>:
</para>

<example_commands>
env = Environment(F77COM="my_compiler $_F77INCFLAGS -c -o $TARGET $SOURCE")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F77PPCOM">
    <term>
      <envar>F77PPCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 77 source file to an object file
after first running the file through the C preprocessor.
Any options specified in the <link linkend="cv-F77FLAGS"><envar>$F77FLAGS</envar></link> and <link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
You only need to set <link linkend="cv-F77PPCOM"><envar>$F77PPCOM</envar></link> if you need to use a specific
C-preprocessor command line for Fortran 77 files.
You should normally set the <link linkend="cv-FORTRANPPCOM"><envar>$FORTRANPPCOM</envar></link> variable,
which specifies the default C-preprocessor command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F77PPCOMSTR">
    <term>
      <envar>F77PPCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 77 source file
is compiled to an object file
after first running the file through the C preprocessor.
If not set, then <link linkend="cv-F77PPCOM"><envar>$F77PPCOM</envar></link> or <link linkend="cv-FORTRANPPCOM"><envar>$FORTRANPPCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F77PPFILESUFFIXES">
    <term>
      <envar>F77PPFILESUFFIXES</envar>
    </term>
    <listitem><para>
The list of file extensions for which the compilation + preprocessor pass for
F77 dialect will be used. By default, this is empty
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F90">
    <term>
      <envar>F90</envar>
    </term>
    <listitem><para>
The Fortran 90 compiler.
You should normally set the <link linkend="cv-FORTRAN"><envar>$FORTRAN</envar></link> variable,
which specifies the default Fortran compiler
for all Fortran versions.
You only need to set <link linkend="cv-F90"><envar>$F90</envar></link> if you need to use a specific compiler
or compiler version for Fortran 90 files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F90COM">
    <term>
      <envar>F90COM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 90 source file to an object file.
You only need to set <link linkend="cv-F90COM"><envar>$F90COM</envar></link> if you need to use a specific
command line for Fortran 90 files.
You should normally set the <link linkend="cv-FORTRANCOM"><envar>$FORTRANCOM</envar></link> variable,
which specifies the default command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F90COMSTR">
    <term>
      <envar>F90COMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 90 source file
is compiled to an object file.
If not set, then <link linkend="cv-F90COM"><envar>$F90COM</envar></link> or <link linkend="cv-FORTRANCOM"><envar>$FORTRANCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F90FILESUFFIXES">
    <term>
      <envar>F90FILESUFFIXES</envar>
    </term>
    <listitem><para>
The list of file extensions for which the F90 dialect will be used. By
default, this is ['.f90']
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F90FLAGS">
    <term>
      <envar>F90FLAGS</envar>
    </term>
    <listitem><para>
General user-specified options that are passed to the Fortran 90 compiler.
Note that this variable does
<emphasis>not</emphasis>
contain
<option>-I</option>
(or similar) include search path options
that scons generates automatically from <link linkend="cv-F90PATH"><envar>$F90PATH</envar></link>.
See
<link linkend="cv-_F90INCFLAGS"><envar>$_F90INCFLAGS</envar></link>
below,
for the variable that expands to those options.
You only need to set <link linkend="cv-F90FLAGS"><envar>$F90FLAGS</envar></link> if you need to define specific
user options for Fortran 90 files.
You should normally set the <link linkend="cv-FORTRANFLAGS"><envar>$FORTRANFLAGS</envar></link> variable,
which specifies the user-specified options
passed to the default Fortran compiler
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_F90INCFLAGS">
    <term>
      <envar>_F90INCFLAGS</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the Fortran 90 compiler command-line options
for specifying directories to be searched for include files.
The value of <link linkend="cv-_F90INCFLAGS"><envar>$_F90INCFLAGS</envar></link> is created
by appending <link linkend="cv-INCPREFIX"><envar>$INCPREFIX</envar></link> and <link linkend="cv-INCSUFFIX"><envar>$INCSUFFIX</envar></link>
to the beginning and end
of each directory in <link linkend="cv-F90PATH"><envar>$F90PATH</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F90PATH">
    <term>
      <envar>F90PATH</envar>
    </term>
    <listitem><para>
The list of directories that the Fortran 90 compiler will search for include
directories. The implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in <link linkend="cv-F90FLAGS"><envar>$F90FLAGS</envar></link> because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in <link linkend="cv-F90PATH"><envar>$F90PATH</envar></link> will be looked-up relative to the SConscript
directory when they are used in a command. To force
<command>scons</command>
to look-up a directory relative to the root of the source tree use #:
You only need to set <link linkend="cv-F90PATH"><envar>$F90PATH</envar></link> if you need to define a specific
include path for Fortran 90 files.
You should normally set the <link linkend="cv-FORTRANPATH"><envar>$FORTRANPATH</envar></link> variable,
which specifies the include path
for the default Fortran compiler
for all Fortran versions.
</para>

<example_commands>
env = Environment(F90PATH='#/include')
</example_commands>

<para>
The directory look-up can also be forced using the
<function>Dir</function>()
function:
</para>

<example_commands>
include = Dir('include')
env = Environment(F90PATH=include)
</example_commands>

<para>
The directory list will be added to command lines
through the automatically-generated
<link linkend="cv-_F90INCFLAGS"><envar>$_F90INCFLAGS</envar></link>
construction variable,
which is constructed by
appending the values of the
<link linkend="cv-INCPREFIX"><envar>$INCPREFIX</envar></link> and <link linkend="cv-INCSUFFIX"><envar>$INCSUFFIX</envar></link>
construction variables
to the beginning and end
of each directory in <link linkend="cv-F90PATH"><envar>$F90PATH</envar></link>.
Any command lines you define that need
the F90PATH directory list should
include <link linkend="cv-_F90INCFLAGS"><envar>$_F90INCFLAGS</envar></link>:
</para>

<example_commands>
env = Environment(F90COM="my_compiler $_F90INCFLAGS -c -o $TARGET $SOURCE")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F90PPCOM">
    <term>
      <envar>F90PPCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 90 source file to an object file
after first running the file through the C preprocessor.
Any options specified in the <link linkend="cv-F90FLAGS"><envar>$F90FLAGS</envar></link> and <link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
You only need to set <link linkend="cv-F90PPCOM"><envar>$F90PPCOM</envar></link> if you need to use a specific
C-preprocessor command line for Fortran 90 files.
You should normally set the <link linkend="cv-FORTRANPPCOM"><envar>$FORTRANPPCOM</envar></link> variable,
which specifies the default C-preprocessor command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F90PPCOMSTR">
    <term>
      <envar>F90PPCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 90 source file
is compiled after first running the file through the C preprocessor.
If not set, then <link linkend="cv-F90PPCOM"><envar>$F90PPCOM</envar></link> or <link linkend="cv-FORTRANPPCOM"><envar>$FORTRANPPCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F90PPFILESUFFIXES">
    <term>
      <envar>F90PPFILESUFFIXES</envar>
    </term>
    <listitem><para>
The list of file extensions for which the compilation + preprocessor pass for
F90 dialect will be used. By default, this is empty
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F95">
    <term>
      <envar>F95</envar>
    </term>
    <listitem><para>
The Fortran 95 compiler.
You should normally set the <link linkend="cv-FORTRAN"><envar>$FORTRAN</envar></link> variable,
which specifies the default Fortran compiler
for all Fortran versions.
You only need to set <link linkend="cv-F95"><envar>$F95</envar></link> if you need to use a specific compiler
or compiler version for Fortran 95 files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F95COM">
    <term>
      <envar>F95COM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 95 source file to an object file.
You only need to set <link linkend="cv-F95COM"><envar>$F95COM</envar></link> if you need to use a specific
command line for Fortran 95 files.
You should normally set the <link linkend="cv-FORTRANCOM"><envar>$FORTRANCOM</envar></link> variable,
which specifies the default command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F95COMSTR">
    <term>
      <envar>F95COMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 95 source file
is compiled to an object file.
If not set, then <link linkend="cv-F95COM"><envar>$F95COM</envar></link> or <link linkend="cv-FORTRANCOM"><envar>$FORTRANCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F95FILESUFFIXES">
    <term>
      <envar>F95FILESUFFIXES</envar>
    </term>
    <listitem><para>
The list of file extensions for which the F95 dialect will be used. By
default, this is ['.f95']
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F95FLAGS">
    <term>
      <envar>F95FLAGS</envar>
    </term>
    <listitem><para>
General user-specified options that are passed to the Fortran 95 compiler.
Note that this variable does
<emphasis>not</emphasis>
contain
<option>-I</option>
(or similar) include search path options
that scons generates automatically from <link linkend="cv-F95PATH"><envar>$F95PATH</envar></link>.
See
<link linkend="cv-_F95INCFLAGS"><envar>$_F95INCFLAGS</envar></link>
below,
for the variable that expands to those options.
You only need to set <link linkend="cv-F95FLAGS"><envar>$F95FLAGS</envar></link> if you need to define specific
user options for Fortran 95 files.
You should normally set the <link linkend="cv-FORTRANFLAGS"><envar>$FORTRANFLAGS</envar></link> variable,
which specifies the user-specified options
passed to the default Fortran compiler
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_F95INCFLAGS">
    <term>
      <envar>_F95INCFLAGS</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the Fortran 95 compiler command-line options
for specifying directories to be searched for include files.
The value of <link linkend="cv-_F95INCFLAGS"><envar>$_F95INCFLAGS</envar></link> is created
by appending <link linkend="cv-INCPREFIX"><envar>$INCPREFIX</envar></link> and <link linkend="cv-INCSUFFIX"><envar>$INCSUFFIX</envar></link>
to the beginning and end
of each directory in <link linkend="cv-F95PATH"><envar>$F95PATH</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F95PATH">
    <term>
      <envar>F95PATH</envar>
    </term>
    <listitem><para>
The list of directories that the Fortran 95 compiler will search for include
directories. The implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in <link linkend="cv-F95FLAGS"><envar>$F95FLAGS</envar></link> because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in <link linkend="cv-F95PATH"><envar>$F95PATH</envar></link> will be looked-up relative to the SConscript
directory when they are used in a command. To force
<command>scons</command>
to look-up a directory relative to the root of the source tree use #:
You only need to set <link linkend="cv-F95PATH"><envar>$F95PATH</envar></link> if you need to define a specific
include path for Fortran 95 files.
You should normally set the <link linkend="cv-FORTRANPATH"><envar>$FORTRANPATH</envar></link> variable,
which specifies the include path
for the default Fortran compiler
for all Fortran versions.
</para>

<example_commands>
env = Environment(F95PATH='#/include')
</example_commands>

<para>
The directory look-up can also be forced using the
<function>Dir</function>()
function:
</para>

<example_commands>
include = Dir('include')
env = Environment(F95PATH=include)
</example_commands>

<para>
The directory list will be added to command lines
through the automatically-generated
<link linkend="cv-_F95INCFLAGS"><envar>$_F95INCFLAGS</envar></link>
construction variable,
which is constructed by
appending the values of the
<link linkend="cv-INCPREFIX"><envar>$INCPREFIX</envar></link> and <link linkend="cv-INCSUFFIX"><envar>$INCSUFFIX</envar></link>
construction variables
to the beginning and end
of each directory in <link linkend="cv-F95PATH"><envar>$F95PATH</envar></link>.
Any command lines you define that need
the F95PATH directory list should
include <link linkend="cv-_F95INCFLAGS"><envar>$_F95INCFLAGS</envar></link>:
</para>

<example_commands>
env = Environment(F95COM="my_compiler $_F95INCFLAGS -c -o $TARGET $SOURCE")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F95PPCOM">
    <term>
      <envar>F95PPCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 95 source file to an object file
after first running the file through the C preprocessor.
Any options specified in the <link linkend="cv-F95FLAGS"><envar>$F95FLAGS</envar></link> and <link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
You only need to set <link linkend="cv-F95PPCOM"><envar>$F95PPCOM</envar></link> if you need to use a specific
C-preprocessor command line for Fortran 95 files.
You should normally set the <link linkend="cv-FORTRANPPCOM"><envar>$FORTRANPPCOM</envar></link> variable,
which specifies the default C-preprocessor command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F95PPCOMSTR">
    <term>
      <envar>F95PPCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 95 source file
is compiled to an object file
after first running the file through the C preprocessor.
If not set, then <link linkend="cv-F95PPCOM"><envar>$F95PPCOM</envar></link> or <link linkend="cv-FORTRANPPCOM"><envar>$FORTRANPPCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-F95PPFILESUFFIXES">
    <term>
      <envar>F95PPFILESUFFIXES</envar>
    </term>
    <listitem><para>
The list of file extensions for which the compilation + preprocessor pass for
F95 dialect will be used. By default, this is empty
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-File">
    <term>
      <envar>File</envar>
    </term>
    <listitem><para>
A function that converts a string into a File instance relative to the
target being built.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRAN">
    <term>
      <envar>FORTRAN</envar>
    </term>
    <listitem><para>
The default Fortran compiler
for all versions of Fortran.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANCOM">
    <term>
      <envar>FORTRANCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran source file to an object file.
By default, any options specified
in the <link linkend="cv-FORTRANFLAGS"><envar>$FORTRANFLAGS</envar></link>,
<link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link>,
<link linkend="cv-_CPPDEFFLAGS"><envar>$_CPPDEFFLAGS</envar></link>,
<link linkend="cv-_FORTRANMODFLAG"><envar>$_FORTRANMODFLAG</envar></link>, and
<link linkend="cv-_FORTRANINCFLAGS"><envar>$_FORTRANINCFLAGS</envar></link> construction variables
are included on this command line.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANCOMSTR">
    <term>
      <envar>FORTRANCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran source file
is compiled to an object file.
If not set, then <link linkend="cv-FORTRANCOM"><envar>$FORTRANCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANFILESUFFIXES">
    <term>
      <envar>FORTRANFILESUFFIXES</envar>
    </term>
    <listitem><para>
The list of file extensions for which the FORTRAN dialect will be used. By
default, this is ['.f', '.for', '.ftn']
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANFLAGS">
    <term>
      <envar>FORTRANFLAGS</envar>
    </term>
    <listitem><para>
General user-specified options that are passed to the Fortran compiler.
Note that this variable does
<emphasis>not</emphasis>
contain
<option>-I</option>
(or similar) include or module search path options
that scons generates automatically from <link linkend="cv-FORTRANPATH"><envar>$FORTRANPATH</envar></link>.
See
<link linkend="cv-_FORTRANINCFLAGS"><envar>$_FORTRANINCFLAGS</envar></link> and <link linkend="cv-_FORTRANMODFLAG"><envar>$_FORTRANMODFLAG</envar></link>,
below,
for the variables that expand those options.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_FORTRANINCFLAGS">
    <term>
      <envar>_FORTRANINCFLAGS</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the Fortran compiler command-line options
for specifying directories to be searched for include
files and module files.
The value of <link linkend="cv-_FORTRANINCFLAGS"><envar>$_FORTRANINCFLAGS</envar></link> is created
by respectively prepending and appending
<link linkend="cv-INCPREFIX"><envar>$INCPREFIX</envar></link> and <link linkend="cv-INCSUFFIX"><envar>$INCSUFFIX</envar></link>
to the beginning and end
of each directory in <link linkend="cv-FORTRANPATH"><envar>$FORTRANPATH</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANMODDIR">
    <term>
      <envar>FORTRANMODDIR</envar>
    </term>
    <listitem><para>
Directory location where the Fortran compiler should place
any module files it generates.  This variable is empty, by default. Some
Fortran compilers will internally append this directory in the search path
for module files, as well.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANMODDIRPREFIX">
    <term>
      <envar>FORTRANMODDIRPREFIX</envar>
    </term>
    <listitem><para>
The prefix used to specify a module directory on the Fortran compiler command
line.
This will be prepended to the beginning of the directory
in the <link linkend="cv-FORTRANMODDIR"><envar>$FORTRANMODDIR</envar></link> construction variables
when the <link linkend="cv-_FORTRANMODFLAG"><envar>$_FORTRANMODFLAG</envar></link> variables is automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANMODDIRSUFFIX">
    <term>
      <envar>FORTRANMODDIRSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used to specify a module directory on the Fortran compiler command
line.
This will be appended to the end of the directory
in the <link linkend="cv-FORTRANMODDIR"><envar>$FORTRANMODDIR</envar></link> construction variables
when the <link linkend="cv-_FORTRANMODFLAG"><envar>$_FORTRANMODFLAG</envar></link> variables is automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_FORTRANMODFLAG">
    <term>
      <envar>_FORTRANMODFLAG</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the Fortran compiler command-line option
for specifying the directory location where the Fortran
compiler should place any module files that happen to get
generated during compilation.
The value of <link linkend="cv-_FORTRANMODFLAG"><envar>$_FORTRANMODFLAG</envar></link> is created
by respectively prepending and appending
<link linkend="cv-FORTRANMODDIRPREFIX"><envar>$FORTRANMODDIRPREFIX</envar></link> and <link linkend="cv-FORTRANMODDIRSUFFIX"><envar>$FORTRANMODDIRSUFFIX</envar></link>
to the beginning and end of the directory in <link linkend="cv-FORTRANMODDIR"><envar>$FORTRANMODDIR</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANMODPREFIX">
    <term>
      <envar>FORTRANMODPREFIX</envar>
    </term>
    <listitem><para>
The module file prefix used by the Fortran compiler.  SCons assumes that
the Fortran compiler follows the quasi-standard naming convention for
module files of
<filename>module_name.mod</filename>.
As a result, this variable is left empty, by default.  For situations in
which the compiler does not necessarily follow the normal convention,
the user may use this variable.  Its value will be appended to every
module file name as scons attempts to resolve dependencies.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANMODSUFFIX">
    <term>
      <envar>FORTRANMODSUFFIX</envar>
    </term>
    <listitem><para>
The module file suffix used by the Fortran compiler.  SCons assumes that
the Fortran compiler follows the quasi-standard naming convention for
module files of
<filename>module_name.mod</filename>.
As a result, this variable is set to ".mod", by default.  For situations
in which the compiler does not necessarily follow the normal convention,
the user may use this variable.  Its value will be appended to every
module file name as scons attempts to resolve dependencies.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANPATH">
    <term>
      <envar>FORTRANPATH</envar>
    </term>
    <listitem><para>
The list of directories that the Fortran compiler will search for
include files and (for some compilers) module files. The Fortran implicit
dependency scanner will search these directories for include files (but
not module files since they are autogenerated and, as such, may not
actually exist at the time the scan takes place). Don't explicitly put
include directory arguments in FORTRANFLAGS because the result will be
non-portable and the directories will not be searched by the dependency
scanner. Note: directory names in FORTRANPATH will be looked-up relative
to the SConscript directory when they are used in a command. To force
<command>scons</command>
to look-up a directory relative to the root of the source tree use #:
</para>

<example_commands>
env = Environment(FORTRANPATH='#/include')
</example_commands>

<para>
The directory look-up can also be forced using the
<function>Dir</function>()
function:
</para>

<example_commands>
include = Dir('include')
env = Environment(FORTRANPATH=include)
</example_commands>

<para>
The directory list will be added to command lines
through the automatically-generated
<link linkend="cv-_FORTRANINCFLAGS"><envar>$_FORTRANINCFLAGS</envar></link>
construction variable,
which is constructed by
respectively prepending and appending the values of the
<link linkend="cv-INCPREFIX"><envar>$INCPREFIX</envar></link> and <link linkend="cv-INCSUFFIX"><envar>$INCSUFFIX</envar></link>
construction variables
to the beginning and end
of each directory in <link linkend="cv-FORTRANPATH"><envar>$FORTRANPATH</envar></link>.
Any command lines you define that need
the FORTRANPATH directory list should
include <link linkend="cv-_FORTRANINCFLAGS"><envar>$_FORTRANINCFLAGS</envar></link>:
</para>

<example_commands>
env = Environment(FORTRANCOM="my_compiler $_FORTRANINCFLAGS -c -o $TARGET $SOURCE")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANPPCOM">
    <term>
      <envar>FORTRANPPCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran source file to an object file
after first running the file through the C preprocessor.
By default, any options specified in the <link linkend="cv-FORTRANFLAGS"><envar>$FORTRANFLAGS</envar></link>,
<link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link>,
<link linkend="cv-_CPPDEFFLAGS"><envar>$_CPPDEFFLAGS</envar></link>,
<link linkend="cv-_FORTRANMODFLAG"><envar>$_FORTRANMODFLAG</envar></link>, and
<link linkend="cv-_FORTRANINCFLAGS"><envar>$_FORTRANINCFLAGS</envar></link>
construction variables are included on this command line.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANPPCOMSTR">
    <term>
      <envar>FORTRANPPCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran source file
is compiled to an object file
after first running the file through the C preprocessor.
If not set, then <link linkend="cv-FORTRANPPCOM"><envar>$FORTRANPPCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANPPFILESUFFIXES">
    <term>
      <envar>FORTRANPPFILESUFFIXES</envar>
    </term>
    <listitem><para>
The list of file extensions for which the compilation + preprocessor pass for
FORTRAN dialect will be used. By default, this is ['.fpp', '.FPP']
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FORTRANSUFFIXES">
    <term>
      <envar>FORTRANSUFFIXES</envar>
    </term>
    <listitem><para>
The list of suffixes of files that will be scanned
for Fortran implicit dependencies
(INCLUDE lines and USE statements).
The default list is:
</para>

<example_commands>
[".f", ".F", ".for", ".FOR", ".ftn", ".FTN", ".fpp", ".FPP",
".f77", ".F77", ".f90", ".F90", ".f95", ".F95"]
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-FRAMEWORKPATH">
    <term>
      <envar>FRAMEWORKPATH</envar>
    </term>
    <listitem><para>
                On Mac OS X with gcc,
                a list containing the paths to search for frameworks.
                Used by the compiler to find framework-style includes like
                #include &lt;Fmwk/Header.h&gt;.
                Used by the linker to find user-specified frameworks when linking (see
                <link linkend="cv-FRAMEWORKS"><envar>$FRAMEWORKS</envar></link>).
                For example:
            </para>

            <example_commands>
env.AppendUnique(FRAMEWORKPATH='#myframeworkdir')
            </example_commands>

            <para>
                will add
            </para>

            <example_commands>
... -Fmyframeworkdir
            </example_commands>

            <para>
                to the compiler and linker command lines.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-_FRAMEWORKPATH">
    <term>
      <envar>_FRAMEWORKPATH</envar>
    </term>
    <listitem><para>
                On Mac OS X with gcc, an automatically-generated construction variable
                containing the linker command-line options corresponding to
                <link linkend="cv-FRAMEWORKPATH"><envar>$FRAMEWORKPATH</envar></link>.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-FRAMEWORKPATHPREFIX">
    <term>
      <envar>FRAMEWORKPATHPREFIX</envar>
    </term>
    <listitem><para>
                On Mac OS X with gcc, the prefix to be used for the FRAMEWORKPATH entries.
                (see <link linkend="cv-FRAMEWORKPATH"><envar>$FRAMEWORKPATH</envar></link>).
                The default value is
                <option>-F</option>.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-FRAMEWORKPREFIX">
    <term>
      <envar>FRAMEWORKPREFIX</envar>
    </term>
    <listitem><para>
                On Mac OS X with gcc,
                the prefix to be used for linking in frameworks
                (see <link linkend="cv-FRAMEWORKS"><envar>$FRAMEWORKS</envar></link>).
                The default value is
                <option>-framework</option>.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-FRAMEWORKS">
    <term>
      <envar>FRAMEWORKS</envar>
    </term>
    <listitem><para>
                On Mac OS X with gcc, a list of the framework names to be linked into a
                program or shared library or bundle.
                The default value is the empty list.
                For example:
            </para>

            <example_commands>
env.AppendUnique(FRAMEWORKS=Split('System Cocoa SystemConfiguration'))
            </example_commands>

        </listitem>
  </varlistentry>
  <varlistentry id="cv-_FRAMEWORKS">
    <term>
      <envar>_FRAMEWORKS</envar>
    </term>
    <listitem><para>
                On Mac OS X with gcc,
                an automatically-generated construction variable
                containing the linker command-line options
                for linking with FRAMEWORKS.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-FRAMEWORKSFLAGS">
    <term>
      <envar>FRAMEWORKSFLAGS</envar>
    </term>
    <listitem><para>
                On Mac OS X with gcc,
                general user-supplied frameworks options to be added at
                the end of a command
                line building a loadable module.
                (This has been largely superseded by
                the <link linkend="cv-FRAMEWORKPATH"><envar>$FRAMEWORKPATH</envar></link>, <link linkend="cv-FRAMEWORKPATHPREFIX"><envar>$FRAMEWORKPATHPREFIX</envar></link>,
                <link linkend="cv-FRAMEWORKPREFIX"><envar>$FRAMEWORKPREFIX</envar></link> and <link linkend="cv-FRAMEWORKS"><envar>$FRAMEWORKS</envar></link> variables
                described above.)
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-GS">
    <term>
      <envar>GS</envar>
    </term>
    <listitem><para>
The Ghostscript program used, e.g. to convert PostScript to PDF files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-GSCOM">
    <term>
      <envar>GSCOM</envar>
    </term>
    <listitem><para>
The full Ghostscript command line used for the conversion process. Its default
value is <quote><literal>$GS $GSFLAGS -sOutputFile=$TARGET $SOURCES</literal></quote>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-GSCOMSTR">
    <term>
      <envar>GSCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when
Ghostscript is called for the conversion process.
If this is not set (the default), then <link linkend="cv-GSCOM"><envar>$GSCOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-GSFLAGS">
    <term>
      <envar>GSFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the Ghostscript program,
when converting PostScript to PDF files for example. Its default value
is <quote><literal>-dNOPAUSE -dBATCH -sDEVICE=pdfwrite</literal></quote>
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-HOST_ARCH">
    <term>
      <envar>HOST_ARCH</envar>
    </term>
    <listitem><para>
        The name of the host hardware architecture used to create the Environment.
        If a platform is specified when creating the Environment, then
        that Platform's logic will handle setting this value.
        This value is immutable, and should not be changed by the user after
        the Environment is initialized.
        Currently only set for Win32.
</para>
    <para>
Sets the host architecture for Visual Studio compiler. If not set,
default to the detected host architecture: note that this may depend
on the python you are using.
This variable must be passed as an argument to the Environment()
constructor; setting it later has no effect. 
</para>

<para>
Valid values are the same as for <envar>$TARGET_ARCH</envar>.
</para>

<para>
This is currently only used on Windows, but in the future it will be
used on other OSes as well.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-HOST_OS">
    <term>
      <envar>HOST_OS</envar>
    </term>
    <listitem><para>
        The name of the host operating system used to create the Environment.
        If a platform is specified when creating the Environment, then
        that Platform's logic will handle setting this value.
        This value is immutable, and should not be changed by the user after
        the Environment is initialized.
        Currently only set for Win32.
</para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-IDLSUFFIXES">
    <term>
      <envar>IDLSUFFIXES</envar>
    </term>
    <listitem><para>
The list of suffixes of files that will be scanned
for IDL implicit dependencies
(#include or import lines).
The default list is:
</para>

<example_commands>
[".idl", ".IDL"]
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-IMPLIBNOVERSIONSYMLINKS">
    <term>
      <envar>IMPLIBNOVERSIONSYMLINKS</envar>
    </term>
    <listitem><para>
Used to override <link linkend="cv-SHLIBNOVERSIONSYMLINKS"><envar>$SHLIBNOVERSIONSYMLINKS</envar></link>/<link linkend="cv-LDMODULENOVERSIONSYMLINKS"><envar>$LDMODULENOVERSIONSYMLINKS</envar></link> when 
creating versioned import library for a shared library/loadable module. If not defined,
then <link linkend="cv-SHLIBNOVERSIONSYMLINKS"><envar>$SHLIBNOVERSIONSYMLINKS</envar></link>/<link linkend="cv-LDMODULENOVERSIONSYMLINKS"><envar>$LDMODULENOVERSIONSYMLINKS</envar></link> is used to determine
whether to disable symlink generation or not.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-IMPLIBPREFIX">
    <term>
      <envar>IMPLIBPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for import library names. For example, cygwin uses import
libraries (<literal>libfoo.dll.a</literal>) in pair with dynamic libraries
(<literal>cygfoo.dll</literal>). The <link linkend="t-cyglink"><literal>cyglink</literal></link> linker sets
<link linkend="cv-IMPLIBPREFIX"><envar>$IMPLIBPREFIX</envar></link> to <literal>'lib'</literal> and <link linkend="cv-SHLIBPREFIX"><envar>$SHLIBPREFIX</envar></link>
to <literal>'cyg'</literal>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-IMPLIBSUFFIX">
    <term>
      <envar>IMPLIBSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for import library names. For example, cygwin uses import
libraries (<literal>libfoo.dll.a</literal>) in pair with dynamic libraries
(<literal>cygfoo.dll</literal>). The <link linkend="t-cyglink"><literal>cyglink</literal></link> linker sets
<link linkend="cv-IMPLIBSUFFIX"><envar>$IMPLIBSUFFIX</envar></link> to <literal>'.dll.a'</literal> and <link linkend="cv-SHLIBSUFFIX"><envar>$SHLIBSUFFIX</envar></link>
to <literal>'.dll'</literal>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-IMPLIBVERSION">
    <term>
      <envar>IMPLIBVERSION</envar>
    </term>
    <listitem><para>
Used to override <link linkend="cv-SHLIBVERSION"><envar>$SHLIBVERSION</envar></link>/<link linkend="cv-LDMODULEVERSION"><envar>$LDMODULEVERSION</envar></link> when
generating versioned import library for a shared library/loadable module. If
undefined, the <link linkend="cv-SHLIBVERSION"><envar>$SHLIBVERSION</envar></link>/<link linkend="cv-LDMODULEVERSION"><envar>$LDMODULEVERSION</envar></link> is used to
determine the version of versioned import library.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-IMPLICIT_COMMAND_DEPENDENCIES">
    <term>
      <envar>IMPLICIT_COMMAND_DEPENDENCIES</envar>
    </term>
    <listitem><para>
Controls whether or not SCons will
add implicit dependencies for the commands
executed to build targets.
</para>

<para>
By default, SCons will add
to each target
an implicit dependency on the command
represented by the first argument of any
command line it executes (which is typically
the command itself). By setting such
a dependency, <application>SCons</application> can determine that
a target should be rebuilt if the command changes,
such as when a compiler is upgraded to a new version.
The specific file for the dependency is
found by searching the
<varname>PATH</varname>
variable in the
<varname>ENV</varname> dictionary
in the <phrase>construction environment</phrase> used to execute the command.
The default is the same as
setting the <phrase>construction variable</phrase>
<envar>$IMPLICIT_COMMAND_DEPENDENCIES</envar>
to a True-like value (<quote>true</quote>,
<quote>yes</quote>,
or <quote>1</quote> - but not a number
greater than one, as that has a different meaning).
</para>

<para>
Action strings can be segmented by the
use of an AND operator, <literal>&amp;&amp;</literal>.
In a segemented string, each segment is a separate
<quote>command line</quote>, these are run
sequentially until one fails or the entire
sequence has been executed. If an
action string is segmented, then the selected
behavior of <envar>$IMPLICIT_COMMAND_DEPENDENCIES</envar>
is applied to each segment.
</para>

<para>
If <envar>$IMPLICIT_COMMAND_DEPENDENCIES</envar>
is set to a False-like value
(<quote>none</quote>,
<quote>false</quote>,
<quote>no</quote>,
<quote>0</quote>,
etc.),
then the implicit dependency will
not be added to the targets
built with that <phrase>construction environment</phrase>.
</para>

<para>
If <envar>$IMPLICIT_COMMAND_DEPENDENCIES</envar>
is set to <quote>2</quote> or higher,
then that number of arguments in the command line
will be scanned for relative or absolute paths.
If any are present, they will be added as
implicit dependencies to the targets built
with that <phrase>construction environment</phrase>.
The first argument in the command line will be
searched for using the <varname>PATH</varname>
variable in the <varname>ENV</varname> dictionary
in the <phrase>construction environment</phrase> used to execute the command.
The other arguments will only be found if they
are absolute paths or valid paths relative
to the working directory.
</para>

<para>
If <envar>$IMPLICIT_COMMAND_DEPENDENCIES</envar>
is set to <quote>all</quote>,
then all arguments in the command line will be
scanned for relative or absolute paths.
If any are present, they will be added as
implicit dependencies to the targets built
with that <phrase>construction environment</phrase>.
The first argument in the command line will be
searched for using the <varname>PATH</varname>
variable in the <varname>ENV</varname> dictionary
in the <phrase>construction environment</phrase> used to execute the command.
The other arguments will only be found if they
are absolute paths or valid paths relative
to the working directory.
</para>

<example_commands>
env = Environment(IMPLICIT_COMMAND_DEPENDENCIES=False)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-INCPREFIX">
    <term>
      <envar>INCPREFIX</envar>
    </term>
    <listitem><para>
The prefix used to specify an include directory on the C compiler command
line.
This will be prepended to the beginning of each directory
in the <envar>$CPPPATH</envar> and <envar>$FORTRANPATH</envar> construction variables
when the <envar>$_CPPINCFLAGS</envar> and <envar>$_FORTRANINCFLAGS</envar>
variables are automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-INCSUFFIX">
    <term>
      <envar>INCSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used to specify an include directory on the C compiler command
line.
This will be appended to the end of each directory
in the <envar>$CPPPATH</envar> and <envar>$FORTRANPATH</envar> construction variables
when the <envar>$_CPPINCFLAGS</envar> and <envar>$_FORTRANINCFLAGS</envar>
variables are automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-INSTALL">
    <term>
      <envar>INSTALL</envar>
    </term>
    <listitem><para>
A function to be called to install a file into a
destination file name.
The default function copies the file into the destination
(and sets the destination file's mode and permission bits
to match the source file's).
The function takes the following arguments:
</para>

<example_commands>
def install(dest, source, env):
</example_commands>

<para>
<varname>dest</varname>
is the path name of the destination file.
<varname>source</varname>
is the path name of the source file.
<varname>env</varname>
is the construction environment
(a dictionary of construction values)
in force for this file installation.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-INSTALLSTR">
    <term>
      <envar>INSTALLSTR</envar>
    </term>
    <listitem><para>
The string displayed when a file is
installed into a destination file name.
The default is:
</para>
<example_commands>
Install file: "$SOURCE" as "$TARGET"
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-INTEL_C_COMPILER_VERSION">
    <term>
      <envar>INTEL_C_COMPILER_VERSION</envar>
    </term>
    <listitem><para>
Set by the "intelc" Tool
to the major version number of the Intel C compiler
selected for use.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-JAR">
    <term>
      <envar>JAR</envar>
    </term>
    <listitem><para>
The Java archive tool.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-JARCHDIR">
    <term>
      <envar>JARCHDIR</envar>
    </term>
    <listitem><para>
The directory to which the Java archive tool should change
(using the
<option>-C</option>
option).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-JARCOM">
    <term>
      <envar>JARCOM</envar>
    </term>
    <listitem><para>
The command line used to call the Java archive tool.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-JARCOMSTR">
    <term>
      <envar>JARCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when the Java archive tool
is called
If this is not set, then <link linkend="cv-JARCOM"><envar>$JARCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(JARCOMSTR="JARchiving $SOURCES into $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-JARFLAGS">
    <term>
      <envar>JARFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the Java archive tool.
By default this is set to
<option>cf</option>
to create the necessary
<command>jar</command>
file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-JARSUFFIX">
    <term>
      <envar>JARSUFFIX</envar>
    </term>
    <listitem><para>
The suffix for Java archives:
<filename>.jar</filename>
by default.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-JAVABOOTCLASSPATH">
    <term>
      <envar>JAVABOOTCLASSPATH</envar>
    </term>
    <listitem><para>
                Specifies the list of directories that
                will be added to the
                <application>javac</application> command line
                via the <option>-bootclasspath</option> option.
                The individual directory names will be
                separated by the operating system's path separate character
                (<filename>:</filename> on UNIX/Linux/POSIX,
                <filename>;</filename>
                on Windows).
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-JAVAC">
    <term>
      <envar>JAVAC</envar>
    </term>
    <listitem><para>
                The Java compiler.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-JAVACCOM">
    <term>
      <envar>JAVACCOM</envar>
    </term>
    <listitem><para>
                The command line used to compile a directory tree containing
                Java source files to
                corresponding Java class files.
                Any options specified in the <link linkend="cv-JAVACFLAGS"><envar>$JAVACFLAGS</envar></link> construction variable
                are included on this command line.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-JAVACCOMSTR">
    <term>
      <envar>JAVACCOMSTR</envar>
    </term>
    <listitem><para>
                The string displayed when compiling
                a directory tree of Java source files to
                corresponding Java class files.
                If this is not set, then <link linkend="cv-JAVACCOM"><envar>$JAVACCOM</envar></link> (the command line) is displayed.
            </para>

            <example_commands>
env = Environment(JAVACCOMSTR="Compiling class files $TARGETS from $SOURCES")
            </example_commands>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-JAVACFLAGS">
    <term>
      <envar>JAVACFLAGS</envar>
    </term>
    <listitem><para>
                General options that are passed to the Java compiler.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-JAVACLASSDIR">
    <term>
      <envar>JAVACLASSDIR</envar>
    </term>
    <listitem><para>
                The directory in which Java class files may be found.
                This is stripped from the beginning of any Java .class
                file names supplied to the
                <literal>JavaH</literal>
                builder.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-JAVACLASSPATH">
    <term>
      <envar>JAVACLASSPATH</envar>
    </term>
    <listitem><para>
                Specifies the list of directories that
                will be searched for Java
                <filename>.class</filename>
                file.
                The directories in this list will be added to the
                <application>javac</application> and <application>javah</application> command lines
                via the <option>-classpath</option> option.
                The individual directory names will be
                separated by the operating system's path separate character
                (<filename>:</filename> on UNIX/Linux/POSIX,
                <filename>;</filename>
                on Windows).
            </para>

            <para>
                Note that this currently just adds the specified
                directory via the <option>-classpath</option> option.
                <application>SCons</application> does not currently search the
                <envar>$JAVACLASSPATH</envar> directories for dependency
                <filename>.class</filename>
                files.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-JAVACLASSSUFFIX">
    <term>
      <envar>JAVACLASSSUFFIX</envar>
    </term>
    <listitem><para>
                The suffix for Java class files;
                <filename>.class</filename>
                by default.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-JAVAH">
    <term>
      <envar>JAVAH</envar>
    </term>
    <listitem><para>
The Java generator for C header and stub files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-JAVAHCOM">
    <term>
      <envar>JAVAHCOM</envar>
    </term>
    <listitem><para>
The command line used to generate C header and stub files
from Java classes.
Any options specified in the <link linkend="cv-JAVAHFLAGS"><envar>$JAVAHFLAGS</envar></link> construction variable
are included on this command line.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-JAVAHCOMSTR">
    <term>
      <envar>JAVAHCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when C header and stub files
are generated from Java classes.
If this is not set, then <link linkend="cv-JAVAHCOM"><envar>$JAVAHCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(JAVAHCOMSTR="Generating header/stub file(s) $TARGETS from $SOURCES")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-JAVAHFLAGS">
    <term>
      <envar>JAVAHFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the C header and stub file generator
for Java classes.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-JAVAINCLUDES">
    <term>
      <envar>JAVAINCLUDES</envar>
    </term>
    <listitem><para>
                Include path for Java header files (such as jni.h)
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-JAVASOURCEPATH">
    <term>
      <envar>JAVASOURCEPATH</envar>
    </term>
    <listitem><para>
                Specifies the list of directories that
                will be searched for input
                <filename>.java</filename>
                file.
                The directories in this list will be added to the
                <application>javac</application> command line
                via the <option>-sourcepath</option> option.
                The individual directory names will be
                separated by the operating system's path separate character
                (<filename>:</filename> on UNIX/Linux/POSIX,
                <filename>;</filename>
                on Windows).
            </para>

            <para>
                Note that this currently just adds the specified
                directory via the <option>-sourcepath</option> option.
                <application>SCons</application> does not currently search the
                <envar>$JAVASOURCEPATH</envar> directories for dependency
                <filename>.java</filename>
                files.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-JAVASUFFIX">
    <term>
      <envar>JAVASUFFIX</envar>
    </term>
    <listitem><para>
                The suffix for Java files;
                <filename>.java</filename>
                by default.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-JAVAVERSION">
    <term>
      <envar>JAVAVERSION</envar>
    </term>
    <listitem><para>
                Specifies the Java version being used by the <function>Java</function> builder.
                This is <emphasis>not</emphasis> currently used to select one
                version of the Java compiler vs. another.
                Instead, you should set this to specify the version of Java
                supported by your <application>javac</application> compiler.
                The default is <literal>1.4</literal>.
            </para>

            <para>
                This is sometimes necessary because
                Java 1.5 changed the file names that are created
                for nested anonymous inner classes,
                which can cause a mismatch with the files
                that <application>SCons</application> expects will be generated by the <application>javac</application> compiler.
                Setting <envar>$JAVAVERSION</envar> to
                <literal>1.5</literal>
                (or <literal>1.6</literal>, as appropriate)
                can make <application>SCons</application> realize that a Java 1.5 or 1.6
                build is actually up to date.
            </para>
        </listitem>
  </varlistentry>
  <varlistentry id="cv-LATEX">
    <term>
      <envar>LATEX</envar>
    </term>
    <listitem><para>
The LaTeX structured formatter and typesetter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LATEXCOM">
    <term>
      <envar>LATEXCOM</envar>
    </term>
    <listitem><para>
The command line used to call the LaTeX structured formatter and typesetter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LATEXCOMSTR">
    <term>
      <envar>LATEXCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when calling
the LaTeX structured formatter and typesetter.
If this is not set, then <link linkend="cv-LATEXCOM"><envar>$LATEXCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(LATEXCOMSTR = "Building $TARGET from LaTeX input $SOURCES")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LATEXFLAGS">
    <term>
      <envar>LATEXFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the LaTeX structured formatter and typesetter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LATEXRETRIES">
    <term>
      <envar>LATEXRETRIES</envar>
    </term>
    <listitem><para>
The maximum number of times that LaTeX
will be re-run if the
<filename>.log</filename>
generated by the <link linkend="cv-LATEXCOM"><envar>$LATEXCOM</envar></link> command
indicates that there are undefined references.
The default is to try to resolve undefined references
by re-running LaTeX up to three times.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LATEXSUFFIXES">
    <term>
      <envar>LATEXSUFFIXES</envar>
    </term>
    <listitem><para>
The list of suffixes of files that will be scanned
for LaTeX implicit dependencies
(<literal>\include</literal> or <literal>\import</literal> files).
The default list is:
</para>

<example_commands>
[".tex", ".ltx", ".latex"]
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LDMODULE">
    <term>
      <envar>LDMODULE</envar>
    </term>
    <listitem><para>
The linker for building loadable modules.
By default, this is the same as <link linkend="cv-SHLINK"><envar>$SHLINK</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LDMODULECOM">
    <term>
      <envar>LDMODULECOM</envar>
    </term>
    <listitem><para>
The command line for building loadable modules.
On Mac OS X, this uses the <link linkend="cv-LDMODULE"><envar>$LDMODULE</envar></link>,
<link linkend="cv-LDMODULEFLAGS"><envar>$LDMODULEFLAGS</envar></link> and
<link linkend="cv-FRAMEWORKSFLAGS"><envar>$FRAMEWORKSFLAGS</envar></link> variables.
On other systems, this is the same as <link linkend="cv-SHLINK"><envar>$SHLINK</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LDMODULECOMSTR">
    <term>
      <envar>LDMODULECOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when building loadable modules.
If not set, then <link linkend="cv-LDMODULECOM"><envar>$LDMODULECOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LDMODULEEMITTER">
    <term>
      <envar>LDMODULEEMITTER</envar>
    </term>
    <listitem><para>
Contains the emitter specification for the
<link linkend="b-LoadableModule"><function>LoadableModule</function></link> builder.
The manpage section "Builder Objects" contains
general information on specifying emitters.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LDMODULEFLAGS">
    <term>
      <envar>LDMODULEFLAGS</envar>
    </term>
    <listitem><para>
General user options passed to the linker for building loadable modules.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LDMODULENOVERSIONSYMLINKS">
    <term>
      <envar>LDMODULENOVERSIONSYMLINKS</envar>
    </term>
    <listitem><para>
Instructs the <link linkend="b-LoadableModule"><function>LoadableModule</function></link> builder to not automatically create symlinks
for versioned modules. Defaults to <literal>$SHLIBNOVERSIONSYMLINKS</literal>
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LDMODULEPREFIX">
    <term>
      <envar>LDMODULEPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for loadable module file names.
On Mac OS X, this is null;
on other systems, this is
the same as <link linkend="cv-SHLIBPREFIX"><envar>$SHLIBPREFIX</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_LDMODULESONAME">
    <term>
      <envar>_LDMODULESONAME</envar>
    </term>
    <listitem><para>
A macro that automatically generates loadable module's SONAME based on $TARGET,
$LDMODULEVERSION and $LDMODULESUFFIX. Used by <link linkend="b-LoadableModule"><function>LoadableModule</function></link> builder
when the linker tool supports SONAME (e.g. <link linkend="t-gnulink"><literal>gnulink</literal></link>).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LDMODULESUFFIX">
    <term>
      <envar>LDMODULESUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for loadable module file names.
On Mac OS X, this is null;
on other systems, this is
the same as $SHLIBSUFFIX.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LDMODULEVERSION">
    <term>
      <envar>LDMODULEVERSION</envar>
    </term>
    <listitem><para>
When this construction variable is defined, a versioned loadable module
is created by <link linkend="b-LoadableModule"><function>LoadableModule</function></link> builder. This activates the
<link linkend="cv-_LDMODULEVERSIONFLAGS"><envar>$_LDMODULEVERSIONFLAGS</envar></link> and thus modifies the <link linkend="cv-LDMODULECOM"><envar>$LDMODULECOM</envar></link> as
required, adds the version number to the library name, and creates the symlinks
that are needed. <link linkend="cv-LDMODULEVERSION"><envar>$LDMODULEVERSION</envar></link> versions should exist in the same
format as <link linkend="cv-SHLIBVERSION"><envar>$SHLIBVERSION</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_LDMODULEVERSIONFLAGS">
    <term>
      <envar>_LDMODULEVERSIONFLAGS</envar>
    </term>
    <listitem><para>
This macro automatically introduces extra flags to <link linkend="cv-LDMODULECOM"><envar>$LDMODULECOM</envar></link> when
building versioned <link linkend="b-LoadableModule"><function>LoadableModule</function></link> (that is when
<link linkend="cv-LDMODULEVERSION"><envar>$LDMODULEVERSION</envar></link> is set). <literal>_LDMODULEVERSIONFLAGS</literal>
usually adds <link linkend="cv-SHLIBVERSIONFLAGS"><envar>$SHLIBVERSIONFLAGS</envar></link> and some extra dynamically generated
options (such as <literal>-Wl,-soname=$_LDMODULESONAME</literal>).  It is unused
by plain (unversioned) loadable modules.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LDMODULEVERSIONFLAGS">
    <term>
      <envar>LDMODULEVERSIONFLAGS</envar>
    </term>
    <listitem><para>
Extra flags added to <link linkend="cv-LDMODULECOM"><envar>$LDMODULECOM</envar></link> when building versioned
<link linkend="b-LoadableModule"><function>LoadableModule</function></link>. These flags are only used when <link linkend="cv-LDMODULEVERSION"><envar>$LDMODULEVERSION</envar></link> is
set.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LEX">
    <term>
      <envar>LEX</envar>
    </term>
    <listitem><para>
The lexical analyzer generator.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LEXCOM">
    <term>
      <envar>LEXCOM</envar>
    </term>
    <listitem><para>
The command line used to call the lexical analyzer generator
to generate a source file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LEXCOMSTR">
    <term>
      <envar>LEXCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when generating a source file
using the lexical analyzer generator.
If this is not set, then <link linkend="cv-LEXCOM"><envar>$LEXCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(LEXCOMSTR = "Lex'ing $TARGET from $SOURCES")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LEXFLAGS">
    <term>
      <envar>LEXFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the lexical analyzer generator.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LEXUNISTD">
    <term>
      <envar>LEXUNISTD</envar>
    </term>
    <listitem><para>
Used only on windows environments to set a lex flag to prevent 'unistd.h' from being included. The default value is '--nounistd'.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_LIBDIRFLAGS">
    <term>
      <envar>_LIBDIRFLAGS</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the linker command-line options
for specifying directories to be searched for library.
The value of <envar>$_LIBDIRFLAGS</envar> is created
by respectively prepending and appending <envar>$LIBDIRPREFIX</envar> and <envar>$LIBDIRSUFFIX</envar>
to the beginning and end
of each directory in <envar>$LIBPATH</envar>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LIBDIRPREFIX">
    <term>
      <envar>LIBDIRPREFIX</envar>
    </term>
    <listitem><para>
The prefix used to specify a library directory on the linker command line.
This will be prepended to the beginning of each directory
in the <envar>$LIBPATH</envar> construction variable
when the <envar>$_LIBDIRFLAGS</envar> variable is automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LIBDIRSUFFIX">
    <term>
      <envar>LIBDIRSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used to specify a library directory on the linker command line.
This will be appended to the end of each directory
in the <envar>$LIBPATH</envar> construction variable
when the <envar>$_LIBDIRFLAGS</envar> variable is automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LIBEMITTER">
    <term>
      <envar>LIBEMITTER</envar>
    </term>
    <listitem><para>
Contains the emitter specification for the
<link linkend="b-StaticLibrary"><function>StaticLibrary</function></link> builder.
The manpage section "Builder Objects" contains
general information on specifying emitters.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_LIBFLAGS">
    <term>
      <envar>_LIBFLAGS</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the linker command-line options
for specifying libraries to be linked with the resulting target.
The value of <envar>$_LIBFLAGS</envar> is created
by respectively prepending and appending <envar>$LIBLINKPREFIX</envar> and <envar>$LIBLINKSUFFIX</envar>
to the beginning and end
of each filename in <envar>$LIBS</envar>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LIBLINKPREFIX">
    <term>
      <envar>LIBLINKPREFIX</envar>
    </term>
    <listitem><para>
The prefix used to specify a library to link on the linker command line.
This will be prepended to the beginning of each library
in the <envar>$LIBS</envar> construction variable
when the <envar>$_LIBFLAGS</envar> variable is automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LIBLINKSUFFIX">
    <term>
      <envar>LIBLINKSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used to specify a library to link on the linker command line.
This will be appended to the end of each library
in the <envar>$LIBS</envar> construction variable
when the <envar>$_LIBFLAGS</envar> variable is automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LIBPATH">
    <term>
      <envar>LIBPATH</envar>
    </term>
    <listitem><para>
The list of directories that will be searched for libraries.
The implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in <envar>$LINKFLAGS</envar> or <envar>$SHLINKFLAGS</envar>
because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in LIBPATH will be looked-up relative to the SConscript
directory when they are used in a command. To force
<command>scons</command>
to look-up a directory relative to the root of the source tree use #:
</para>

<example_commands>
env = Environment(LIBPATH='#/libs')
</example_commands>

<para>
The directory look-up can also be forced using the
<function>Dir</function>()
function:
</para>

<example_commands>
libs = Dir('libs')
env = Environment(LIBPATH=libs)
</example_commands>

<para>
The directory list will be added to command lines
through the automatically-generated
<envar>$_LIBDIRFLAGS</envar>
construction variable,
which is constructed by
respectively prepending and appending the values of the
<envar>$LIBDIRPREFIX</envar> and <envar>$LIBDIRSUFFIX</envar>
construction variables
to the beginning and end
of each directory in <envar>$LIBPATH</envar>.
Any command lines you define that need
the LIBPATH directory list should
include <envar>$_LIBDIRFLAGS</envar>:
</para>

<example_commands>
env = Environment(LINKCOM="my_linker $_LIBDIRFLAGS $_LIBFLAGS -o $TARGET $SOURCE")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LIBPREFIX">
    <term>
      <envar>LIBPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for (static) library file names.
A default value is set for each platform
(posix, win32, os2, etc.),
but the value is overridden by individual tools
(ar, mslib, sgiar, sunar, tlib, etc.)
to reflect the names of the libraries they create.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LIBPREFIXES">
    <term>
      <envar>LIBPREFIXES</envar>
    </term>
    <listitem><para>
A list of all legal prefixes for library file names.
When searching for library dependencies,
SCons will look for files with these prefixes,
the base library name,
and suffixes in the <envar>$LIBSUFFIXES</envar> list.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LIBS">
    <term>
      <envar>LIBS</envar>
    </term>
    <listitem><para>
A list of one or more libraries
that will be linked with
any executable programs
created by this environment.
</para>

<para>
The library list will be added to command lines
through the automatically-generated
<envar>$_LIBFLAGS</envar>
construction variable,
which is constructed by
respectively prepending and appending the values of the
<envar>$LIBLINKPREFIX</envar> and <envar>$LIBLINKSUFFIX</envar>
construction variables
to the beginning and end
of each filename in <envar>$LIBS</envar>.
Any command lines you define that need
the LIBS library list should
include <envar>$_LIBFLAGS</envar>:
</para>

<example_commands>
env = Environment(LINKCOM="my_linker $_LIBDIRFLAGS $_LIBFLAGS -o $TARGET $SOURCE")
</example_commands>

<para>
If you add a
File
object to the
<envar>$LIBS</envar>
list, the name of that file will be added to
<envar>$_LIBFLAGS</envar>,
and thus the link line, as is, without
<envar>$LIBLINKPREFIX</envar>
or
<envar>$LIBLINKSUFFIX</envar>.
For example:
</para>

<example_commands>
env.Append(LIBS=File('/tmp/mylib.so'))
</example_commands>

<para>
In all cases, scons will add dependencies from the executable program to
all the libraries in this list.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LIBSUFFIX">
    <term>
      <envar>LIBSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for (static) library file names.
A default value is set for each platform
(posix, win32, os2, etc.),
but the value is overridden by individual tools
(ar, mslib, sgiar, sunar, tlib, etc.)
to reflect the names of the libraries they create.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LIBSUFFIXES">
    <term>
      <envar>LIBSUFFIXES</envar>
    </term>
    <listitem><para>
A list of all legal suffixes for library file names.
When searching for library dependencies,
SCons will look for files with prefixes, in the <envar>$LIBPREFIXES</envar> list,
the base library name,
and these suffixes.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LICENSE">
    <term>
      <envar>LICENSE</envar>
    </term>
    <listitem><para>
The abbreviated name, preferably the SPDX code, of the license under which
this project is released (GPL-3.0, LGPL-2.1, BSD-2-Clause etc.).
See http://www.opensource.org/licenses/alphabetical
for a list of license names and SPDX codes.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LINESEPARATOR">
    <term>
      <envar>LINESEPARATOR</envar>
    </term>
    <listitem><para>
The separator used by the <function>Substfile</function> and <function>Textfile</function> builders.
This value is used between sources when constructing the target.
It defaults to the current system line separator.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LINGUAS_FILE">
    <term>
      <envar>LINGUAS_FILE</envar>
    </term>
    <listitem><para>
The <envar>$LINGUAS_FILE</envar> defines file(s) containing list of additional linguas
to be processed by <link linkend="b-POInit"><function>POInit</function></link>, <link linkend="b-POUpdate"><function>POUpdate</function></link> or <link linkend="b-MOFiles"><function>MOFiles</function></link>
builders. It also affects <link linkend="b-Translate"><function>Translate</function></link> builder. If the variable contains
a string, it defines name of the list file. The <envar>$LINGUAS_FILE</envar> may be a
list of file names as well. If <envar>$LINGUAS_FILE</envar> is set to
<literal>True</literal> (or non-zero numeric value), the list will be read from
default file named
<filename>LINGUAS</filename>.
</para>

</listitem>
  </varlistentry>
  <varlistentry id="cv-LINK">
    <term>
      <envar>LINK</envar>
    </term>
    <listitem><para>
The linker.
See also <link linkend="cv-SHLINK"><envar>$SHLINK</envar></link> for linking shared objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LINKCOM">
    <term>
      <envar>LINKCOM</envar>
    </term>
    <listitem><para>
The command line used to link object files into an executable.
See also <link linkend="cv-SHLINKCOM"><envar>$SHLINKCOM</envar></link> for linking shared objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LINKCOMSTR">
    <term>
      <envar>LINKCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when object files
are linked into an executable.
If not set, then <link linkend="cv-LINKCOM"><envar>$LINKCOM</envar></link> (the command line) is displayed.
See also <link linkend="cv-SHLINKCOMSTR"><envar>$SHLINKCOMSTR</envar></link>.  for linking shared objects.
</para>

<example_commands>
env = Environment(LINKCOMSTR = "Linking $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-LINKFLAGS">
    <term>
      <envar>LINKFLAGS</envar>
    </term>
    <listitem><para>
General user options passed to the linker.
Note that this variable should
<emphasis>not</emphasis>
contain
<option>-l</option>
(or similar) options for linking with the libraries listed in <link linkend="cv-LIBS"><envar>$LIBS</envar></link>,
nor
<option>-L</option>
(or similar) library search path options
that scons generates automatically from <link linkend="cv-LIBPATH"><envar>$LIBPATH</envar></link>.
See
<link linkend="cv-_LIBFLAGS"><envar>$_LIBFLAGS</envar></link>
above,
for the variable that expands to library-link options,
and
<link linkend="cv-_LIBDIRFLAGS"><envar>$_LIBDIRFLAGS</envar></link>
above,
for the variable that expands to library search path options.
See also <link linkend="cv-SHLINKFLAGS"><envar>$SHLINKFLAGS</envar></link>.  for linking shared objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-M4">
    <term>
      <envar>M4</envar>
    </term>
    <listitem><para>
The M4 macro preprocessor.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-M4COM">
    <term>
      <envar>M4COM</envar>
    </term>
    <listitem><para>
The command line used to pass files through the M4 macro preprocessor.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-M4COMSTR">
    <term>
      <envar>M4COMSTR</envar>
    </term>
    <listitem><para>
The string displayed when
a file is passed through the M4 macro preprocessor.
If this is not set, then <link linkend="cv-M4COM"><envar>$M4COM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-M4FLAGS">
    <term>
      <envar>M4FLAGS</envar>
    </term>
    <listitem><para>
General options passed to the M4 macro preprocessor.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MAKEINDEX">
    <term>
      <envar>MAKEINDEX</envar>
    </term>
    <listitem><para>
The makeindex generator for the TeX formatter and typesetter and the
LaTeX structured formatter and typesetter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MAKEINDEXCOM">
    <term>
      <envar>MAKEINDEXCOM</envar>
    </term>
    <listitem><para>
The command line used to call the makeindex generator for the
TeX formatter and typesetter and the LaTeX structured formatter and
typesetter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MAKEINDEXCOMSTR">
    <term>
      <envar>MAKEINDEXCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when calling the makeindex generator for the
TeX formatter and typesetter
and the LaTeX structured formatter and typesetter.
If this is not set, then <link linkend="cv-MAKEINDEXCOM"><envar>$MAKEINDEXCOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MAKEINDEXFLAGS">
    <term>
      <envar>MAKEINDEXFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the makeindex generator for the TeX formatter
and typesetter and the LaTeX structured formatter and typesetter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MAXLINELENGTH">
    <term>
      <envar>MAXLINELENGTH</envar>
    </term>
    <listitem><para>
The maximum number of characters allowed on an external command line.
On Win32 systems,
link lines longer than this many characters
are linked via a temporary file name.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MIDL">
    <term>
      <envar>MIDL</envar>
    </term>
    <listitem><para>
The Microsoft IDL compiler.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MIDLCOM">
    <term>
      <envar>MIDLCOM</envar>
    </term>
    <listitem><para>
The command line used to pass files to the Microsoft IDL compiler.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MIDLCOMSTR">
    <term>
      <envar>MIDLCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when
the Microsoft IDL compiler is called.
If this is not set, then <link linkend="cv-MIDLCOM"><envar>$MIDLCOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MIDLFLAGS">
    <term>
      <envar>MIDLFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the Microsoft IDL compiler.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MOSUFFIX">
    <term>
      <envar>MOSUFFIX</envar>
    </term>
    <listitem><para>
Suffix used for <literal>MO</literal> files (default: <literal>'.mo'</literal>).
See <link linkend="t-msgfmt"><literal>msgfmt</literal></link> tool and <link linkend="b-MOFiles"><function>MOFiles</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSGFMT">
    <term>
      <envar>MSGFMT</envar>
    </term>
    <listitem><para>
Absolute path to <command>msgfmt(1)</command> binary, found by
<function>Detect()</function>.
See <link linkend="t-msgfmt"><literal>msgfmt</literal></link> tool and <link linkend="b-MOFiles"><function>MOFiles</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSGFMTCOM">
    <term>
      <envar>MSGFMTCOM</envar>
    </term>
    <listitem><para>
Complete command line to run <command>msgfmt(1)</command> program.
See <link linkend="t-msgfmt"><literal>msgfmt</literal></link> tool and <link linkend="b-MOFiles"><function>MOFiles</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSGFMTCOMSTR">
    <term>
      <envar>MSGFMTCOMSTR</envar>
    </term>
    <listitem><para>
String to display when <command>msgfmt(1)</command> is invoked 
(default: <literal>''</literal>, which means ``print <link linkend="cv-MSGFMTCOM"><envar>$MSGFMTCOM</envar></link>'').
See <link linkend="t-msgfmt"><literal>msgfmt</literal></link> tool and <link linkend="b-MOFiles"><function>MOFiles</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSGFMTFLAGS">
    <term>
      <envar>MSGFMTFLAGS</envar>
    </term>
    <listitem><para>
Additional flags to <command>msgfmt(1)</command>.
See <link linkend="t-msgfmt"><literal>msgfmt</literal></link> tool and <link linkend="b-MOFiles"><function>MOFiles</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSGINIT">
    <term>
      <envar>MSGINIT</envar>
    </term>
    <listitem><para>
Path to <command>msginit(1)</command> program (found via
<literal>Detect()</literal>).
See <link linkend="t-msginit"><literal>msginit</literal></link> tool and <link linkend="b-POInit"><function>POInit</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSGINITCOM">
    <term>
      <envar>MSGINITCOM</envar>
    </term>
    <listitem><para>
Complete command line to run <command>msginit(1)</command> program.
See <link linkend="t-msginit"><literal>msginit</literal></link> tool and <link linkend="b-POInit"><function>POInit</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSGINITCOMSTR">
    <term>
      <envar>MSGINITCOMSTR</envar>
    </term>
    <listitem><para>
String to display when <command>msginit(1)</command> is invoked 
(default: <literal>''</literal>, which means ``print <link linkend="cv-MSGINITCOM"><envar>$MSGINITCOM</envar></link>'').
See <link linkend="t-msginit"><literal>msginit</literal></link> tool and <link linkend="b-POInit"><function>POInit</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSGINITFLAGS">
    <term>
      <envar>MSGINITFLAGS</envar>
    </term>
    <listitem><para>
List of additional flags to <command>msginit(1)</command> (default:
<literal>[]</literal>).
See <link linkend="t-msginit"><literal>msginit</literal></link> tool and <link linkend="b-POInit"><function>POInit</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_MSGINITLOCALE">
    <term>
      <envar>_MSGINITLOCALE</envar>
    </term>
    <listitem><para>
Internal ``macro''. Computes locale (language) name based on target filename
(default: <literal>'${TARGET.filebase}' </literal>).
</para>
<para>
See <link linkend="t-msginit"><literal>msginit</literal></link> tool and <link linkend="b-POInit"><function>POInit</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSGMERGE">
    <term>
      <envar>MSGMERGE</envar>
    </term>
    <listitem><para>
Absolute path to <command>msgmerge(1)</command> binary as found by
<function>Detect()</function>.
See <link linkend="t-msgmerge"><literal>msgmerge</literal></link> tool and <link linkend="b-POUpdate"><function>POUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSGMERGECOM">
    <term>
      <envar>MSGMERGECOM</envar>
    </term>
    <listitem><para>
Complete command line to run <command>msgmerge(1)</command> command.
See <link linkend="t-msgmerge"><literal>msgmerge</literal></link> tool and <link linkend="b-POUpdate"><function>POUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSGMERGECOMSTR">
    <term>
      <envar>MSGMERGECOMSTR</envar>
    </term>
    <listitem><para>
String to be displayed when <command>msgmerge(1)</command> is invoked
(default: <literal>''</literal>, which means ``print <link linkend="cv-MSGMERGECOM"><envar>$MSGMERGECOM</envar></link>'').
See <link linkend="t-msgmerge"><literal>msgmerge</literal></link> tool and <link linkend="b-POUpdate"><function>POUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSGMERGEFLAGS">
    <term>
      <envar>MSGMERGEFLAGS</envar>
    </term>
    <listitem><para>
Additional flags to <command>msgmerge(1)</command> command.
See <link linkend="t-msgmerge"><literal>msgmerge</literal></link> tool and <link linkend="b-POUpdate"><function>POUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSSDK_DIR">
    <term>
      <envar>MSSDK_DIR</envar>
    </term>
    <listitem><para>
The directory containing the Microsoft SDK
(either Platform SDK or Windows SDK)
to be used for compilation.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSSDK_VERSION">
    <term>
      <envar>MSSDK_VERSION</envar>
    </term>
    <listitem><para>
The version string of the Microsoft SDK
(either Platform SDK or Windows SDK)
to be used for compilation.
Supported versions include
<literal>6.1</literal>,
<literal>6.0A</literal>,
<literal>6.0</literal>,
<literal>2003R2</literal>
and 
<literal>2003R1</literal>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSVC_BATCH">
    <term>
      <envar>MSVC_BATCH</envar>
    </term>
    <listitem><para>
When set to any true value,
specifies that SCons should batch
compilation of object files
when calling the Microsoft Visual C/C++ compiler.
All compilations of source files from the same source directory
that generate target files in a same output directory
and were configured in SCons using the same construction environment
will be built in a single call to the compiler.
Only source files that have changed since their
object files were built will be passed to each compiler invocation
(via the <link linkend="cv-CHANGED_SOURCES"><envar>$CHANGED_SOURCES</envar></link> construction variable).
Any compilations where the object (target) file base name
(minus the <filename>.obj</filename>)
does not match the source file base name
will be compiled separately.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSVC_USE_SCRIPT">
    <term>
      <envar>MSVC_USE_SCRIPT</envar>
    </term>
    <listitem><para>
Use a batch script to set up Microsoft Visual Studio compiler
</para>

<para>
<envar>$MSVC_USE_SCRIPT</envar> overrides <envar>$MSVC_VERSION</envar> and <envar>$TARGET_ARCH</envar>.
If set to the name of a Visual Studio .bat file (e.g. vcvars.bat),
SCons will run that bat file and extract the relevant variables from
the result (typically %INCLUDE%, %LIB%, and %PATH%).  Setting
MSVC_USE_SCRIPT to None bypasses the Visual Studio autodetection
entirely; use this if you are running SCons in a Visual Studio cmd
window and importing the shell's environment variables.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MSVC_UWP_APP">
    <term>
      <envar>MSVC_UWP_APP</envar>
    </term>
    <listitem><para>
Build libraries for a Universal Windows Platform (UWP) Application.
</para>

<para>
If <envar>$MSVC_UWP_APP</envar> is set, the Visual Studio environment will be set up to point
to the Windows Store compatible libraries and Visual Studio runtimes. In doing so,
any libraries that are built will be able to be used in a UWP App and published
to the Windows Store.
This flag will only have an effect with Visual Studio 2015+.
This variable must be passed as an argument to the Environment()
constructor; setting it later has no effect.
</para>

<para>
Valid values are '1' or '0'
</para>

</listitem>
  </varlistentry>
  <varlistentry id="cv-MSVC_VERSION">
    <term>
      <envar>MSVC_VERSION</envar>
    </term>
    <listitem><para>
Sets the preferred  version of Microsoft Visual C/C++ to use.
</para>

<para>
If <envar>$MSVC_VERSION</envar> is not set, SCons will (by default) select the
latest version of Visual C/C++ installed on your system.  If the
specified version isn't installed, tool initialization will fail.
This variable must be passed as an argument to the Environment()
constructor; setting it later has no effect.
</para>

<para>
Valid values for Windows are
<literal>14.2</literal>,
<literal>14.1</literal>,
<literal>14.1Exp</literal>,
<literal>14.0</literal>,
<literal>14.0Exp</literal>,
<literal>12.0</literal>,
<literal>12.0Exp</literal>,
<literal>11.0</literal>,
<literal>11.0Exp</literal>,
<literal>10.0</literal>,
<literal>10.0Exp</literal>,
<literal>9.0</literal>,
<literal>9.0Exp</literal>,
<literal>8.0</literal>,
<literal>8.0Exp</literal>,
<literal>7.1</literal>,
<literal>7.0</literal>,
and <literal>6.0</literal>.
Versions ending in <literal>Exp</literal> refer to "Express" or 
"Express for Desktop" editions.
</para>

</listitem>
  </varlistentry>
  <varlistentry id="cv-MSVS">
    <term>
      <envar>MSVS</envar>
    </term>
    <listitem><para>
        When the Microsoft Visual Studio tools are initialized,
        they set up this dictionary with the following keys:
      </para>
      <variablelist>
        <varlistentry>
          <term>VERSION</term> <listitem>
            <para>the version of MSVS being used (can be set via
            <link linkend="cv-MSVS_VERSION"><envar>$MSVS_VERSION</envar></link>)</para>
          </listitem>
        </varlistentry> <varlistentry>
          <term>VERSIONS</term> <listitem>
            <para>the available versions of MSVS installed</para>
          </listitem>
        </varlistentry> <varlistentry>
          <term>VCINSTALLDIR</term> <listitem>
            <para>installed directory of Visual C++</para>
          </listitem>
        </varlistentry> <varlistentry>
          <term>VSINSTALLDIR</term> <listitem>
            <para>installed directory of Visual Studio</para>
          </listitem>
        </varlistentry> <varlistentry>
          <term>FRAMEWORKDIR</term> <listitem>
            <para>installed directory of the .NET framework</para>
          </listitem>
        </varlistentry> <varlistentry>
          <term>FRAMEWORKVERSIONS</term> <listitem>
            <para>
              list of installed versions of the .NET framework,
              sorted latest to oldest.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>FRAMEWORKVERSION</term>
          <listitem>
            <para>latest installed version of the .NET framework</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>FRAMEWORKSDKDIR</term>
          <listitem>
            <para>installed location of the .NET SDK.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>PLATFORMSDKDIR</term>
          <listitem>
            <para>installed location of the Platform SDK.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>PLATFORMSDK_MODULES</term>
          <listitem>
            <para>
              dictionary of installed Platform SDK modules, where the
              dictionary keys are keywords for the various modules,
              and the values are 2-tuples where the first is the
              release date, and the second is the version number.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>If a value is not set, it was not available in the registry.</para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVS_ARCH">
    <term>
      <envar>MSVS_ARCH</envar>
    </term>
    <listitem><para>Sets the architecture for which the generated project(s) should build.</para>
      <para>
        The default value is <literal>x86</literal>.
        <literal>amd64</literal> is also supported by <application>SCons</application> for
        most Visual Studio versions. Since Visual Studio 2015
        <literal>arm</literal> is supported, and since Visual Studio
        2017 <literal>arm64</literal> is supported.
        Trying to set <envar>$MSVS_ARCH</envar>
        to an architecture that's not supported for a given Visual
        Studio version will generate an error.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVS_PROJECT_GUID">
    <term>
      <envar>MSVS_PROJECT_GUID</envar>
    </term>
    <listitem><para>
        The string placed in a generated
Microsoft Visual Studio project file as the value of the
        <literal>ProjectGUID</literal> attribute. There is no default
        value. If not
defined, a new GUID is generated.

      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVS_SCC_AUX_PATH">
    <term>
      <envar>MSVS_SCC_AUX_PATH</envar>
    </term>
    <listitem><para>
        The path name placed in a generated
Microsoft Visual Studio project file as the value of the
        <literal>SccAuxPath</literal> attribute if the
        <envar>MSVS_SCC_PROVIDER</envar> construction variable is
        also set. There is
no default value.

      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVS_SCC_CONNECTION_ROOT">
    <term>
      <envar>MSVS_SCC_CONNECTION_ROOT</envar>
    </term>
    <listitem><para>
        The root path of projects in your SCC workspace, i.e the
        path under which all project and solution files will be
        generated. It is used as a reference path from which the
        relative paths of the generated Microsoft Visual Studio project
        and solution files are computed. The relative project file path
        is placed as the value of the <literal>SccLocalPath</literal>
        attribute of the project file and as the values of the
        <literal>SccProjectFilePathRelativizedFromConnection[i]</literal>
        (where [i] ranges from 0 to the number of projects in the solution)
        attributes of the <literal>GlobalSection(SourceCodeControl)</literal>
        section of the Microsoft Visual Studio solution file. Similarly
        the relative solution file path is placed as the values of the
        <literal>SccLocalPath[i]</literal> (where [i] ranges from 0
        to the number of projects in the solution) attributes of the
        <literal>GlobalSection(SourceCodeControl)</literal> section of
        the Microsoft Visual Studio solution file. This is used only if
        the <envar>MSVS_SCC_PROVIDER</envar> construction variable is
        also set. The default value is the current working directory.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVS_SCC_PROJECT_NAME">
    <term>
      <envar>MSVS_SCC_PROJECT_NAME</envar>
    </term>
    <listitem><para>
        The project name placed in a generated Microsoft
        Visual Studio project file as the value of the
        <literal>SccProjectName</literal> attribute if the
        <envar>MSVS_SCC_PROVIDER</envar> construction variable
        is also set. In this case the string is also placed in
        the <literal>SccProjectName0</literal> attribute of the
        <literal>GlobalSection(SourceCodeControl)</literal> section
        of the Microsoft Visual Studio solution file. There is no
        default value.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVS_SCC_PROVIDER">
    <term>
      <envar>MSVS_SCC_PROVIDER</envar>
    </term>
    <listitem><para>
        The string placed in a generated Microsoft
        Visual Studio project file as the value of the
        <literal>SccProvider</literal> attribute. The string is
        also placed in the <literal>SccProvider0</literal> attribute
        of the <literal>GlobalSection(SourceCodeControl)</literal>
        section of the Microsoft Visual Studio solution file. There
        is no default value.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVS_VERSION">
    <term>
      <envar>MSVS_VERSION</envar>
    </term>
    <listitem><para>Sets the preferred version of Microsoft Visual Studio to use.</para>
      <para>
        If <envar>$MSVS_VERSION</envar> is not set, <application>SCons</application> will (by default)
        select the latest version of Visual Studio installed on your
        system. So, if you have version 6 and version 7 (MSVS .NET)
        installed, it will prefer version 7. You can override this by
        specifying the <envar>MSVS_VERSION</envar> variable in the
        Environment initialization, setting it to the appropriate
        version ('6.0' or '7.0', for example). If the specified
        version isn't installed, tool initialization will fail.
      </para>
      <para>
        This is obsolete: use <envar>$MSVC_VERSION</envar> instead. If
        <envar>$MSVS_VERSION</envar> is set and <envar>$MSVC_VERSION</envar> is
        not, <envar>$MSVC_VERSION</envar> will be set automatically to
        <envar>$MSVS_VERSION</envar>. If both are set to different values,
        scons will raise an error.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVSBUILDCOM">
    <term>
      <envar>MSVSBUILDCOM</envar>
    </term>
    <listitem><para>
        The build command line placed in a generated Microsoft Visual
        Studio project file. The default is to have Visual Studio
        invoke SCons with any specified build targets.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVSCLEANCOM">
    <term>
      <envar>MSVSCLEANCOM</envar>
    </term>
    <listitem><para>
        The clean command line placed in a generated Microsoft Visual
        Studio project file. The default is to have Visual Studio
        invoke SCons with the -c option to remove any specified
        targets.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVSENCODING">
    <term>
      <envar>MSVSENCODING</envar>
    </term>
    <listitem><para>
        The encoding string placed in a generated Microsoft
        Visual Studio project file. The default is encoding
        <literal>Windows-1252</literal>.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVSPROJECTCOM">
    <term>
      <envar>MSVSPROJECTCOM</envar>
    </term>
    <listitem><para>The action used to generate Microsoft Visual Studio project files.</para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVSPROJECTSUFFIX">
    <term>
      <envar>MSVSPROJECTSUFFIX</envar>
    </term>
    <listitem><para>
        The suffix used for Microsoft Visual Studio project (DSP)
        files. The default value is <filename>.vcproj</filename>
        when using Visual Studio version 7.x (.NET) or later version,
        and <filename>.dsp</filename> when using earlier versions of
        Visual Studio.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVSREBUILDCOM">
    <term>
      <envar>MSVSREBUILDCOM</envar>
    </term>
    <listitem><para>
        The rebuild command line placed in a generated Microsoft
        Visual Studio project file. The default is to have Visual
        Studio invoke SCons with any specified rebuild targets.

      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVSSCONS">
    <term>
      <envar>MSVSSCONS</envar>
    </term>
    <listitem><para>
        The SCons used in generated Microsoft Visual Studio project
        files. The default is the version of SCons being used to
        generate the project file.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVSSCONSCOM">
    <term>
      <envar>MSVSSCONSCOM</envar>
    </term>
    <listitem><para>
        The default SCons command used in generated Microsoft Visual
        Studio project files.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVSSCONSCRIPT">
    <term>
      <envar>MSVSSCONSCRIPT</envar>
    </term>
    <listitem><para>
        The sconscript file (that is, <filename>SConstruct</filename> or <filename>SConscript</filename>
        file) that will be invoked by Visual Studio project files
        (through the <link linkend="cv-MSVSSCONSCOM"><envar>$MSVSSCONSCOM</envar></link> variable). The default
        is the same sconscript file that contains the call to
        <function>MSVSProject</function> to build the project file.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVSSCONSFLAGS">
    <term>
      <envar>MSVSSCONSFLAGS</envar>
    </term>
    <listitem><para>
        The SCons flags used in generated Microsoft Visual Studio project files.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVSSOLUTIONCOM">
    <term>
      <envar>MSVSSOLUTIONCOM</envar>
    </term>
    <listitem><para>The action used to generate Microsoft Visual Studio solution files.</para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MSVSSOLUTIONSUFFIX">
    <term>
      <envar>MSVSSOLUTIONSUFFIX</envar>
    </term>
    <listitem><para>
        The suffix used for Microsoft Visual Studio solution (DSW)
        files. The default value is <filename>.sln</filename>
        when using Visual Studio version 7.x (.NET), and
        <filename>.dsw</filename> when using earlier versions of
        Visual Studio.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-MT">
    <term>
      <envar>MT</envar>
    </term>
    <listitem><para>
The program used on Windows systems to embed manifests into DLLs and EXEs.
See also <link linkend="cv-WINDOWS_EMBED_MANIFEST"><envar>$WINDOWS_EMBED_MANIFEST</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MTEXECOM">
    <term>
      <envar>MTEXECOM</envar>
    </term>
    <listitem><para>
The Windows command line used to embed manifests into executables.
See also <link linkend="cv-MTSHLIBCOM"><envar>$MTSHLIBCOM</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MTFLAGS">
    <term>
      <envar>MTFLAGS</envar>
    </term>
    <listitem><para>
Flags passed to the <link linkend="cv-MT"><envar>$MT</envar></link> manifest embedding program (Windows only).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MTSHLIBCOM">
    <term>
      <envar>MTSHLIBCOM</envar>
    </term>
    <listitem><para>
The Windows command line used to embed manifests into shared libraries (DLLs).
See also <link linkend="cv-MTEXECOM"><envar>$MTEXECOM</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MWCW_VERSION">
    <term>
      <envar>MWCW_VERSION</envar>
    </term>
    <listitem><para>
The version number of the MetroWerks CodeWarrior C compiler
to be used.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-MWCW_VERSIONS">
    <term>
      <envar>MWCW_VERSIONS</envar>
    </term>
    <listitem><para>
A list of installed versions of the MetroWerks CodeWarrior C compiler
on this system.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-NAME">
    <term>
      <envar>NAME</envar>
    </term>
    <listitem><para>
Specfies the name of the project to package.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-no_import_lib">
    <term>
      <envar>no_import_lib</envar>
    </term>
    <listitem><para>
When set to non-zero,
suppresses creation of a corresponding Windows static import lib by the
<literal>SharedLibrary</literal>
builder when used with
MinGW, Microsoft Visual Studio or Metrowerks.
This also suppresses creation
of an export (.exp) file
when using Microsoft Visual Studio.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-OBJPREFIX">
    <term>
      <envar>OBJPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for (static) object file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-OBJSUFFIX">
    <term>
      <envar>OBJSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for (static) object file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PACKAGEROOT">
    <term>
      <envar>PACKAGEROOT</envar>
    </term>
    <listitem><para>
Specifies the directory where all files in resulting archive will be
placed if applicable.  The default value is "$NAME-$VERSION".
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PACKAGETYPE">
    <term>
      <envar>PACKAGETYPE</envar>
    </term>
    <listitem><para>
Selects the package type to build.  Currently these are available:
</para>

<blockquote>
<simplelist type="vert" columns="1">
<member><literal>msi</literal> - Microsoft Installer</member>
<member><literal>rpm</literal> - RPM Package Manger</member>
<member><literal>ipkg</literal> - Itsy Package Management System</member>
<member><literal>tarbz2</literal> - bzip2 compressed tar</member>
<member><literal>targz</literal> - gzip compressed tar</member>
<member><literal>tarxz</literal> - xz compressed tar</member>
<member><literal>zip</literal> - zip file</member>
<member><literal>src_tarbz2</literal> - bzip2 compressed tar source</member>
<member><literal>src_targz</literal> - gzip compressed tar source</member>
<member><literal>src_tarxz</literal> - xz compressed tar source</member>
<member><literal>src_zip</literal> - zip file source</member>
</simplelist>
</blockquote>

<para>
This may be overridden with the <option>package_type</option>
command line option.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PACKAGEVERSION">
    <term>
      <envar>PACKAGEVERSION</envar>
    </term>
    <listitem><para>
The version of the package (not the underlying project).
This is currently only used by the rpm packager
and should reflect changes in the packaging,
not the underlying project code itself.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PCH">
    <term>
      <envar>PCH</envar>
    </term>
    <listitem><para>
The Microsoft Visual C++ precompiled header that will be used when compiling
object files. This variable is ignored by tools other than Microsoft Visual C++.
When this variable is
defined SCons will add options to the compiler command line to
cause it to use the precompiled header, and will also set up the
dependencies for the PCH file.
Example:
</para>

<example_commands>
env['PCH'] = 'StdAfx.pch'
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PCHCOM">
    <term>
      <envar>PCHCOM</envar>
    </term>
    <listitem><para>
The command line used by the
<function>PCH</function>
builder to generated a precompiled header.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PCHCOMSTR">
    <term>
      <envar>PCHCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when generating a precompiled header.
If this is not set, then <link linkend="cv-PCHCOM"><envar>$PCHCOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PCHPDBFLAGS">
    <term>
      <envar>PCHPDBFLAGS</envar>
    </term>
    <listitem><para>
A construction variable that, when expanded,
adds the <literal>/yD</literal> flag to the command line
only if the <envar>$PDB</envar> construction variable is set.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PCHSTOP">
    <term>
      <envar>PCHSTOP</envar>
    </term>
    <listitem><para>
This variable specifies how much of a source file is precompiled. This
variable is ignored by tools other than Microsoft Visual C++, or when
the PCH variable is not being used. When this variable is define it
must be a string that is the name of the header that
is included at the end of the precompiled portion of the source files, or
the empty string if the "#pragma hrdstop" construct is being used:
</para>

<example_commands>
env['PCHSTOP'] = 'StdAfx.h'
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PDB">
    <term>
      <envar>PDB</envar>
    </term>
    <listitem><para>
The Microsoft Visual C++ PDB file that will store debugging information for
object files, shared libraries, and programs. This variable is ignored by
tools other than Microsoft Visual C++.
When this variable is
defined SCons will add options to the compiler and linker command line to
cause them to generate external debugging information, and will also set up the
dependencies for the PDB file.
Example:
</para>

<example_commands>
env['PDB'] = 'hello.pdb'
</example_commands>

<para>
The Visual C++ compiler switch that SCons uses by default
to generate PDB information is <option>/Z7</option>.
This works correctly with parallel (<option>-j</option>) builds
because it embeds the debug information in the intermediate object files,
as opposed to sharing a single PDB file between multiple object files.
This is also the only way to get debug information
embedded into a static library.
Using the <option>/Zi</option> instead may yield improved
link-time performance,
although parallel builds will no longer work.
You can generate PDB files with the <option>/Zi</option>
switch by overriding the default <link linkend="cv-CCPDBFLAGS"><envar>$CCPDBFLAGS</envar></link> variable;
see the entry for that variable for specific examples.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PDFCOM">
    <term>
      <envar>PDFCOM</envar>
    </term>
    <listitem><para>
A deprecated synonym for <link linkend="cv-DVIPDFCOM"><envar>$DVIPDFCOM</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PDFLATEX">
    <term>
      <envar>PDFLATEX</envar>
    </term>
    <listitem><para>
The <application>pdflatex</application> utility.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PDFLATEXCOM">
    <term>
      <envar>PDFLATEXCOM</envar>
    </term>
    <listitem><para>
The command line used to call the <application>pdflatex</application> utility.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PDFLATEXCOMSTR">
    <term>
      <envar>PDFLATEXCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when calling the <application>pdflatex</application> utility.
If this is not set, then <link linkend="cv-PDFLATEXCOM"><envar>$PDFLATEXCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(PDFLATEX;COMSTR = "Building $TARGET from LaTeX input $SOURCES")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PDFLATEXFLAGS">
    <term>
      <envar>PDFLATEXFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the <application>pdflatex</application> utility.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PDFPREFIX">
    <term>
      <envar>PDFPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for PDF file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PDFSUFFIX">
    <term>
      <envar>PDFSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for PDF file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PDFTEX">
    <term>
      <envar>PDFTEX</envar>
    </term>
    <listitem><para>
The <application>pdftex</application> utility.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PDFTEXCOM">
    <term>
      <envar>PDFTEXCOM</envar>
    </term>
    <listitem><para>
The command line used to call the <application>pdftex</application> utility.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PDFTEXCOMSTR">
    <term>
      <envar>PDFTEXCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when calling the <application>pdftex</application> utility.
If this is not set, then <link linkend="cv-PDFTEXCOM"><envar>$PDFTEXCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(PDFTEXCOMSTR = "Building $TARGET from TeX input $SOURCES")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PDFTEXFLAGS">
    <term>
      <envar>PDFTEXFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the <application>pdftex</application> utility.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PKGCHK">
    <term>
      <envar>PKGCHK</envar>
    </term>
    <listitem><para>
On Solaris systems,
the package-checking program that will
be used (along with <envar>$PKGINFO</envar>)
to look for installed versions of
the Sun PRO C++ compiler.
The default is
<filename>/usr/sbin/pgkchk</filename>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PKGINFO">
    <term>
      <envar>PKGINFO</envar>
    </term>
    <listitem><para>
On Solaris systems,
the package information program that will
be used (along with <envar>$PKGCHK</envar>)
to look for installed versions of
the Sun PRO C++ compiler.
The default is
<filename>pkginfo</filename>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PLATFORM">
    <term>
      <envar>PLATFORM</envar>
    </term>
    <listitem><para>
The name of the platform used to create the Environment.  If no platform is
specified when the Environment is created,
<command>scons</command>
autodetects the platform.
</para>

<example_commands>
env = Environment(tools = [])
if env['PLATFORM'] == 'cygwin':
    Tool('mingw')(env)
else:
    Tool('msvc')(env)
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-POAUTOINIT">
    <term>
      <envar>POAUTOINIT</envar>
    </term>
    <listitem><para>
The <envar>$POAUTOINIT</envar> variable, if set to <literal>True</literal> (on non-zero
numeric value), let the <link linkend="t-msginit"><literal>msginit</literal></link> tool to automatically initialize
<emphasis>missing</emphasis> <literal>PO</literal> files with
<command>msginit(1)</command>.  This applies to both,
<link linkend="b-POInit"><function>POInit</function></link> and <link linkend="b-POUpdate"><function>POUpdate</function></link> builders (and others that use any of
them).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-POCREATE_ALIAS">
    <term>
      <envar>POCREATE_ALIAS</envar>
    </term>
    <listitem><para>
Common alias for all <literal>PO</literal> files created with <function>POInit</function>
builder (default: <literal>'po-create'</literal>).
See <link linkend="t-msginit"><literal>msginit</literal></link> tool and <link linkend="b-POInit"><function>POInit</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-POSUFFIX">
    <term>
      <envar>POSUFFIX</envar>
    </term>
    <listitem><para>
Suffix used for <literal>PO</literal> files (default: <literal>'.po'</literal>)
See <link linkend="t-msginit"><literal>msginit</literal></link> tool and <link linkend="b-POInit"><function>POInit</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-POTDOMAIN">
    <term>
      <envar>POTDOMAIN</envar>
    </term>
    <listitem><para>
The <envar>$POTDOMAIN</envar> defines default domain, used to generate
<literal>POT</literal> filename as <filename><envar>$POTDOMAIN</envar>.pot</filename> when
no <literal>POT</literal> file name is provided by the user. This applies to
<link linkend="b-POTUpdate"><function>POTUpdate</function></link>, <link linkend="b-POInit"><function>POInit</function></link> and <link linkend="b-POUpdate"><function>POUpdate</function></link> builders (and
builders, that use them, e.g. <function>Translate</function>). Normally (if <envar>$POTDOMAIN</envar> is
not defined), the builders use <filename>messages.pot</filename> as default
<literal>POT</literal> file name.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-POTSUFFIX">
    <term>
      <envar>POTSUFFIX</envar>
    </term>
    <listitem><para>
Suffix used for PO Template files (default: <literal>'.pot'</literal>).
See <link linkend="t-xgettext"><literal>xgettext</literal></link> tool and <link linkend="b-POTUpdate"><function>POTUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-POTUPDATE_ALIAS">
    <term>
      <envar>POTUPDATE_ALIAS</envar>
    </term>
    <listitem><para>
Name of the common phony target for all PO Templates created with
<link linkend="b-POUpdate"><function>POUpdate</function></link> (default: <literal>'pot-update'</literal>).
See <link linkend="t-xgettext"><literal>xgettext</literal></link> tool and <link linkend="b-POTUpdate"><function>POTUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-POUPDATE_ALIAS">
    <term>
      <envar>POUPDATE_ALIAS</envar>
    </term>
    <listitem><para>
Common alias for all <literal>PO</literal> files being defined with
<link linkend="b-POUpdate"><function>POUpdate</function></link> builder (default: <literal>'po-update'</literal>).
See <link linkend="t-msgmerge"><literal>msgmerge</literal></link> tool and <link linkend="b-POUpdate"><function>POUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PRINT_CMD_LINE_FUNC">
    <term>
      <envar>PRINT_CMD_LINE_FUNC</envar>
    </term>
    <listitem><para>
A Python function used to print the command lines as they are executed
(assuming command printing is not disabled by the
<option>-q</option>
or
<option>-s</option>
options or their equivalents).
The function should take four arguments:
<varname>s</varname>,
the command being executed (a string),
<varname>target</varname>,
the target being built (file node, list, or string name(s)),
<varname>source</varname>,
the source(s) used (file node, list, or string name(s)), and
<varname>env</varname>,
the environment being used.
</para>

<para>
The function must do the printing itself.  The default implementation,
used if this variable is not set or is None, is:
</para>
<example_commands>
def print_cmd_line(s, target, source, env):
  sys.stdout.write(s + "\n")
</example_commands>

<para>
Here's an example of a more interesting function:
</para>

<example_commands>
def print_cmd_line(s, target, source, env):
   sys.stdout.write("Building %s -&gt; %s...\n" %
    (' and '.join([str(x) for x in source]),
     ' and '.join([str(x) for x in target])))
env=Environment(PRINT_CMD_LINE_FUNC=print_cmd_line)
env.Program('foo', 'foo.c')
</example_commands>

<para>
This just prints "Building <varname>targetname</varname> from <varname>sourcename</varname>..." instead
of the actual commands.
Such a function could also log the actual commands to a log file,
for example.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PROGEMITTER">
    <term>
      <envar>PROGEMITTER</envar>
    </term>
    <listitem><para>
Contains the emitter specification for the
<link linkend="b-Program"><function>Program</function></link> builder.
The manpage section "Builder Objects" contains
general information on specifying emitters.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PROGPREFIX">
    <term>
      <envar>PROGPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for executable file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PROGSUFFIX">
    <term>
      <envar>PROGSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for executable file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PSCOM">
    <term>
      <envar>PSCOM</envar>
    </term>
    <listitem><para>
The command line used to convert TeX DVI files into a PostScript file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PSCOMSTR">
    <term>
      <envar>PSCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when a TeX DVI file
is converted into a PostScript file.
If this is not set, then <link linkend="cv-PSCOM"><envar>$PSCOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PSPREFIX">
    <term>
      <envar>PSPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for PostScript file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-PSSUFFIX">
    <term>
      <envar>PSSUFFIX</envar>
    </term>
    <listitem><para>
The prefix used for PostScript file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_AUTOSCAN">
    <term>
      <envar>QT_AUTOSCAN</envar>
    </term>
    <listitem><para>
Turn off scanning for mocable files. Use the Moc Builder to explicitly
specify files to run moc on.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_BINPATH">
    <term>
      <envar>QT_BINPATH</envar>
    </term>
    <listitem><para>
The path where the qt binaries are installed.
The default value is '<link linkend="cv-QTDIR"><envar>$QTDIR</envar></link>/bin'.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_CPPPATH">
    <term>
      <envar>QT_CPPPATH</envar>
    </term>
    <listitem><para>
The path where the qt header files are installed.
The default value is '<link linkend="cv-QTDIR"><envar>$QTDIR</envar></link>/include'.
Note: If you set this variable to None,
the tool won't change the <link linkend="cv-CPPPATH"><envar>$CPPPATH</envar></link>
construction variable.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_DEBUG">
    <term>
      <envar>QT_DEBUG</envar>
    </term>
    <listitem><para>
Prints lots of debugging information while scanning for moc files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_LIB">
    <term>
      <envar>QT_LIB</envar>
    </term>
    <listitem><para>
Default value is 'qt'. You may want to set this to 'qt-mt'. Note: If you set
this variable to None, the tool won't change the <link linkend="cv-LIBS"><envar>$LIBS</envar></link> variable.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_LIBPATH">
    <term>
      <envar>QT_LIBPATH</envar>
    </term>
    <listitem><para>
The path where the qt libraries are installed.
The default value is '<link linkend="cv-QTDIR"><envar>$QTDIR</envar></link>/lib'.
Note: If you set this variable to None,
the tool won't change the <link linkend="cv-LIBPATH"><envar>$LIBPATH</envar></link>
construction variable.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_MOC">
    <term>
      <envar>QT_MOC</envar>
    </term>
    <listitem><para>
Default value is '<link linkend="cv-QT_BINPATH"><envar>$QT_BINPATH</envar></link>/moc'.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_MOCCXXPREFIX">
    <term>
      <envar>QT_MOCCXXPREFIX</envar>
    </term>
    <listitem><para>
Default value is ''. Prefix for moc output files, when source is a cxx file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_MOCCXXSUFFIX">
    <term>
      <envar>QT_MOCCXXSUFFIX</envar>
    </term>
    <listitem><para>
Default value is '.moc'. Suffix for moc output files, when source is a cxx
file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_MOCFROMCXXCOM">
    <term>
      <envar>QT_MOCFROMCXXCOM</envar>
    </term>
    <listitem><para>
Command to generate a moc file from a cpp file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_MOCFROMCXXCOMSTR">
    <term>
      <envar>QT_MOCFROMCXXCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when generating a moc file from a cpp file.
If this is not set, then <link linkend="cv-QT_MOCFROMCXXCOM"><envar>$QT_MOCFROMCXXCOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_MOCFROMCXXFLAGS">
    <term>
      <envar>QT_MOCFROMCXXFLAGS</envar>
    </term>
    <listitem><para>
Default value is '-i'. These flags are passed to moc, when moccing a
C++ file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_MOCFROMHCOM">
    <term>
      <envar>QT_MOCFROMHCOM</envar>
    </term>
    <listitem><para>
Command to generate a moc file from a header.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_MOCFROMHCOMSTR">
    <term>
      <envar>QT_MOCFROMHCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when generating a moc file from a cpp file.
If this is not set, then <link linkend="cv-QT_MOCFROMHCOM"><envar>$QT_MOCFROMHCOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_MOCFROMHFLAGS">
    <term>
      <envar>QT_MOCFROMHFLAGS</envar>
    </term>
    <listitem><para>
Default value is ''. These flags are passed to moc, when moccing a header
file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_MOCHPREFIX">
    <term>
      <envar>QT_MOCHPREFIX</envar>
    </term>
    <listitem><para>
Default value is 'moc_'. Prefix for moc output files, when source is a header.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_MOCHSUFFIX">
    <term>
      <envar>QT_MOCHSUFFIX</envar>
    </term>
    <listitem><para>
Default value is '<link linkend="cv-CXXFILESUFFIX"><envar>$CXXFILESUFFIX</envar></link>'. Suffix for moc output files, when source is
a header.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_UIC">
    <term>
      <envar>QT_UIC</envar>
    </term>
    <listitem><para>
Default value is '<link linkend="cv-QT_BINPATH"><envar>$QT_BINPATH</envar></link>/uic'.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_UICCOM">
    <term>
      <envar>QT_UICCOM</envar>
    </term>
    <listitem><para>
Command to generate header files from .ui files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_UICCOMSTR">
    <term>
      <envar>QT_UICCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when generating header files from .ui files.
If this is not set, then <link linkend="cv-QT_UICCOM"><envar>$QT_UICCOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_UICDECLFLAGS">
    <term>
      <envar>QT_UICDECLFLAGS</envar>
    </term>
    <listitem><para>
Default value is ''. These flags are passed to uic, when creating a a h
file from a .ui file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_UICDECLPREFIX">
    <term>
      <envar>QT_UICDECLPREFIX</envar>
    </term>
    <listitem><para>
Default value is ''. Prefix for uic generated header files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_UICDECLSUFFIX">
    <term>
      <envar>QT_UICDECLSUFFIX</envar>
    </term>
    <listitem><para>
Default value is '.h'. Suffix for uic generated header files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_UICIMPLFLAGS">
    <term>
      <envar>QT_UICIMPLFLAGS</envar>
    </term>
    <listitem><para>
Default value is ''. These flags are passed to uic, when creating a cxx
file from a .ui file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_UICIMPLPREFIX">
    <term>
      <envar>QT_UICIMPLPREFIX</envar>
    </term>
    <listitem><para>
Default value is 'uic_'. Prefix for uic generated implementation files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_UICIMPLSUFFIX">
    <term>
      <envar>QT_UICIMPLSUFFIX</envar>
    </term>
    <listitem><para>
Default value is '<link linkend="cv-CXXFILESUFFIX"><envar>$CXXFILESUFFIX</envar></link>'. Suffix for uic generated implementation
files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QT_UISUFFIX">
    <term>
      <envar>QT_UISUFFIX</envar>
    </term>
    <listitem><para>
Default value is '.ui'. Suffix of designer input files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-QTDIR">
    <term>
      <envar>QTDIR</envar>
    </term>
    <listitem><para>
The qt tool tries to take this from os.environ.
It also initializes all QT_*
construction variables listed below.
(Note that all paths are constructed
with python's os.path.join() method,
but are listed here with the '/' separator
for easier reading.)
In addition, the construction environment
variables <link linkend="cv-CPPPATH"><envar>$CPPPATH</envar></link>,
<link linkend="cv-LIBPATH"><envar>$LIBPATH</envar></link> and
<link linkend="cv-LIBS"><envar>$LIBS</envar></link> may be modified
and the variables
<link linkend="cv-PROGEMITTER"><envar>$PROGEMITTER</envar></link>, <link linkend="cv-SHLIBEMITTER"><envar>$SHLIBEMITTER</envar></link> and <link linkend="cv-LIBEMITTER"><envar>$LIBEMITTER</envar></link>
are modified. Because the build-performance is affected when using this tool,
you have to explicitly specify it at Environment creation:
</para>

<example_commands>
Environment(tools=['default','qt'])
</example_commands>

<para>
The qt tool supports the following operations:
</para>

<para>
<emphasis role="strong">Automatic moc file generation from header files.</emphasis>
You do not have to specify moc files explicitly, the tool does it for you.
However, there are a few preconditions to do so: Your header file must have
the same filebase as your implementation file and must stay in the same
directory. It must have one of the suffixes .h, .hpp, .H, .hxx, .hh. You
can turn off automatic moc file generation by setting QT_AUTOSCAN to 0.
See also the corresponding
<function>Moc</function>()
builder method.
</para>

<para>
<emphasis role="strong">Automatic moc file generation from cxx files.</emphasis>
As stated in the qt documentation, include the moc file at the end of
the cxx file. Note that you have to include the file, which is generated
by the transformation ${QT_MOCCXXPREFIX}&lt;basename&gt;${QT_MOCCXXSUFFIX}, by default
&lt;basename&gt;.moc. A warning is generated after building the moc file, if you
do not include the correct file. If you are using VariantDir, you may
need to specify duplicate=1. You can turn off automatic moc file generation
by setting QT_AUTOSCAN to 0. See also the corresponding
<function>Moc</function>
builder method.
</para>

<para>
<emphasis role="strong">Automatic handling of .ui files.</emphasis>
The implementation files generated from .ui files are handled much the same
as yacc or lex files. Each .ui file given as a source of Program, Library or
SharedLibrary will generate three files, the declaration file, the
implementation file and a moc file. Because there are also generated headers,
you may need to specify duplicate=1 in calls to VariantDir.
See also the corresponding
<function>Uic</function>
builder method.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RANLIB">
    <term>
      <envar>RANLIB</envar>
    </term>
    <listitem><para>
The archive indexer.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RANLIBCOM">
    <term>
      <envar>RANLIBCOM</envar>
    </term>
    <listitem><para>
The command line used to index a static library archive.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RANLIBCOMSTR">
    <term>
      <envar>RANLIBCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when a static library archive is indexed.
If this is not set, then <link linkend="cv-RANLIBCOM"><envar>$RANLIBCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(RANLIBCOMSTR = "Indexing $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RANLIBFLAGS">
    <term>
      <envar>RANLIBFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the archive indexer.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RC">
    <term>
      <envar>RC</envar>
    </term>
    <listitem><para>
The resource compiler used to build
a Microsoft Visual C++ resource file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RCCOM">
    <term>
      <envar>RCCOM</envar>
    </term>
    <listitem><para>
The command line used to build
a Microsoft Visual C++ resource file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RCCOMSTR">
    <term>
      <envar>RCCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when invoking the resource compiler
to build a Microsoft Visual C++ resource file.
If this is not set, then <link linkend="cv-RCCOM"><envar>$RCCOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RCFLAGS">
    <term>
      <envar>RCFLAGS</envar>
    </term>
    <listitem><para>
The flags passed to the resource compiler by the RES builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RCINCFLAGS">
    <term>
      <envar>RCINCFLAGS</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the command-line options
for specifying directories to be searched
by the resource compiler.
The value of <envar>$RCINCFLAGS</envar> is created
by respectively prepending and appending
<envar>$RCINCPREFIX</envar> and <envar>$RCINCSUFFIX</envar>
to the beginning and end
of each directory in <envar>$CPPPATH</envar>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RCINCPREFIX">
    <term>
      <envar>RCINCPREFIX</envar>
    </term>
    <listitem><para>
The prefix (flag) used to specify an include directory
on the resource compiler command line.
This will be prepended to the beginning of each directory
in the <envar>$CPPPATH</envar> construction variable
when the <envar>$RCINCFLAGS</envar> variable is expanded.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RCINCSUFFIX">
    <term>
      <envar>RCINCSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used to specify an include directory
on the resource compiler command line.
This will be appended to the end of each directory
in the <envar>$CPPPATH</envar> construction variable
when the <envar>$RCINCFLAGS</envar> variable is expanded.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RDirs">
    <term>
      <envar>RDirs</envar>
    </term>
    <listitem><para>
A function that converts a string into a list of Dir instances by
searching the repositories.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-REGSVR">
    <term>
      <envar>REGSVR</envar>
    </term>
    <listitem><para>
The program used on Windows systems
to register a newly-built DLL library
whenever the <function>SharedLibrary</function> builder
is passed a keyword argument of <literal>register=1</literal>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-REGSVRCOM">
    <term>
      <envar>REGSVRCOM</envar>
    </term>
    <listitem><para>
The command line used on Windows systems
to register a newly-built DLL library
whenever the <function>SharedLibrary</function> builder
is passed a keyword argument of <literal>register=1</literal>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-REGSVRCOMSTR">
    <term>
      <envar>REGSVRCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when registering a newly-built DLL file.
If this is not set, then <link linkend="cv-REGSVRCOM"><envar>$REGSVRCOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-REGSVRFLAGS">
    <term>
      <envar>REGSVRFLAGS</envar>
    </term>
    <listitem><para>
Flags passed to the DLL registration program
on Windows systems when a newly-built DLL library is registered.
By default,
this includes the <option>/s</option>
that prevents dialog boxes from popping up
and requiring user attention.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RMIC">
    <term>
      <envar>RMIC</envar>
    </term>
    <listitem><para>
The Java RMI stub compiler.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RMICCOM">
    <term>
      <envar>RMICCOM</envar>
    </term>
    <listitem><para>
The command line used to compile stub
and skeleton class files
from Java classes that contain RMI implementations.
Any options specified in the <link linkend="cv-RMICFLAGS"><envar>$RMICFLAGS</envar></link> construction variable
are included on this command line.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RMICCOMSTR">
    <term>
      <envar>RMICCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when compiling
stub and skeleton class files
from Java classes that contain RMI implementations.
If this is not set, then <link linkend="cv-RMICCOM"><envar>$RMICCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(RMICCOMSTR = "Generating stub/skeleton class files $TARGETS from $SOURCES")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RMICFLAGS">
    <term>
      <envar>RMICFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the Java RMI stub compiler.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RPATH">
    <term>
      <envar>RPATH</envar>
    </term>
    <listitem><para>
A list of paths to search for shared libraries when running programs.
Currently only used in the GNU (gnulink),
IRIX (sgilink) and Sun (sunlink) linkers.
Ignored on platforms and toolchains that don't support it.
Note that the paths added to RPATH
are not transformed by
<command>scons</command>
in any way:  if you want an absolute
path, you must make it absolute yourself.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_RPATH">
    <term>
      <envar>_RPATH</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the rpath flags to be used when linking
a program with shared libraries.
The value of <envar>$_RPATH</envar> is created
by respectively prepending <envar>$RPATHPREFIX</envar> and appending <envar>$RPATHSUFFIX</envar>
to the beginning and end
of each directory in <envar>$RPATH</envar>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RPATHPREFIX">
    <term>
      <envar>RPATHPREFIX</envar>
    </term>
    <listitem><para>
The prefix used to specify a directory to be searched for
shared libraries when running programs.
This will be prepended to the beginning of each directory
in the <envar>$RPATH</envar> construction variable
when the <envar>$_RPATH</envar> variable is automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RPATHSUFFIX">
    <term>
      <envar>RPATHSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used to specify a directory to be searched for
shared libraries when running programs.
This will be appended to the end of each directory
in the <envar>$RPATH</envar> construction variable
when the <envar>$_RPATH</envar> variable is automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RPCGEN">
    <term>
      <envar>RPCGEN</envar>
    </term>
    <listitem><para>
The RPC protocol compiler.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RPCGENCLIENTFLAGS">
    <term>
      <envar>RPCGENCLIENTFLAGS</envar>
    </term>
    <listitem><para>
Options passed to the RPC protocol compiler
when generating client side stubs.
These are in addition to any flags specified in the
<link linkend="cv-RPCGENFLAGS"><envar>$RPCGENFLAGS</envar></link>
construction variable.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RPCGENFLAGS">
    <term>
      <envar>RPCGENFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the RPC protocol compiler.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RPCGENHEADERFLAGS">
    <term>
      <envar>RPCGENHEADERFLAGS</envar>
    </term>
    <listitem><para>
Options passed to the RPC protocol compiler
when generating a header file.
These are in addition to any flags specified in the
<link linkend="cv-RPCGENFLAGS"><envar>$RPCGENFLAGS</envar></link>
construction variable.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RPCGENSERVICEFLAGS">
    <term>
      <envar>RPCGENSERVICEFLAGS</envar>
    </term>
    <listitem><para>
Options passed to the RPC protocol compiler
when generating server side stubs.
These are in addition to any flags specified in the
<link linkend="cv-RPCGENFLAGS"><envar>$RPCGENFLAGS</envar></link>
construction variable.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-RPCGENXDRFLAGS">
    <term>
      <envar>RPCGENXDRFLAGS</envar>
    </term>
    <listitem><para>
Options passed to the RPC protocol compiler
when generating XDR routines.
These are in addition to any flags specified in the
<link linkend="cv-RPCGENFLAGS"><envar>$RPCGENFLAGS</envar></link>
construction variable.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SCANNERS">
    <term>
      <envar>SCANNERS</envar>
    </term>
    <listitem><para>
A list of the available implicit dependency scanners.
New file scanners may be added by
appending to this list,
although the more flexible approach
is to associate scanners
with a specific Builder.
See the manpage sections "Builder Objects"
and "Scanner Objects"
for more information.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SCONS_HOME">
    <term>
      <envar>SCONS_HOME</envar>
    </term>
    <listitem><para>
        The (optional) path to the SCons library directory,
        initialized from the external environment. If set, this is
        used to construct a shorter and more efficient search path in
        the <link linkend="cv-MSVSSCONS"><envar>$MSVSSCONS</envar></link> command line executed from Microsoft
        Visual Studio project files.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-SHCC">
    <term>
      <envar>SHCC</envar>
    </term>
    <listitem><para>
The C compiler used for generating shared-library objects.
See also <link linkend="cv-CC"><envar>$CC</envar></link> for compiling to static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHCCCOM">
    <term>
      <envar>SHCCCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a C source file
to a shared-library object file.
Any options specified in the <link linkend="cv-SHCFLAGS"><envar>$SHCFLAGS</envar></link>,
<link linkend="cv-SHCCFLAGS"><envar>$SHCCFLAGS</envar></link> and
<link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
See also <link linkend="cv-CCCOM"><envar>$CCCOM</envar></link> for compiling to static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHCCCOMSTR">
    <term>
      <envar>SHCCCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a C source file
is compiled to a shared object file.
If not set, then <link linkend="cv-SHCCCOM"><envar>$SHCCCOM</envar></link> (the command line) is displayed.
See also <link linkend="cv-CCCOMSTR"><envar>$CCCOMSTR</envar></link> for compiling to static objects.
</para>

<example_commands>
env = Environment(SHCCCOMSTR = "Compiling shared object $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHCCFLAGS">
    <term>
      <envar>SHCCFLAGS</envar>
    </term>
    <listitem><para>
Options that are passed to the C and C++ compilers
to generate shared-library objects.
See also <link linkend="cv-CCFLAGS"><envar>$CCFLAGS</envar></link> for compiling to static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHCFLAGS">
    <term>
      <envar>SHCFLAGS</envar>
    </term>
    <listitem><para>
Options that are passed to the C compiler (only; not C++)
to generate shared-library objects.
See also <link linkend="cv-CFLAGS"><envar>$CFLAGS</envar></link> for compiling to static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHCXX">
    <term>
      <envar>SHCXX</envar>
    </term>
    <listitem><para>
The C++ compiler used for generating shared-library objects.
See also <link linkend="cv-CXX"><envar>$CXX</envar></link> for compiling to static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHCXXCOM">
    <term>
      <envar>SHCXXCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a C++ source file
to a shared-library object file.
Any options specified in the <link linkend="cv-SHCXXFLAGS"><envar>$SHCXXFLAGS</envar></link> and
<link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
See also <link linkend="cv-CXXCOM"><envar>$CXXCOM</envar></link> for compiling to static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHCXXCOMSTR">
    <term>
      <envar>SHCXXCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a C++ source file
is compiled to a shared object file.
If not set, then <link linkend="cv-SHCXXCOM"><envar>$SHCXXCOM</envar></link> (the command line) is displayed.
See also <link linkend="cv-CXXCOMSTR"><envar>$CXXCOMSTR</envar></link> for compiling to static objects.
</para>

<example_commands>
env = Environment(SHCXXCOMSTR = "Compiling shared object $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHCXXFLAGS">
    <term>
      <envar>SHCXXFLAGS</envar>
    </term>
    <listitem><para>
Options that are passed to the C++ compiler
to generate shared-library objects.
See also <link linkend="cv-CXXFLAGS"><envar>$CXXFLAGS</envar></link> for compiling to static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHDC">
    <term>
      <envar>SHDC</envar>
    </term>
    <listitem><para>
The name of the compiler to use when compiling D source
destined to be in a shared objects.
See also <link linkend="cv-DC"><envar>$DC</envar></link> for compiling to static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHDCOM">
    <term>
      <envar>SHDCOM</envar>
    </term>
    <listitem><para>
The command line to use when compiling code to be part of shared objects.
See also <link linkend="cv-DCOM"><envar>$DCOM</envar></link> for compiling to static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHDCOMSTR">
    <term>
      <envar>SHDCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a D source file
is compiled to a (shared) object file.
If not set, then <link linkend="cv-SHDCOM"><envar>$SHDCOM</envar></link> (the command line) is displayed.
See also <link linkend="cv-DCOMSTR"><envar>$DCOMSTR</envar></link> for compiling to static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHDLIBVERSION">
    <term>
      <envar>SHDLIBVERSION</envar>
    </term>
    <listitem><para>
SHDLIBVERSION.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHDLIBVERSIONFLAGS">
    <term>
      <envar>SHDLIBVERSIONFLAGS</envar>
    </term>
    <listitem><para>
SHDLIBVERSIONFLAGS.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHDLINK">
    <term>
      <envar>SHDLINK</envar>
    </term>
    <listitem><para>
The linker to use when creating shared objects for code bases
include D sources.
See also <link linkend="cv-DLINK"><envar>$DLINK</envar></link> for linking static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHDLINKCOM">
    <term>
      <envar>SHDLINKCOM</envar>
    </term>
    <listitem><para>
The command line to use when generating shared objects.
See also <link linkend="cv-DLINKCOM"><envar>$DLINKCOM</envar></link> for linking static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHDLINKFLAGS">
    <term>
      <envar>SHDLINKFLAGS</envar>
    </term>
    <listitem><para>
The list of flags to use when generating a shared object.
See also <link linkend="cv-DLINKFLAGS"><envar>$DLINKFLAGS</envar></link> for linking static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHELL">
    <term>
      <envar>SHELL</envar>
    </term>
    <listitem><para>
A string naming the shell program that will be passed to the
<envar>$SPAWN</envar>
function.
See the
<envar>$SPAWN</envar>
construction variable for more information.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF03">
    <term>
      <envar>SHF03</envar>
    </term>
    <listitem><para>
The Fortran 03 compiler used for generating shared-library objects.
You should normally set the <link linkend="cv-SHFORTRAN"><envar>$SHFORTRAN</envar></link> variable,
which specifies the default Fortran compiler
for all Fortran versions.
You only need to set <link linkend="cv-SHF03"><envar>$SHF03</envar></link> if you need to use a specific compiler
or compiler version for Fortran 03 files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF03COM">
    <term>
      <envar>SHF03COM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 03 source file
to a shared-library object file.
You only need to set <link linkend="cv-SHF03COM"><envar>$SHF03COM</envar></link> if you need to use a specific
command line for Fortran 03 files.
You should normally set the <link linkend="cv-SHFORTRANCOM"><envar>$SHFORTRANCOM</envar></link> variable,
which specifies the default command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF03COMSTR">
    <term>
      <envar>SHF03COMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 03 source file
is compiled to a shared-library object file.
If not set, then <link linkend="cv-SHF03COM"><envar>$SHF03COM</envar></link> or <link linkend="cv-SHFORTRANCOM"><envar>$SHFORTRANCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF03FLAGS">
    <term>
      <envar>SHF03FLAGS</envar>
    </term>
    <listitem><para>
Options that are passed to the Fortran 03 compiler
to generated shared-library objects.
You only need to set <link linkend="cv-SHF03FLAGS"><envar>$SHF03FLAGS</envar></link> if you need to define specific
user options for Fortran 03 files.
You should normally set the <link linkend="cv-SHFORTRANFLAGS"><envar>$SHFORTRANFLAGS</envar></link> variable,
which specifies the user-specified options
passed to the default Fortran compiler
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF03PPCOM">
    <term>
      <envar>SHF03PPCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 03 source file to a
shared-library object file
after first running the file through the C preprocessor.
Any options specified in the <link linkend="cv-SHF03FLAGS"><envar>$SHF03FLAGS</envar></link> and <link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
You only need to set <link linkend="cv-SHF03PPCOM"><envar>$SHF03PPCOM</envar></link> if you need to use a specific
C-preprocessor command line for Fortran 03 files.
You should normally set the <link linkend="cv-SHFORTRANPPCOM"><envar>$SHFORTRANPPCOM</envar></link> variable,
which specifies the default C-preprocessor command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF03PPCOMSTR">
    <term>
      <envar>SHF03PPCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 03 source file
is compiled to a shared-library object file
after first running the file through the C preprocessor.
If not set, then <link linkend="cv-SHF03PPCOM"><envar>$SHF03PPCOM</envar></link> or <link linkend="cv-SHFORTRANPPCOM"><envar>$SHFORTRANPPCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF08">
    <term>
      <envar>SHF08</envar>
    </term>
    <listitem><para>
The Fortran 08 compiler used for generating shared-library objects.
You should normally set the <link linkend="cv-SHFORTRAN"><envar>$SHFORTRAN</envar></link> variable,
which specifies the default Fortran compiler
for all Fortran versions.
You only need to set <link linkend="cv-SHF08"><envar>$SHF08</envar></link> if you need to use a specific compiler
or compiler version for Fortran 08 files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF08COM">
    <term>
      <envar>SHF08COM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 08 source file
to a shared-library object file.
You only need to set <link linkend="cv-SHF08COM"><envar>$SHF08COM</envar></link> if you need to use a specific
command line for Fortran 08 files.
You should normally set the <link linkend="cv-SHFORTRANCOM"><envar>$SHFORTRANCOM</envar></link> variable,
which specifies the default command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF08COMSTR">
    <term>
      <envar>SHF08COMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 08 source file
is compiled to a shared-library object file.
If not set, then <link linkend="cv-SHF08COM"><envar>$SHF08COM</envar></link> or <link linkend="cv-SHFORTRANCOM"><envar>$SHFORTRANCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF08FLAGS">
    <term>
      <envar>SHF08FLAGS</envar>
    </term>
    <listitem><para>
Options that are passed to the Fortran 08 compiler
to generated shared-library objects.
You only need to set <link linkend="cv-SHF08FLAGS"><envar>$SHF08FLAGS</envar></link> if you need to define specific
user options for Fortran 08 files.
You should normally set the <link linkend="cv-SHFORTRANFLAGS"><envar>$SHFORTRANFLAGS</envar></link> variable,
which specifies the user-specified options
passed to the default Fortran compiler
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF08PPCOM">
    <term>
      <envar>SHF08PPCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 08 source file to a
shared-library object file
after first running the file through the C preprocessor.
Any options specified in the <link linkend="cv-SHF08FLAGS"><envar>$SHF08FLAGS</envar></link> and <link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
You only need to set <link linkend="cv-SHF08PPCOM"><envar>$SHF08PPCOM</envar></link> if you need to use a specific
C-preprocessor command line for Fortran 08 files.
You should normally set the <link linkend="cv-SHFORTRANPPCOM"><envar>$SHFORTRANPPCOM</envar></link> variable,
which specifies the default C-preprocessor command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF08PPCOMSTR">
    <term>
      <envar>SHF08PPCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 08 source file
is compiled to a shared-library object file
after first running the file through the C preprocessor.
If not set, then <link linkend="cv-SHF08PPCOM"><envar>$SHF08PPCOM</envar></link> or <link linkend="cv-SHFORTRANPPCOM"><envar>$SHFORTRANPPCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF77">
    <term>
      <envar>SHF77</envar>
    </term>
    <listitem><para>
The Fortran 77 compiler used for generating shared-library objects.
You should normally set the <link linkend="cv-SHFORTRAN"><envar>$SHFORTRAN</envar></link> variable,
which specifies the default Fortran compiler
for all Fortran versions.
You only need to set <link linkend="cv-SHF77"><envar>$SHF77</envar></link> if you need to use a specific compiler
or compiler version for Fortran 77 files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF77COM">
    <term>
      <envar>SHF77COM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 77 source file
to a shared-library object file.
You only need to set <link linkend="cv-SHF77COM"><envar>$SHF77COM</envar></link> if you need to use a specific
command line for Fortran 77 files.
You should normally set the <link linkend="cv-SHFORTRANCOM"><envar>$SHFORTRANCOM</envar></link> variable,
which specifies the default command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF77COMSTR">
    <term>
      <envar>SHF77COMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 77 source file
is compiled to a shared-library object file.
If not set, then <link linkend="cv-SHF77COM"><envar>$SHF77COM</envar></link> or <link linkend="cv-SHFORTRANCOM"><envar>$SHFORTRANCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF77FLAGS">
    <term>
      <envar>SHF77FLAGS</envar>
    </term>
    <listitem><para>
Options that are passed to the Fortran 77 compiler
to generated shared-library objects.
You only need to set <link linkend="cv-SHF77FLAGS"><envar>$SHF77FLAGS</envar></link> if you need to define specific
user options for Fortran 77 files.
You should normally set the <link linkend="cv-SHFORTRANFLAGS"><envar>$SHFORTRANFLAGS</envar></link> variable,
which specifies the user-specified options
passed to the default Fortran compiler
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF77PPCOM">
    <term>
      <envar>SHF77PPCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 77 source file to a
shared-library object file
after first running the file through the C preprocessor.
Any options specified in the <link linkend="cv-SHF77FLAGS"><envar>$SHF77FLAGS</envar></link> and <link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
You only need to set <link linkend="cv-SHF77PPCOM"><envar>$SHF77PPCOM</envar></link> if you need to use a specific
C-preprocessor command line for Fortran 77 files.
You should normally set the <link linkend="cv-SHFORTRANPPCOM"><envar>$SHFORTRANPPCOM</envar></link> variable,
which specifies the default C-preprocessor command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF77PPCOMSTR">
    <term>
      <envar>SHF77PPCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 77 source file
is compiled to a shared-library object file
after first running the file through the C preprocessor.
If not set, then <link linkend="cv-SHF77PPCOM"><envar>$SHF77PPCOM</envar></link> or <link linkend="cv-SHFORTRANPPCOM"><envar>$SHFORTRANPPCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF90">
    <term>
      <envar>SHF90</envar>
    </term>
    <listitem><para>
The Fortran 90 compiler used for generating shared-library objects.
You should normally set the <link linkend="cv-SHFORTRAN"><envar>$SHFORTRAN</envar></link> variable,
which specifies the default Fortran compiler
for all Fortran versions.
You only need to set <link linkend="cv-SHF90"><envar>$SHF90</envar></link> if you need to use a specific compiler
or compiler version for Fortran 90 files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF90COM">
    <term>
      <envar>SHF90COM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 90 source file
to a shared-library object file.
You only need to set <link linkend="cv-SHF90COM"><envar>$SHF90COM</envar></link> if you need to use a specific
command line for Fortran 90 files.
You should normally set the <link linkend="cv-SHFORTRANCOM"><envar>$SHFORTRANCOM</envar></link> variable,
which specifies the default command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF90COMSTR">
    <term>
      <envar>SHF90COMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 90 source file
is compiled to a shared-library object file.
If not set, then <link linkend="cv-SHF90COM"><envar>$SHF90COM</envar></link> or <link linkend="cv-SHFORTRANCOM"><envar>$SHFORTRANCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF90FLAGS">
    <term>
      <envar>SHF90FLAGS</envar>
    </term>
    <listitem><para>
Options that are passed to the Fortran 90 compiler
to generated shared-library objects.
You only need to set <link linkend="cv-SHF90FLAGS"><envar>$SHF90FLAGS</envar></link> if you need to define specific
user options for Fortran 90 files.
You should normally set the <link linkend="cv-SHFORTRANFLAGS"><envar>$SHFORTRANFLAGS</envar></link> variable,
which specifies the user-specified options
passed to the default Fortran compiler
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF90PPCOM">
    <term>
      <envar>SHF90PPCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 90 source file to a
shared-library object file
after first running the file through the C preprocessor.
Any options specified in the <link linkend="cv-SHF90FLAGS"><envar>$SHF90FLAGS</envar></link> and <link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
You only need to set <link linkend="cv-SHF90PPCOM"><envar>$SHF90PPCOM</envar></link> if you need to use a specific
C-preprocessor command line for Fortran 90 files.
You should normally set the <link linkend="cv-SHFORTRANPPCOM"><envar>$SHFORTRANPPCOM</envar></link> variable,
which specifies the default C-preprocessor command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF90PPCOMSTR">
    <term>
      <envar>SHF90PPCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 90 source file
is compiled to a shared-library object file
after first running the file through the C preprocessor.
If not set, then <link linkend="cv-SHF90PPCOM"><envar>$SHF90PPCOM</envar></link> or <link linkend="cv-SHFORTRANPPCOM"><envar>$SHFORTRANPPCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF95">
    <term>
      <envar>SHF95</envar>
    </term>
    <listitem><para>
The Fortran 95 compiler used for generating shared-library objects.
You should normally set the <link linkend="cv-SHFORTRAN"><envar>$SHFORTRAN</envar></link> variable,
which specifies the default Fortran compiler
for all Fortran versions.
You only need to set <link linkend="cv-SHF95"><envar>$SHF95</envar></link> if you need to use a specific compiler
or compiler version for Fortran 95 files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF95COM">
    <term>
      <envar>SHF95COM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 95 source file
to a shared-library object file.
You only need to set <link linkend="cv-SHF95COM"><envar>$SHF95COM</envar></link> if you need to use a specific
command line for Fortran 95 files.
You should normally set the <link linkend="cv-SHFORTRANCOM"><envar>$SHFORTRANCOM</envar></link> variable,
which specifies the default command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF95COMSTR">
    <term>
      <envar>SHF95COMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 95 source file
is compiled to a shared-library object file.
If not set, then <link linkend="cv-SHF95COM"><envar>$SHF95COM</envar></link> or <link linkend="cv-SHFORTRANCOM"><envar>$SHFORTRANCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF95FLAGS">
    <term>
      <envar>SHF95FLAGS</envar>
    </term>
    <listitem><para>
Options that are passed to the Fortran 95 compiler
to generated shared-library objects.
You only need to set <link linkend="cv-SHF95FLAGS"><envar>$SHF95FLAGS</envar></link> if you need to define specific
user options for Fortran 95 files.
You should normally set the <link linkend="cv-SHFORTRANFLAGS"><envar>$SHFORTRANFLAGS</envar></link> variable,
which specifies the user-specified options
passed to the default Fortran compiler
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF95PPCOM">
    <term>
      <envar>SHF95PPCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran 95 source file to a
shared-library object file
after first running the file through the C preprocessor.
Any options specified in the <link linkend="cv-SHF95FLAGS"><envar>$SHF95FLAGS</envar></link> and <link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
You only need to set <link linkend="cv-SHF95PPCOM"><envar>$SHF95PPCOM</envar></link> if you need to use a specific
C-preprocessor command line for Fortran 95 files.
You should normally set the <link linkend="cv-SHFORTRANPPCOM"><envar>$SHFORTRANPPCOM</envar></link> variable,
which specifies the default C-preprocessor command line
for all Fortran versions.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHF95PPCOMSTR">
    <term>
      <envar>SHF95PPCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran 95 source file
is compiled to a shared-library object file
after first running the file through the C preprocessor.
If not set, then <link linkend="cv-SHF95PPCOM"><envar>$SHF95PPCOM</envar></link> or <link linkend="cv-SHFORTRANPPCOM"><envar>$SHFORTRANPPCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHFORTRAN">
    <term>
      <envar>SHFORTRAN</envar>
    </term>
    <listitem><para>
The default Fortran compiler used for generating shared-library objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHFORTRANCOM">
    <term>
      <envar>SHFORTRANCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran source file
to a shared-library object file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHFORTRANCOMSTR">
    <term>
      <envar>SHFORTRANCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran source file
is compiled to a shared-library object file.
If not set, then <link linkend="cv-SHFORTRANCOM"><envar>$SHFORTRANCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHFORTRANFLAGS">
    <term>
      <envar>SHFORTRANFLAGS</envar>
    </term>
    <listitem><para>
Options that are passed to the Fortran compiler
to generate shared-library objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHFORTRANPPCOM">
    <term>
      <envar>SHFORTRANPPCOM</envar>
    </term>
    <listitem><para>
The command line used to compile a Fortran source file to a
shared-library object file
after first running the file through the C preprocessor.
Any options specified
in the <link linkend="cv-SHFORTRANFLAGS"><envar>$SHFORTRANFLAGS</envar></link> and
<link linkend="cv-CPPFLAGS"><envar>$CPPFLAGS</envar></link> construction variables
are included on this command line.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHFORTRANPPCOMSTR">
    <term>
      <envar>SHFORTRANPPCOMSTR</envar>
    </term>
    <listitem><para>
If set, the string displayed when a Fortran source file
is compiled to a shared-library object file
after first running the file through the C preprocessor.
If not set, then <link linkend="cv-SHFORTRANPPCOM"><envar>$SHFORTRANPPCOM</envar></link>
(the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHLIBEMITTER">
    <term>
      <envar>SHLIBEMITTER</envar>
    </term>
    <listitem><para>
Contains the emitter specification for the
<link linkend="b-SharedLibrary"><function>SharedLibrary</function></link> builder.
The manpage section "Builder Objects" contains
general information on specifying emitters.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHLIBNOVERSIONSYMLINKS">
    <term>
      <envar>SHLIBNOVERSIONSYMLINKS</envar>
    </term>
    <listitem><para>
Instructs the <link linkend="b-SharedLibrary"><function>SharedLibrary</function></link> builder to not create symlinks for versioned
shared libraries.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHLIBPREFIX">
    <term>
      <envar>SHLIBPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for shared library file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_SHLIBSONAME">
    <term>
      <envar>_SHLIBSONAME</envar>
    </term>
    <listitem><para>
A macro that automatically generates shared library's SONAME based on $TARGET,
$SHLIBVERSION and $SHLIBSUFFIX. Used by <link linkend="b-SharedLibrary"><function>SharedLibrary</function></link> builder when
the linker tool supports SONAME (e.g. <link linkend="t-gnulink"><literal>gnulink</literal></link>).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHLIBSUFFIX">
    <term>
      <envar>SHLIBSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for shared library file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHLIBVERSION">
    <term>
      <envar>SHLIBVERSION</envar>
    </term>
    <listitem><para>
When this construction variable is defined, a versioned shared library
is created by the <link linkend="b-SharedLibrary"><function>SharedLibrary</function></link> builder. This activates the
<link linkend="cv-_SHLIBVERSIONFLAGS"><envar>$_SHLIBVERSIONFLAGS</envar></link> and thus modifies the <link linkend="cv-SHLINKCOM"><envar>$SHLINKCOM</envar></link> as
required, adds the version number to the library name, and creates the symlinks
that are needed.  <link linkend="cv-SHLIBVERSION"><envar>$SHLIBVERSION</envar></link> versions should exist as alpha-numeric,
decimal-delimited values as defined by the regular expression "\w+[\.\w+]*".
Example <link linkend="cv-SHLIBVERSION"><envar>$SHLIBVERSION</envar></link> values include '1', '1.2.3', and '1.2.gitaa412c8b'.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_SHLIBVERSIONFLAGS">
    <term>
      <envar>_SHLIBVERSIONFLAGS</envar>
    </term>
    <listitem><para>
This macro automatically introduces extra flags to <link linkend="cv-SHLINKCOM"><envar>$SHLINKCOM</envar></link> when
building versioned <link linkend="b-SharedLibrary"><function>SharedLibrary</function></link> (that is when <link linkend="cv-SHLIBVERSION"><envar>$SHLIBVERSION</envar></link>
is set). <literal>_SHLIBVERSIONFLAGS</literal> usually adds <link linkend="cv-SHLIBVERSIONFLAGS"><envar>$SHLIBVERSIONFLAGS</envar></link>
and some extra dynamically generated options (such as
<literal>-Wl,-soname=$_SHLIBSONAME</literal>. It is unused by "plain"
(unversioned) shared libraries.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHLIBVERSIONFLAGS">
    <term>
      <envar>SHLIBVERSIONFLAGS</envar>
    </term>
    <listitem><para>
Extra flags added to <link linkend="cv-SHLINKCOM"><envar>$SHLINKCOM</envar></link> when building versioned
<link linkend="b-SharedLibrary"><function>SharedLibrary</function></link>. These flags are only used when <link linkend="cv-SHLIBVERSION"><envar>$SHLIBVERSION</envar></link> is
set.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHLINK">
    <term>
      <envar>SHLINK</envar>
    </term>
    <listitem><para>
The linker for programs that use shared libraries.
See also <link linkend="cv-LINK"><envar>$LINK</envar></link> for linking static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHLINKCOM">
    <term>
      <envar>SHLINKCOM</envar>
    </term>
    <listitem><para>
The command line used to link programs using shared libraries.
See also <link linkend="cv-LINKCOM"><envar>$LINKCOM</envar></link> for linking static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHLINKCOMSTR">
    <term>
      <envar>SHLINKCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when programs using shared libraries are linked.
If this is not set, then <link linkend="cv-SHLINKCOM"><envar>$SHLINKCOM</envar></link> (the command line) is displayed.
See also <link linkend="cv-LINKCOMSTR"><envar>$LINKCOMSTR</envar></link>  for linking static objects.
</para>

<example_commands>
env = Environment(SHLINKCOMSTR = "Linking shared $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHLINKFLAGS">
    <term>
      <envar>SHLINKFLAGS</envar>
    </term>
    <listitem><para>
General user options passed to the linker for programs using shared libraries.
Note that this variable should
<emphasis>not</emphasis>
contain
<option>-l</option>
(or similar) options for linking with the libraries listed in <link linkend="cv-LIBS"><envar>$LIBS</envar></link>,
nor
<option>-L</option>
(or similar) include search path options
that scons generates automatically from <link linkend="cv-LIBPATH"><envar>$LIBPATH</envar></link>.
See
<link linkend="cv-_LIBFLAGS"><envar>$_LIBFLAGS</envar></link>
above,
for the variable that expands to library-link options,
and
<link linkend="cv-_LIBDIRFLAGS"><envar>$_LIBDIRFLAGS</envar></link>
above,
for the variable that expands to library search path options.
See also <link linkend="cv-LINKFLAGS"><envar>$LINKFLAGS</envar></link>  for linking static objects.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHOBJPREFIX">
    <term>
      <envar>SHOBJPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for shared object file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SHOBJSUFFIX">
    <term>
      <envar>SHOBJSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for shared object file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SONAME">
    <term>
      <envar>SONAME</envar>
    </term>
    <listitem><para>
Variable used to hard-code SONAME for versioned shared library/loadable module.
<example_commands>
env.SharedLibrary('test', 'test.c', SHLIBVERSION='0.1.2', SONAME='libtest.so.2')
</example_commands>
The variable is used, for example, by <link linkend="t-gnulink"><literal>gnulink</literal></link> linker tool.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SOURCE">
    <term>
      <envar>SOURCE</envar>
    </term>
    <listitem><para>
A reserved variable name
that may not be set or used in a construction environment.
(See the manpage section "Variable Substitution"
for more information).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SOURCE_URL">
    <term>
      <envar>SOURCE_URL</envar>
    </term>
    <listitem><para>
The URL
(web address)
of the location from which the project was retrieved.
This is used to fill in the
<literal>Source:</literal>
field in the controlling information for Ipkg and RPM packages.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SOURCES">
    <term>
      <envar>SOURCES</envar>
    </term>
    <listitem><para>
A reserved variable name
that may not be set or used in a construction environment.
(See the manpage section "Variable Substitution"
for more information).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SPAWN">
    <term>
      <envar>SPAWN</envar>
    </term>
    <listitem><para>
A command interpreter function that will be called to execute command line
strings. The function must expect the following arguments:
</para>

<example_commands>
def spawn(shell, escape, cmd, args, env):
</example_commands>

<para>
<varname>sh</varname>
is a string naming the shell program to use.
<varname>escape</varname>
is a function that can be called to escape shell special characters in
the command line.
<varname>cmd</varname>
is the path to the command to be executed.
<varname>args</varname>
is the arguments to the command.
<varname>env</varname>
is a dictionary of the environment variables
in which the command should be executed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME">
    <term>
      <envar>STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME</envar>
    </term>
    <listitem><para>
      When this variable is true, static objects and shared objects are assumed to be the same; that is, SCons does not check for linking static objects into a shared library.
    </para>
  </listitem>
  </varlistentry>
  <varlistentry id="cv-SUBST_DICT">
    <term>
      <envar>SUBST_DICT</envar>
    </term>
    <listitem><para>
The dictionary used by the <function>Substfile</function> or <function>Textfile</function> builders
for substitution values.
It can be anything acceptable to the dict() constructor,
so in addition to a dictionary,
lists of tuples are also acceptable.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SUBSTFILEPREFIX">
    <term>
      <envar>SUBSTFILEPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for <function>Substfile</function> file names,
an empty string by default.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SUBSTFILESUFFIX">
    <term>
      <envar>SUBSTFILESUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for <function>Substfile</function> file names,
an empty string by default.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SUMMARY">
    <term>
      <envar>SUMMARY</envar>
    </term>
    <listitem><para>
A short summary of what the project is about.
This is used to fill in the
<literal>Summary:</literal>
field in the controlling information for Ipkg and RPM packages,
and as the
<literal>Description:</literal>
field in MSI packages.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SWIG">
    <term>
      <envar>SWIG</envar>
    </term>
    <listitem><para>
The scripting language wrapper and interface generator.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SWIGCFILESUFFIX">
    <term>
      <envar>SWIGCFILESUFFIX</envar>
    </term>
    <listitem><para>
The suffix that will be used for intermediate C
source files generated by
the scripting language wrapper and interface generator.
The default value is
<filename>_wrap</filename><link linkend="cv-CFILESUFFIX"><envar>$CFILESUFFIX</envar></link>.
By default, this value is used whenever the
<option>-c++</option>
option is
<emphasis>not</emphasis>
specified as part of the
<link linkend="cv-SWIGFLAGS"><envar>$SWIGFLAGS</envar></link>
construction variable.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SWIGCOM">
    <term>
      <envar>SWIGCOM</envar>
    </term>
    <listitem><para>
The command line used to call
the scripting language wrapper and interface generator.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SWIGCOMSTR">
    <term>
      <envar>SWIGCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when calling
the scripting language wrapper and interface generator.
If this is not set, then <link linkend="cv-SWIGCOM"><envar>$SWIGCOM</envar></link> (the command line) is displayed.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SWIGCXXFILESUFFIX">
    <term>
      <envar>SWIGCXXFILESUFFIX</envar>
    </term>
    <listitem><para>
The suffix that will be used for intermediate C++
source files generated by
the scripting language wrapper and interface generator.
The default value is
<filename>_wrap</filename><link linkend="cv-CFILESUFFIX"><envar>$CFILESUFFIX</envar></link>.
By default, this value is used whenever the
<filename>-c++</filename>
option is specified as part of the
<link linkend="cv-SWIGFLAGS"><envar>$SWIGFLAGS</envar></link>
construction variable.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SWIGDIRECTORSUFFIX">
    <term>
      <envar>SWIGDIRECTORSUFFIX</envar>
    </term>
    <listitem><para>
The suffix that will be used for intermediate C++ header
files generated by the scripting language wrapper and interface generator.
These are only generated for C++ code when the SWIG 'directors' feature is
turned on.
The default value is
<filename>_wrap.h</filename>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SWIGFLAGS">
    <term>
      <envar>SWIGFLAGS</envar>
    </term>
    <listitem><para>
General options passed to
the scripting language wrapper and interface generator.
This is where you should set
<option>-python</option>,
<option>-perl5</option>,
<option>-tcl</option>,
or whatever other options you want to specify to SWIG.
If you set the
<option>-c++</option>
option in this variable,
<command>scons</command>
will, by default,
generate a C++ intermediate source file
with the extension that is specified as the
<link linkend="cv-CXXFILESUFFIX"><envar>$CXXFILESUFFIX</envar></link>
variable.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_SWIGINCFLAGS">
    <term>
      <envar>_SWIGINCFLAGS</envar>
    </term>
    <listitem><para>
An automatically-generated construction variable
containing the SWIG command-line options
for specifying directories to be searched for included files.
The value of <envar>$_SWIGINCFLAGS</envar> is created
by respectively prepending and appending
<envar>$SWIGINCPREFIX</envar> and <envar>$SWIGINCSUFFIX</envar>
to the beginning and end
of each directory in <envar>$SWIGPATH</envar>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SWIGINCPREFIX">
    <term>
      <envar>SWIGINCPREFIX</envar>
    </term>
    <listitem><para>
The prefix used to specify an include directory on the SWIG command line.
This will be prepended to the beginning of each directory
in the <envar>$SWIGPATH</envar> construction variable
when the <envar>$_SWIGINCFLAGS</envar> variable is automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SWIGINCSUFFIX">
    <term>
      <envar>SWIGINCSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used to specify an include directory on the SWIG command line.
This will be appended to the end of each directory
in the <envar>$SWIGPATH</envar> construction variable
when the <envar>$_SWIGINCFLAGS</envar> variable is automatically generated.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SWIGOUTDIR">
    <term>
      <envar>SWIGOUTDIR</envar>
    </term>
    <listitem><para>
Specifies the output directory in which
the scripting language wrapper and interface generator
should place generated language-specific files.
This will be used by SCons to identify
the files that will be generated by the <application>swig</application> call,
and translated into the
<literal>swig -outdir</literal> option on the command line.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SWIGPATH">
    <term>
      <envar>SWIGPATH</envar>
    </term>
    <listitem><para>
The list of directories that the scripting language wrapper
and interface generate will search for included files.
The SWIG implicit dependency scanner will search these
directories for include files. The default value is an empty list.
</para>

<para>
Don't explicitly put include directory
arguments in SWIGFLAGS;
the result will be non-portable
and the directories will not be searched by the dependency scanner.
Note: directory names in SWIGPATH will be looked-up relative to the SConscript
directory when they are used in a command.
To force
<command>scons</command>
to look-up a directory relative to the root of the source tree use #:
</para>

<example_commands>
env = Environment(SWIGPATH='#/include')
</example_commands>

<para>
The directory look-up can also be forced using the
<function>Dir</function>()
function:
</para>

<example_commands>
include = Dir('include')
env = Environment(SWIGPATH=include)
</example_commands>

<para>
The directory list will be added to command lines
through the automatically-generated
<envar>$_SWIGINCFLAGS</envar>
construction variable,
which is constructed by
respectively prepending and appending the values of the
<envar>$SWIGINCPREFIX</envar> and <envar>$SWIGINCSUFFIX</envar>
construction variables
to the beginning and end
of each directory in <envar>$SWIGPATH</envar>.
Any command lines you define that need
the SWIGPATH directory list should
include <envar>$_SWIGINCFLAGS</envar>:
</para>

<example_commands>
env = Environment(SWIGCOM="my_swig -o $TARGET $_SWIGINCFLAGS $SOURCES")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-SWIGVERSION">
    <term>
      <envar>SWIGVERSION</envar>
    </term>
    <listitem><para>
The version number of the SWIG tool.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TAR">
    <term>
      <envar>TAR</envar>
    </term>
    <listitem><para>
The tar archiver.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TARCOM">
    <term>
      <envar>TARCOM</envar>
    </term>
    <listitem><para>
The command line used to call the tar archiver.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TARCOMSTR">
    <term>
      <envar>TARCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when archiving files
using the tar archiver.
If this is not set, then <link linkend="cv-TARCOM"><envar>$TARCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(TARCOMSTR = "Archiving $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TARFLAGS">
    <term>
      <envar>TARFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the tar archiver.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TARGET">
    <term>
      <envar>TARGET</envar>
    </term>
    <listitem><para>
A reserved variable name
that may not be set or used in a construction environment.
(See the manpage section "Variable Substitution"
for more information).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TARGET_ARCH">
    <term>
      <envar>TARGET_ARCH</envar>
    </term>
    <listitem><para>
        The name of the target hardware architecture for the compiled objects
        created by this Environment.
        This defaults to the value of HOST_ARCH, and the user can override it.
        Currently only set for Win32.
</para>
    <para>
Sets the target architecture for Visual Studio compiler (i.e. the arch
of the binaries generated by the compiler). If not set, default to
<envar>$HOST_ARCH</envar>, or, if that is unset, to the architecture of the
running machine's OS (note that the python build or architecture has no
effect).
This variable must be passed as an argument to the Environment()
constructor; setting it later has no effect.  
This is currently only used on Windows, but in the future it will be
used on other OSes as well.
If this is set and MSVC_VERSION is not set, this will search for 
all installed MSVC's that support the TARGET_ARCH, selecting the 
latest version for use.
</para>

<para>
Valid values for Windows are
<literal>x86</literal>,
<literal>arm</literal>,
<literal>i386</literal>
(for 32 bits); 
<literal>amd64</literal>,
<literal>arm64</literal>,
<literal>emt64</literal>,
<literal>x86_64</literal>
(for 64 bits);
and <literal>ia64</literal> (Itanium).

For example, if you want to compile 64-bit binaries, you would set
<literal>TARGET_ARCH='x86_64'</literal> in your SCons environment.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TARGET_OS">
    <term>
      <envar>TARGET_OS</envar>
    </term>
    <listitem><para>
        The name of the target operating system for the compiled objects
        created by this Environment.
        This defaults to the value of HOST_OS, and the user can override it.
        Currently only set for Win32.
</para>
    </listitem>
  </varlistentry>
  <varlistentry id="cv-TARGETS">
    <term>
      <envar>TARGETS</envar>
    </term>
    <listitem><para>
A reserved variable name
that may not be set or used in a construction environment.
(See the manpage section "Variable Substitution"
for more information).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TARSUFFIX">
    <term>
      <envar>TARSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for tar file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TEMPFILEARGJOIN">
    <term>
      <envar>TEMPFILEARGJOIN</envar>
    </term>
    <listitem><para>
The string (or character) to be used to join the arguments passed to TEMPFILE when command line exceeds the limit set by <envar>$MAXLINELENGTH</envar>.
The default value is a space. However for MSVC, MSLINK the default is a line seperator characters as defined by os.linesep.
Note this value is used literally and not expanded by the subst logic.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TEMPFILEPREFIX">
    <term>
      <envar>TEMPFILEPREFIX</envar>
    </term>
    <listitem><para>
The prefix for a temporary file used
to store lines lines longer than $MAXLINELENGTH
as operations which call out to a shell will fail
if the line is too long, which particularly
impacts linking.
The default is '@', which works for the Microsoft
and GNU toolchains on Windows.
Set this appropriately for other toolchains,
for example '-@' for the diab compiler
or '-via' for ARM toolchain.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TEMPFILESUFFIX">
    <term>
      <envar>TEMPFILESUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for the temporary file name
used for long command lines. The name should
include the dot ('.') if one is wanted as
it will not be added automatically.
The default is '.lnk'.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TEX">
    <term>
      <envar>TEX</envar>
    </term>
    <listitem><para>
The TeX formatter and typesetter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TEXCOM">
    <term>
      <envar>TEXCOM</envar>
    </term>
    <listitem><para>
The command line used to call the TeX formatter and typesetter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TEXCOMSTR">
    <term>
      <envar>TEXCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when calling
the TeX formatter and typesetter.
If this is not set, then <link linkend="cv-TEXCOM"><envar>$TEXCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(TEXCOMSTR = "Building $TARGET from TeX input $SOURCES")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TEXFLAGS">
    <term>
      <envar>TEXFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the TeX formatter and typesetter.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TEXINPUTS">
    <term>
      <envar>TEXINPUTS</envar>
    </term>
    <listitem><para>
List of directories that the LaTeX program will search
for include directories.
The LaTeX implicit dependency scanner will search these
directories for \include and \import files.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TEXTFILEPREFIX">
    <term>
      <envar>TEXTFILEPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for <function>Textfile</function> file names,
an empty string by default.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TEXTFILESUFFIX">
    <term>
      <envar>TEXTFILESUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for <function>Textfile</function> file names;
<filename>.txt</filename> by default.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-TOOLS">
    <term>
      <envar>TOOLS</envar>
    </term>
    <listitem><para>
A list of the names of the Tool specifications
that are part of this construction environment.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-UNCHANGED_SOURCES">
    <term>
      <envar>UNCHANGED_SOURCES</envar>
    </term>
    <listitem><para>
A reserved variable name
that may not be set or used in a construction environment.
(See the manpage section "Variable Substitution"
for more information).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-UNCHANGED_TARGETS">
    <term>
      <envar>UNCHANGED_TARGETS</envar>
    </term>
    <listitem><para>
A reserved variable name
that may not be set or used in a construction environment.
(See the manpage section "Variable Substitution"
for more information).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-VENDOR">
    <term>
      <envar>VENDOR</envar>
    </term>
    <listitem><para>
The person or organization who supply the packaged software.
This is used to fill in the
<literal>Vendor:</literal>
field in the controlling information for RPM packages,
and the
<literal>Manufacturer:</literal>
field in the controlling information for MSI packages.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-VERSION">
    <term>
      <envar>VERSION</envar>
    </term>
    <listitem><para>
The version of the project, specified as a string.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-VSWHERE">
    <term>
      <envar>VSWHERE</envar>
    </term>
    <listitem><para>
Specify the location of <filename>vswhere.exe</filename>. 
</para>

<para>
    The <filename>vswhere.exe</filename> executable is distributed with Microsoft Visual Studio and Build
    Tools since the 2017 edition, but is also available standalone.
    It provides full information about installations of 2017 and later editions.
    With the <option>-legacy</option> argument, <filename>vswhere.exe</filename> can detect installations of the 2010 through 2015
    editions with limited data returned.
If <envar>VSWHERE</envar> is set, SCons will use that location.
</para>
<para>
    Otherwise SCons will look in the following locations and set <envar>VSWHERE</envar> to the path of the first <filename>vswhere.exe</filename>
located.
</para>

<itemizedlist>
<listitem><para><literal>%ProgramFiles(x86)%\Microsoft Visual Studio\Installer</literal></para></listitem>
<listitem><para><literal>%ProgramFiles%\Microsoft Visual Studio\Installer</literal></para></listitem>
<listitem><para><literal>%ChocolateyInstall%\bin</literal></para></listitem>
</itemizedlist>

<para>
  Note that <envar>VSWHERE</envar> must be set at the same time or prior to any of <link linkend="t-msvc"><literal>msvc</literal></link>, <link linkend="t-msvs"><literal>msvs</literal></link> , and/or <link linkend="t-mslink"><literal>mslink</literal></link> <link linkend="f-Tool"><function>Tool</function></link> being initialized.

  Either set it as follows
<programlisting>
env = Environment(VSWHERE='c:/my/path/to/vswhere')
</programlisting>

or if your <phrase>construction environment</phrase> is created specifying an empty tools list
(or a list of tools which omits all of default, msvs, msvc, and mslink),
and also before <link linkend="f-Tool"><function>env.Tool</function></link> is called to ininitialize any of those tools:

<programlisting>
    env = Environment(tools=[])
    env['VSWHERE'] = r'c:/my/vswhere/install/location/vswhere.exe'
    env.Tool('msvc')
    env.Tool('mslink')
    env.Tool('msvs')
    </programlisting>
</para>

</listitem>
  </varlistentry>
  <varlistentry id="cv-WIN32_INSERT_DEF">
    <term>
      <envar>WIN32_INSERT_DEF</envar>
    </term>
    <listitem><para>
A deprecated synonym for <link linkend="cv-WINDOWS_INSERT_DEF"><envar>$WINDOWS_INSERT_DEF</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WIN32DEFPREFIX">
    <term>
      <envar>WIN32DEFPREFIX</envar>
    </term>
    <listitem><para>
A deprecated synonym for <link linkend="cv-WINDOWSDEFPREFIX"><envar>$WINDOWSDEFPREFIX</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WIN32DEFSUFFIX">
    <term>
      <envar>WIN32DEFSUFFIX</envar>
    </term>
    <listitem><para>
A deprecated synonym for <link linkend="cv-WINDOWSDEFSUFFIX"><envar>$WINDOWSDEFSUFFIX</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WIN32EXPPREFIX">
    <term>
      <envar>WIN32EXPPREFIX</envar>
    </term>
    <listitem><para>
A deprecated synonym for <link linkend="cv-WINDOWSEXPSUFFIX"><envar>$WINDOWSEXPSUFFIX</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WIN32EXPSUFFIX">
    <term>
      <envar>WIN32EXPSUFFIX</envar>
    </term>
    <listitem><para>
A deprecated synonym for <link linkend="cv-WINDOWSEXPSUFFIX"><envar>$WINDOWSEXPSUFFIX</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WINDOWS_EMBED_MANIFEST">
    <term>
      <envar>WINDOWS_EMBED_MANIFEST</envar>
    </term>
    <listitem><para>
Set this variable to True or 1 to embed the compiler-generated manifest
(normally <literal>${TARGET}.manifest</literal>)
into all Windows exes and DLLs built with this environment,
as a resource during their link step.
This is done using <link linkend="cv-MT"><envar>$MT</envar></link> and <link linkend="cv-MTEXECOM"><envar>$MTEXECOM</envar></link> and <link linkend="cv-MTSHLIBCOM"><envar>$MTSHLIBCOM</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WINDOWS_INSERT_DEF">
    <term>
      <envar>WINDOWS_INSERT_DEF</envar>
    </term>
    <listitem><para>
When this is set to true,
a library build of a Windows shared library
(<filename>.dll</filename> file)
will also build a corresponding <filename>.def</filename> file
at the same time,
if a <filename>.def</filename> file
is not already listed as a build target.
The default is 0 (do not build a <filename>.def</filename> file).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WINDOWS_INSERT_MANIFEST">
    <term>
      <envar>WINDOWS_INSERT_MANIFEST</envar>
    </term>
    <listitem><para>
When this is set to true,
<command>scons</command>
will be aware of the
<filename>.manifest</filename>
files generated by Microsoft Visua C/C++ 8.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WINDOWSDEFPREFIX">
    <term>
      <envar>WINDOWSDEFPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for Windows <filename>.def</filename> file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WINDOWSDEFSUFFIX">
    <term>
      <envar>WINDOWSDEFSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for Windows <filename>.def</filename> file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WINDOWSEXPPREFIX">
    <term>
      <envar>WINDOWSEXPPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for Windows <filename>.exp</filename> file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WINDOWSEXPSUFFIX">
    <term>
      <envar>WINDOWSEXPSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for Windows <filename>.exp</filename> file names.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WINDOWSPROGMANIFESTPREFIX">
    <term>
      <envar>WINDOWSPROGMANIFESTPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for executable program <filename>.manifest</filename> files
generated by Microsoft Visual C/C++.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WINDOWSPROGMANIFESTSUFFIX">
    <term>
      <envar>WINDOWSPROGMANIFESTSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for executable program <filename>.manifest</filename> files
generated by Microsoft Visual C/C++.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WINDOWSSHLIBMANIFESTPREFIX">
    <term>
      <envar>WINDOWSSHLIBMANIFESTPREFIX</envar>
    </term>
    <listitem><para>
The prefix used for shared library <filename>.manifest</filename> files
generated by Microsoft Visual C/C++.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-WINDOWSSHLIBMANIFESTSUFFIX">
    <term>
      <envar>WINDOWSSHLIBMANIFESTSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for shared library <filename>.manifest</filename> files
generated by Microsoft Visual C/C++.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_IPK_DEPENDS">
    <term>
      <envar>X_IPK_DEPENDS</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Depends:</literal>
field in the controlling information for Ipkg packages.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_IPK_DESCRIPTION">
    <term>
      <envar>X_IPK_DESCRIPTION</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Description:</literal>
field in the controlling information for Ipkg packages.
The default value is
<literal>$SUMMARY\n$DESCRIPTION</literal>
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_IPK_MAINTAINER">
    <term>
      <envar>X_IPK_MAINTAINER</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Maintainer:</literal>
field in the controlling information for Ipkg packages.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_IPK_PRIORITY">
    <term>
      <envar>X_IPK_PRIORITY</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Priority:</literal>
field in the controlling information for Ipkg packages.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_IPK_SECTION">
    <term>
      <envar>X_IPK_SECTION</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Section:</literal>
field in the controlling information for Ipkg packages.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_MSI_LANGUAGE">
    <term>
      <envar>X_MSI_LANGUAGE</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Language:</literal>
attribute in the controlling information for MSI packages.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_MSI_LICENSE_TEXT">
    <term>
      <envar>X_MSI_LICENSE_TEXT</envar>
    </term>
    <listitem><para>
The text of the software license in RTF format.
Carriage return characters will be
replaced with the RTF equivalent \\par.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_MSI_UPGRADE_CODE">
    <term>
      <envar>X_MSI_UPGRADE_CODE</envar>
    </term>
    <listitem><para>
TODO
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_AUTOREQPROV">
    <term>
      <envar>X_RPM_AUTOREQPROV</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>AutoReqProv:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_BUILD">
    <term>
      <envar>X_RPM_BUILD</envar>
    </term>
    <listitem><para>
internal, but overridable
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_BUILDREQUIRES">
    <term>
      <envar>X_RPM_BUILDREQUIRES</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>BuildRequires:</literal>
field in the RPM
<filename>.spec</filename> file.
Note this should only be used on a host managed by rpm as the dependencies will not be resolvable at build time otherwise.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_BUILDROOT">
    <term>
      <envar>X_RPM_BUILDROOT</envar>
    </term>
    <listitem><para>
internal, but overridable
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_CLEAN">
    <term>
      <envar>X_RPM_CLEAN</envar>
    </term>
    <listitem><para>
internal, but overridable
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_CONFLICTS">
    <term>
      <envar>X_RPM_CONFLICTS</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Conflicts:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_DEFATTR">
    <term>
      <envar>X_RPM_DEFATTR</envar>
    </term>
    <listitem><para>
This value is used as the default attributes
for the files in the RPM package.
The default value is
<literal>(-,root,root)</literal>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_DISTRIBUTION">
    <term>
      <envar>X_RPM_DISTRIBUTION</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Distribution:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_EPOCH">
    <term>
      <envar>X_RPM_EPOCH</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Epoch:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_EXCLUDEARCH">
    <term>
      <envar>X_RPM_EXCLUDEARCH</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>ExcludeArch:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_EXLUSIVEARCH">
    <term>
      <envar>X_RPM_EXLUSIVEARCH</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>ExclusiveArch:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_EXTRADEFS">
    <term>
      <envar>X_RPM_EXTRADEFS</envar>
    </term>
    <listitem><para>
A list used to supply extra defintions or flags
to be added to the RPM <filename>.spec</filename> file.
Each item is added as-is with a carriage return appended.
This is useful if some specific RPM feature not otherwise
anticipated by SCons needs to be turned on or off.
Note if this variable is omitted, SCons will by
default supply the value
<literal>'%global debug_package %{nil}'</literal>
to disable debug package generation.
To enable debug package generation, include this
variable set either to None, or to a custom
list that does not include the default line.
Added in version 3.1.
</para>

<example_commands>
env.Package(
    NAME="foo",
    ...
    X_RPM_EXTRADEFS=[
        "%define _unpackaged_files_terminate_build 0"
        "%define _missing_doc_files_terminate_build 0"
    ],
    ...
)
</example_commands>

</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_GROUP">
    <term>
      <envar>X_RPM_GROUP</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Group:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_GROUP_lang">
    <term>
      <envar>X_RPM_GROUP_lang</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Group(lang):</literal>
field in the RPM
<filename>.spec</filename> file.
Note that
<varname>lang</varname>
is not literal
and should be replaced by
the appropriate language code.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_ICON">
    <term>
      <envar>X_RPM_ICON</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Icon:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_INSTALL">
    <term>
      <envar>X_RPM_INSTALL</envar>
    </term>
    <listitem><para>
internal, but overridable
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_PACKAGER">
    <term>
      <envar>X_RPM_PACKAGER</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Packager:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_POSTINSTALL">
    <term>
      <envar>X_RPM_POSTINSTALL</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>%post:</literal>
section in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_POSTUNINSTALL">
    <term>
      <envar>X_RPM_POSTUNINSTALL</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>%postun:</literal>
section in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_PREFIX">
    <term>
      <envar>X_RPM_PREFIX</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Prefix:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_PREINSTALL">
    <term>
      <envar>X_RPM_PREINSTALL</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>%pre:</literal>
section in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_PREP">
    <term>
      <envar>X_RPM_PREP</envar>
    </term>
    <listitem><para>
internal, but overridable
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_PREUNINSTALL">
    <term>
      <envar>X_RPM_PREUNINSTALL</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>%preun:</literal>
section in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_PROVIDES">
    <term>
      <envar>X_RPM_PROVIDES</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Provides:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_REQUIRES">
    <term>
      <envar>X_RPM_REQUIRES</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Requires:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_SERIAL">
    <term>
      <envar>X_RPM_SERIAL</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Serial:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-X_RPM_URL">
    <term>
      <envar>X_RPM_URL</envar>
    </term>
    <listitem><para>
This is used to fill in the
<literal>Url:</literal>
field in the RPM
<filename>.spec</filename> file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-XGETTEXT">
    <term>
      <envar>XGETTEXT</envar>
    </term>
    <listitem><para>
Path to <command>xgettext(1)</command> program (found via
<function>Detect()</function>).
See <link linkend="t-xgettext"><literal>xgettext</literal></link> tool and <link linkend="b-POTUpdate"><function>POTUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-XGETTEXTCOM">
    <term>
      <envar>XGETTEXTCOM</envar>
    </term>
    <listitem><para>
Complete xgettext command line.
See <link linkend="t-xgettext"><literal>xgettext</literal></link> tool and <link linkend="b-POTUpdate"><function>POTUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-XGETTEXTCOMSTR">
    <term>
      <envar>XGETTEXTCOMSTR</envar>
    </term>
    <listitem><para>
A string that is shown when <command>xgettext(1)</command> command is invoked
(default: <literal>''</literal>, which means "print <link linkend="cv-XGETTEXTCOM"><envar>$XGETTEXTCOM</envar></link>").
See <link linkend="t-xgettext"><literal>xgettext</literal></link> tool and <link linkend="b-POTUpdate"><function>POTUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_XGETTEXTDOMAIN">
    <term>
      <envar>_XGETTEXTDOMAIN</envar>
    </term>
    <listitem><para>
Internal "macro". Generates <command>xgettext</command> domain name
form source and target (default: <literal>'${TARGET.filebase}'</literal>).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-XGETTEXTFLAGS">
    <term>
      <envar>XGETTEXTFLAGS</envar>
    </term>
    <listitem><para>
Additional flags to <command>xgettext(1)</command>.
See <link linkend="t-xgettext"><literal>xgettext</literal></link> tool and <link linkend="b-POTUpdate"><function>POTUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-XGETTEXTFROM">
    <term>
      <envar>XGETTEXTFROM</envar>
    </term>
    <listitem><para>
Name of file containing list of <command>xgettext(1)</command>'s source
files. Autotools' users know this as <filename>POTFILES.in</filename> so they
will in most cases set <literal>XGETTEXTFROM="POTFILES.in"</literal> here.
The <envar>$XGETTEXTFROM</envar> files have same syntax and semantics as the well known
GNU <filename>POTFILES.in</filename>.
See <link linkend="t-xgettext"><literal>xgettext</literal></link> tool and <link linkend="b-POTUpdate"><function>POTUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_XGETTEXTFROMFLAGS">
    <term>
      <envar>_XGETTEXTFROMFLAGS</envar>
    </term>
    <listitem><para>
Internal "macro". Genrates list of <literal>-D&lt;dir&gt;</literal> flags
from the <link linkend="cv-XGETTEXTPATH"><envar>$XGETTEXTPATH</envar></link> list.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-XGETTEXTFROMPREFIX">
    <term>
      <envar>XGETTEXTFROMPREFIX</envar>
    </term>
    <listitem><para>
This flag is used to add single <link linkend="cv-XGETTEXTFROM"><envar>$XGETTEXTFROM</envar></link> file to
<command>xgettext(1)</command>'s commandline (default:
<literal>'-f'</literal>).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-XGETTEXTFROMSUFFIX">
    <term>
      <envar>XGETTEXTFROMSUFFIX</envar>
    </term>
    <listitem><para>
(default: <literal>''</literal>)
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-XGETTEXTPATH">
    <term>
      <envar>XGETTEXTPATH</envar>
    </term>
    <listitem><para>
List of directories, there <command>xgettext(1)</command> will look for
source files (default: <literal>[]</literal>).
<note><para>
This variable works only together with <link linkend="cv-XGETTEXTFROM"><envar>$XGETTEXTFROM</envar></link>
</para></note>
See also <link linkend="t-xgettext"><literal>xgettext</literal></link> tool and <link linkend="b-POTUpdate"><function>POTUpdate</function></link> builder.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-_XGETTEXTPATHFLAGS">
    <term>
      <envar>_XGETTEXTPATHFLAGS</envar>
    </term>
    <listitem><para>
Internal "macro". Generates list of <literal>-f&lt;file&gt;</literal> flags
from <link linkend="cv-XGETTEXTFROM"><envar>$XGETTEXTFROM</envar></link>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-XGETTEXTPATHPREFIX">
    <term>
      <envar>XGETTEXTPATHPREFIX</envar>
    </term>
    <listitem><para>
This flag is used to add single search path to
<command>xgettext(1)</command>'s commandline (default:
<literal>'-D'</literal>).
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-XGETTEXTPATHSUFFIX">
    <term>
      <envar>XGETTEXTPATHSUFFIX</envar>
    </term>
    <listitem><para>
(default: <literal>''</literal>)
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-YACC">
    <term>
      <envar>YACC</envar>
    </term>
    <listitem><para>
The parser generator.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-YACCCOM">
    <term>
      <envar>YACCCOM</envar>
    </term>
    <listitem><para>
The command line used to call the parser generator
to generate a source file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-YACCCOMSTR">
    <term>
      <envar>YACCCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when generating a source file
using the parser generator.
If this is not set, then <link linkend="cv-YACCCOM"><envar>$YACCCOM</envar></link> (the command line) is displayed.
</para>

<example_commands>
env = Environment(YACCCOMSTR = "Yacc'ing $TARGET from $SOURCES")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-YACCFLAGS">
    <term>
      <envar>YACCFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the parser generator.
If <link linkend="cv-YACCFLAGS"><envar>$YACCFLAGS</envar></link> contains a <option>-d</option> option,
SCons assumes that the call will also create a .h file
(if the yacc source file ends in a .y suffix)
or a .hpp file
(if the yacc source file ends in a .yy suffix)
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-YACCHFILESUFFIX">
    <term>
      <envar>YACCHFILESUFFIX</envar>
    </term>
    <listitem><para>
The suffix of the C
header file generated by the parser generator
when the
<option>-d</option>
option is used.
Note that setting this variable does not cause
the parser generator to generate a header
file with the specified suffix,
it exists to allow you to specify
what suffix the parser generator will use of its own accord.
The default value is
<filename>.h</filename>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-YACCHXXFILESUFFIX">
    <term>
      <envar>YACCHXXFILESUFFIX</envar>
    </term>
    <listitem><para>
The suffix of the C++
header file generated by the parser generator
when the
<option>-d</option>
option is used.
Note that setting this variable does not cause
the parser generator to generate a header
file with the specified suffix,
it exists to allow you to specify
what suffix the parser generator will use of its own accord.
The default value is
<filename>.hpp</filename>,
except on Mac OS X,
where the default is
<filename>${TARGET.suffix}.h</filename>.
because the default <application>bison</application> parser generator just
appends <filename>.h</filename>
to the name of the generated C++ file.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-YACCVCGFILESUFFIX">
    <term>
      <envar>YACCVCGFILESUFFIX</envar>
    </term>
    <listitem><para>
The suffix of the file
containing the VCG grammar automaton definition
when the
<option>--graph=</option>
option is used.
Note that setting this variable does not cause
the parser generator to generate a VCG
file with the specified suffix,
it exists to allow you to specify
what suffix the parser generator will use of its own accord.
The default value is
<filename>.vcg</filename>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ZIP">
    <term>
      <envar>ZIP</envar>
    </term>
    <listitem><para>
The zip compression and file packaging utility.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ZIPCOM">
    <term>
      <envar>ZIPCOM</envar>
    </term>
    <listitem><para>
The command line used to call the zip utility,
or the internal Python function used to create a
zip archive.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ZIPCOMPRESSION">
    <term>
      <envar>ZIPCOMPRESSION</envar>
    </term>
    <listitem><para>
The
<varname>compression</varname>
flag
from the Python
<filename>zipfile</filename>
module used by the internal Python function
to control whether the zip archive
is compressed or not.
The default value is
<literal>zipfile.ZIP_DEFLATED</literal>,
which creates a compressed zip archive.
This value has no effect if the
<literal>zipfile</literal>
module is unavailable.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ZIPCOMSTR">
    <term>
      <envar>ZIPCOMSTR</envar>
    </term>
    <listitem><para>
The string displayed when archiving files
using the zip utility.
If this is not set, then <link linkend="cv-ZIPCOM"><envar>$ZIPCOM</envar></link>
(the command line or internal Python function) is displayed.
</para>

<example_commands>
env = Environment(ZIPCOMSTR = "Zipping $TARGET")
</example_commands>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ZIPFLAGS">
    <term>
      <envar>ZIPFLAGS</envar>
    </term>
    <listitem><para>
General options passed to the zip utility.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ZIPROOT">
    <term>
      <envar>ZIPROOT</envar>
    </term>
    <listitem><para>
An optional zip root directory (default empty).  The filenames stored
in the zip file will be relative to this directory, if given.
Otherwise the filenames are relative to the current directory of the
command.
For instance:
</para>
<example_commands>
env = Environment()
env.Zip('foo.zip', 'subdir1/subdir2/file1', ZIPROOT='subdir1')
</example_commands>
<para>
will produce a zip file <literal>foo.zip</literal>
containing a file with the name
<literal>subdir2/file1</literal> rather than
<literal>subdir1/subdir2/file1</literal>.
</para>
</listitem>
  </varlistentry>
  <varlistentry id="cv-ZIPSUFFIX">
    <term>
      <envar>ZIPSUFFIX</envar>
    </term>
    <listitem><para>
The suffix used for zip file names.
</para>
</listitem>
  </varlistentry>
</variablelist>
