RELEASE 0.97.0d20070809 - Fri, 10 Aug 2007 10:51:27 -0500

  From Lars Albertsson:

  - Don't error if a #include line happens to match a directory
    somewhere on a path (like $CPPPATH, $FORTRANPATH, etc.).

  From Mark Bertoglio:

  - Fix listing multiple projects in Visual Studio 7.[01] solution files,
    including generating individual project GUIDs instead of re-using
    the solution GUID.

  From Jean Brouwers:

  - Add /opt/SUNWspro/bin to the default execution PATH on Solaris.

  From Allan Erskine:

  - Only expect the Microsoft IDL compiler to emit *_p.c and *_data.c
    files if the /proxy and /dlldata switches are used (respectively).

  From Steven Knight:

  - Have --debug=explain report if a target is being rebuilt because
    AlwaysBuild() is specified (instead of "unknown reasons").

  - Support {Get,Set}Option('help') to make it easier for SConscript
    files to tell if a help option (-h, --help, etc.) has been specified.

  - Support {Get,Set}Option('random') so random-dependency interaction
    with CacheDir() is controllable from SConscript files.

  - Add a new AddOption() function to support user-defined command-
    line flags (like --prefix=, --force, etc.).

  - Replace modified Optik version with new optparse compatibility module
    for command line processing in Scripts/SConsOptions.py

  - Push and retrieve built symlinks to/from a CacheDir() as actual
    symlinks, not by copying the file contents.

  - Fix how the Action module handles stringifying the shared library
    generator in the Tool/mingw.py module.

  - When generating a config.h file, print "#define HAVE_{FEATURE} 1"
    instad of just "#define HAVE_{FEATURE}", for more compatibility
    with Autoconf-style projects.

  - Fix expansion of $TARGET, $TARGETS, $SOURCE and $SOURCES keywords in
    Visual C/C++ PDB file names.

  - Fix locating Visual C/C++ PDB files in build directories.

  - Support an env.AddMethod() method and an AddMethod() global function
    for adding a new method, respectively, to a construction environment
    or an arbitrary object (such as a class).

  - Fix the --debug=time option when the -j option is specified and all
    files are up to date.

  - Add a $SWIGOUTDIR variable to allow setting the swig -outdir option,
    and use it to identify files created by the swig -java option.

  - Add a $SWIGPATH variable that specifies the path to be searched
    for included SWIG files, Also add related $SWIGINCPREFIX and
    $SWIGINCSUFFIX variables that specify the prefix and suffix to
    be be added to each $SWIGPATH directory when expanded on the SWIG
    command line.

  - More efficient copying of construction environments (mostly borrowed
    from copy.deepcopy() in the standard Python library).

  - When printing --tree=prune output, don't print [brackets] around
    source files, only do so for built targets with children.

  - Fix interpretation of Builder source arguments when the Builder has
    a src_suffix *and* a source_builder and the argument has no suffix.

  - Fix use of expansions like ${TARGET.dir} or ${SOURCE.dir} in the
    following construction variables:  $FORTRANMODDIR, $JARCHDIR,
    $JARFLAGS, $LEXFLAGS, $SWIGFLAGS, $SWIGOUTDIR and $YACCFLAGS.

  - Fix dependencies on Java files generated by SWIG so they can be
    detected and built in one pass.

  - Fix SWIG when used with a BuildDir().

  From Leanid Nazdrynau:

  - When applying Tool modules after a construction environment has
    already been created, don't overwrite existing $CFILESUFFIX and
    $CXXFILESUFFIX value.

  - Support passing the Java() builder a list of explicit .java files
    (not only a list of directories to be scanned for .java files).

  - Support passing .java files to the Jar() and JavaH() builders, which
    then use the builder underlying the Java() builder to turn them into
    .class files.  (That is, the Jar()-Java() chain of builders become
    multi-step, like the Program()-Object()-CFile() builders.)

  - Support passing SWIG .i files to the Java builders (Java(),
    Jar(), JavaH()), to cause intermediate .java files to be created
    automatically.

  - Add $JAVACLASSPATH and $JAVASOURCEPATH variables, that get added to
    the javac "-classpath" and "-sourcepath" options.  (Note that SCons
    does *not* currently search these paths for implicit dependencies.)

  - Commonize initialization of Java-related builders.

  From Jan Nijtmans:

  - Find Java anonymous classes when the next token after the name is
    an open parenthesis.

  From Gary Oberbrunner:

  - Fix a code example in the man page.

  From Tilo Prutz:

  - Add support for the file names that Java 1.5 (and 1.6) generates for
    nested anonymous inner classes, which are different from Java 1.4.

  From Adam Simpkins:

  - Allow worker threads to terminate gracefully when all jobs are
    finished.

  From Sohail Somani:

  - Add LaTeX scanner support for finding dependencies specified with
    the \usepackage{} directive.
