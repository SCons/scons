RELEASE 4.2.0 - Sat, 31 Jul 2021 18:12:46 -0700

  From Byron Platt:
    - Fix Install() issue when copytree recursion gives bad arguments that can
      lead to install side-effects including keeping dangling symlinks and
      silently failing to copy directories (and their subdirectories) when the
      directory already exists in the target.

  From Joseph Brill:
    - Internal MSVS update: Remove unnecessary calls to find all installed versions of msvc
      when constructing the installed visual studios list.

  From William Deegan:
    - Improve Subst()'s logic to check for proper callable function or class's argument list.
      It will now allow callables with expected args, and any extra args as long as they
      have default arguments. Additionally functions with no defaults for extra arguments
      as long as they are set using functools.partial to create a new callable which set them.
    - Fix Issue #3035 - mingw with SHLIBVERSION set fails with either not a dll error or
      "Multiple ways to build the same target were specified for:".  Now mingw will disable
      creating the symlinks (and adding version string to ) dlls.  It sets SHLIBNOVERSIONSYMLINKS,
      IMPLIBNOVERSIONSYMLINKS and LDMODULENOVERSIONSYMLINKS to True.
    - Added --experimental flag, to enable various experimental features/tools.  You can specify
      'all', 'none', or any combination of available experimental features.
    - Fix Issue #3933 - Remove unguarded print of debug information in SharedLibrary logic when
      SHLIBVERSION is specified.
    - Fix versioned shared library naming for MacOS platform. (Previously was libxyz.dylib.1.2.3,
      has been fixed to libxyz.1.2.3.dylib. Additionally the sonamed symlink had the same issue,
      that is now resolved as well)
    - Add experimental ninja builder. (Contributed by MongoDB, Daniel Moody and many others).
    - Fix #3955 - _LIBDIRFLAGS leaving $( and $) in *COMSTR output.  Added affect_signature flag to
      _concat function.  If set to False, it will prepend and append $( and $). That way the various
      Environment variables can use that rather than "$( _concat(...) $)".
    - Fix issue with exparimental ninja tool which would fail on windows or when ninja package wasn't
      installed but --experimental=ninja was specified.
    - As part of experimental ninja tool, allow SetOption() to set both disable_execute_ninja and
      disable_ninja.

  From David H:
    - Fix Issue #3906 - `IMPLICIT_COMMAND_DEPENDENCIES` was not properly disabled when
      set to any string value (For example ['none','false','no','off'])
      Also previously 'All' wouldn't have the desired affect.

  From Ivan Kravets:
    - Provide a custom argument escape function for `TempFileMunge` using a new
      `TEMPFILEARGESCFUNC` variable. Useful if you need to apply extra operations on
      a command argument before writing to a temporary file (fix Windows slashes,
      normalize paths, etc.)

  From Henrik Maier:
   - DocbookXslt tool: The XSLT stylesheet file is now initialized to an env.File() Node,
     such that dependencies work correctly in hierarchical builds (eg when using
     DocbookXslt in SConscript('subdir/SConscript') context.

  From Daniel Moody:
    - Update CacheDir to use uuid for tmpfile uniqueness instead of pid.
      This fixes cases for shared cache where two systems write to the same
      cache tmpfile at the same time because the happened to get the same pid.
    - Added support for passing custom CacheDir derived classes to SCons. Moved
      copy_from_cache attribute from the Environment class to CacheDir class.
      Code contributed by MongoDB.
    - Update BuildTask to pass all targets to the progress object fixing an issue
      where multi-target build nodes only got the first target passed to the progress
      object.
    - Fix a potential race condition in shared cache environments where the permissions are
      not writeable for a moment after the file has been renamed and other builds (users) will copy
      it out of the cache. Small reorganization of logic to copy files from cachedir. Moved CacheDir
      writeable permission code for copy to cache behind the atomic rename operation.
    - Added marking of intermediate and and multi target nodes generated from SConf tests so that
      is_conftest() is more accurate.
    - Added test for configure check failing to ensure it didn't break generating and running ninja.


  From Mats Wichmann:
    - Initial support in tests for Python 3.10 - expected bytecode and
      one changed expected exception message. Change some more regexes
      to be specified as rawstrings in response to DeprecationWarnings.
    - Add an example of adding an emitter to User Guide (concept
      from Jeremy Elson)
    - Add timing information for sconsign database dump when --debug=time
      is selected. Also switch to generally using time.perf_counter,
      which is the Python recommended way for timing short durations.
    - Drop remaining definitions of dict-like has_key methods, since
      Python 3 doesn't have a dictionary has_key (maintenance)
    - Do not treat --site-dir=DIR and --no-site-dir as distinct options.
      Allows a later instance to override an earlier one.
    - Ignore empty cmdline arguments when computing targets (issue 2986)
    - Remove long-deprecated construction variables PDFCOM, WIN32_INSERT_DEF,
      WIN32DEFPREFIX, WIN32DEFSUFFIX, WIN32EXPPREFIX, WIN32EXPSUFFIX.
      All have been replaced by other names since at least 1.0.
    - Add a __iadd__ method to the CLVar class so that inplace adds
      (+=) also work as expected (issue 2399)
    - Remove local copy of CLVar in EnvironmentTests unittest file -
      should be testing against the production version, and they
      didn't really differ.
    - Don't strip spaces in INSTALLSTR by using raw subst (issue 2018)
    - Deprecate Python 3.5 as a supported version.
    - CPPDEFINES now expands construction variable references (issue 2363)
    - Restore behavior that Install()'d files are writable (issue 3927)
    - Simplified Mkdir(), the internal mkdir_func no longer needs to handle
      existing directories, it can now pass exist_ok=True to os.makedirs().
    - Avoid WhereIs exception if user set a tool name to empty (from issue 1742)
    - Maintenance: remove obsolete __getslice__ definitions (Py3 never calls);
      add Node.fs.scandir to call new (Py3.5) os.scandir; Node.fs.makedirs
      now passes the exist_ok flag; Cachedir creation now uses this flag.
    - Maintenance: remove unneeded imports and reorganize some.  Fix uses
      of warnings in some tools which instantiated the class but did nothing
      with them, need to instead call SCons.Warnings.warn with the warn class.
    - Drop overridden changed_since_last_build method in Value class.
    - Resync the SetOption implementation and the manpage, making sure new
      options are available and adding a notes column for misc information.
      SetOption equivalents to --hash-chunksize, --implicit-deps-unchanged
      and --implicit-deps-changed are enabled.
    - Add tests for SetOption failing on disallowed options and value types.
    - Maintenance: eliminate lots of checker complaints about Util.py.
    - Maintenance: fix checker-spotted issues in Environment (apply_tools)
      and EnvironmentTests (asserts comparing with self).
      For consistency, env.Tool() now returns a tool object the same way
      Tool() has done.
    - Change SConscript() missing SConscript behavior - if must_exist=False,
      the warning is suppressed.
    - Make sure TEMPFILEPREFIX can be set to an empty string (issue 3964)

  From Dillan Mills:
    - Add support for the (TARGET,SOURCE,TARGETS,SOURCES,CHANGED_TARGETS,CHANGED_SOURCES}.relpath property.
      This will provide a path relative to the top of the build tree (where the SConstruct is located)
      Fixes #396

  From Andrew Morrow:
    - Fix issue #3790: Generators in CPPDEFINES now have access to populated source
      and target lists
