RELEASE 0.98 - Sun, 30 Mar 2008 23:33:05 -0700

  From Benoit Belley:

  - Fix the --keep-going flag so it builds all possible targets even when
    a later top-level target depends on a child that failed its build.

  - Fix being able to use $PDB and $WINDWOWS_INSERT_MANIFEST together.

  - Don't crash if un-installing the Intel C compiler leaves left-over,
    dangling entries in the Windows registry.

  - Improve support for non-standard library prefixes and suffixes by
    stripping all prefixes/suffixes from file name string as appropriate.

  - Reduce the default stack size for -j worker threads to 256 Kbytes.
    Provide user control over this value by adding --stack-size and
    --warn=stack-size options, and a SetOption('stack_size') function.

  - Fix a crash on Linux systems when trying to use the Intel C compiler
    and no /opt/intel_cc_* directories are found.

  - Improve using Python functions as actions by incorporating into
    a FunctionAction's signature:
      - literal values referenced by the byte code.
      - values of default arguments
      - code of nested functions
      - values of variables captured by closures
      - names of referenced global variables and functions

  - Fix the closing message when --clean and --keep-going are both
    used and no errors occur.

  - Add support for the Intel C compiler on Mac OS X.

  - Speed up reading SConscript files by about 20% (for some
    configurations) by:  1) optimizing the SCons.Util.is_*() and
    SCons.Util.flatten() functions; 2) avoiding unnecessary os.stat()
    calls by using a File's .suffix attribute directly instead of
    stringifying it.

  From JÃ©rÃ´me Berger:

  - Have the D language scanner search for .di files as well as .d files.

  - Add a find_include_names() method to the Scanner.Classic class to
    abstract out how included names can be generated by subclasses.

  - Allow the D language scanner to detect multiple modules imported by
    a single statement.

  From Konstantin Bozhikov:

  - Support expansion of construction variables that contain or refer
    to lists of other variables or Nodes within expansions like $CPPPATH.

  - Change variable substitution (the env.subst() method) so that an
    input sequence (list or tuple) is preserved as a list in the output.

  From David Cournapeau:

  - Add a CheckDeclaration() call to configure contexts.

  - Improve the CheckTypeSize() code.

  - Add a Define() call to configure contexts, to add arbitrary #define
    lines to a generated configure header file.

  - Add a "gfortran" Tool module for the GNU F95/F2003 compiler.

  - Avoid use of -rpath with the Mac OS X linker.

  - Add comment lines to the generated config.h file to describe what
    the various #define/#undef lines are doing.

  From Steven Knight:

  - Support the ability to subclass the new-style "str" class as input
    to Builders.

  - Improve the performance of our type-checking by using isinstance()
    with new-style classes.

  - Fix #include (and other $*PATH variables searches) of files with
    absolute path names.  Don't die if they don't exist (due to being
    #ifdef'ed out or the like).

  - Fix --interactive mode when Default(None) is used.

  - Fix --debug=memoizer to work around a bug in base Python 2.2 metaclass
    initialization (by just not allowing Memoization in Python versions
    that have the bug).

  - Have the "scons-time time" subcommand handle empty log files, and
    log files that contain no results specified by the --which option.

  - Fix the max Y of vertical bars drawn by "scons-time --fmt=gnuplot".

  - On Mac OS X, account for the fact that the header file generated
    from a C++ file will be named (e.g.) file.cpp.h, not file.hpp.

  - Fix floating-point numbers confusing the Java parser about
    generated .class file names in some configurations.

  - Document (nearly) all the values you can now fetch with GetOption().

  - Fix use of file names containing strings of multiple spaces when
    using ActionFactory instances like the Copy() or Move() function.

  - Fix a 0.97 regression when using a variable expansion (like
    $OBJSUFFIX) in a source file name to a builder with attached source
    builders that match suffix (like Program()+Object()).

  - Have the Java parser recognize generics (surrounded by angle brackets)
    so they don't interfere with identifying anonymous inner classes.

  - Avoid an infinite loop when trying to use saved copies of the
    env.Install() or env.InstallAs() after replacing the method
    attributes.

  - Improve the performance of setting construction variables.

  - When cloning a construction environment, avoid over-writing an
    attribute for an added method if the user explicitly replaced it.

  - Add a warning about deprecated support for Python 1.5, 2.0 and 2.1.

  - Fix being able to SetOption('warn', ...) in SConscript files.

  - Add a warning about env.Copy() being deprecated.

  - Add warnings about the --debug={dtree,stree,tree} options
    being deprecated.

  - Add VariantDir() as the first step towards deprecating BuildDir().
    Add the keyword argument "variant_dir" as the replacement for
    "build_dir".

  - Add warnings about the {Target,Source}Signatures() methods and
    functions being deprecated.

  From Rob Managan:

  - Enhance TeX and LaTeX support to work with BuildDir(duplicate=0).

  - Re-run LaTeX when it issues a package warning that it must be re-run.

  From Leanid Nazdrynau:

  - Have the Copy() action factory preserve file modes and times
    when copying individual files.

  From Jan Nijtmans:

  - If $JARCHDIR isn't set explicitly, use the .java_classdir attribute
    that was set when the Java() Builder built the .class files.

  From Greg Noel:

  - Document the Dir(), File() and Entry() methods of Dir and File Nodes.

  - Add the parse_flags option when creating Environments

  From Gary Oberbrunner:

  - Make File(), Dir() and Entry() return a list of Nodes when passed
    a list of names, instead of trying to make a string from the name
    list and making a Node from that string.

  - Fix the ability to build an Alias in --interactive mode.

  - Fix the ability to hash the contents of actions for nested Python
    functions on Python versions where the inability to pickle them
    returns a TypeError (instead of the documented PicklingError).

  From Jonas Olsson:

  - Fix use of the Intel C compiler when the top compiler directory,
    but not the compiler version, is specified.

  - Handle Intel C compiler network license files (port@system).

  From Jim Randall:

  - Fix how Python Value Nodes are printed in --debug=explain output.

  From Adam Simpkins:

  - Add a --interactive option that starts a session for building (or
    cleaning) targets without re-reading the SConscript files every time.

  - Fix use of readline command-line editing in --interactive mode.

  - Have the --interactive mode "build" command with no arguments
    build the specified Default() targets.

  - Fix the Chmod(), Delete(), Mkdir() and Touch() Action factories to
    take a list (of Nodes or strings) as arguments.

  From Vaclav Smilauer:

  - Fix saving and restoring an Options value of 'all' on Python
    versions where all() is a builtin function.

  From Daniel Svensson:

  - Code correction in SCons.Util.is_List().

  From Ben Webb:

  - Support the SWIG %module statement with following modifiers in
    parenthese (e.g., '%module(directors="1")').
