RELEASE 0.91 - Thu, 14 Aug 2003 13:00:44 -0500

  From Chad Austin:

  - Support specifying a list of tools when calling Environment.Copy().

  - Give a Value Nodes a timestamp of the system time when they're
    created, so they'll work when using timestamp-based signatures.

  - Add a DefaultEnvironment() function that only creates a default
    environment on-demand (for fetching source files, e.g.).

  - Portability fix for test/M4.py.

  From Steven Knight:

  - Tighten up the scons -H help output.

  - When the input yacc file ends in .yy and the -d flag is specified,
    recognize that a .hpp file (not a .h file) will be created.

  - Make builder prefixes work correctly when deducing a target
    from a source file name in another directory.

  - Documentation fixes: typo in the man page; explain up-front about
    not propagating the external environment.

  - Use "cvs co -d" instead of "cvs co -p >" when checking out something
    from CVS with a specified module name.  This avoids zero-length
    files when there is a checkout error.

  - Add an "sconsign" script to print the contents of .sconsign files.

  - Speed up maintaining the various lists of Node children by using
    dictionaries to avoid "x in list" searches.

  - Cache the computed list of Node children minus those being Ignored
    so it's only calculated once.

  - Fix use of the --cache-show option when building a Program()
    (or using any other arbitrary action) by making sure all Action
    instances have strfunction() methods.

  - Allow the source of Command() to be a directory.

  - Better error handling of things like raw TypeErrors in SConscripts.

  - When installing using "setup.py install --prefix=", suppress the
    distutils warning message about adding the (incorrect) library
    directory to your search path.

  - Correct the spelling of the "validater" option to "validator."
    Add a DeprecatedWarning when the old spelling is used.

  - Allow a Builder's emitter to be a dictionary that maps source file
    suffixes to emitter functions, using the suffix of the first file
    in the source list to pick the right one.

  - Refactor the creation of the Program, *Object and *Library Builders
    so that they're moved out of SCons.Defaults and created on demand.

  - Don't split SConscript file names on white space.

  - Document the SConscript function's "dirs" and "name" keywords.

  - Remove the internal (and superfluous) SCons.Util.argmunge() function.

  - Add /TP to the default CXXFLAGS for msvc, so it can compile all
    of the suffixes we use as C++ files.

  - Allow the "prefix" and "suffix" attributes of a Builder to be
    callable objects that return generated strings, or dictionaries
    that map a source file suffix to the right prefix/suffix.

  - Support a MAXLINELINELENGTH construction variable on Win32 systems
    to control when a temporary file is used for long command lines.

  - Make how we build .rpm packages not depend on the installation
    locations from the distutils being used.

  - When deducing a target Node, create it directly from the first
    source Node, not by trying to create the right string to pass to
    arg2nodes().

  - Add support for SWIG.

  From Bram Moolenaar:

  - Test portability fixes for FreeBSD.

  From Gary Oberbrunner:

  - Report the target being built in error messages when building
    multiple sources from different extensions, or when the target file
    extension can't be deduced, or when we don't have an action for a
    file suffix.

  - Provide helpful error messages when the arguments to env.Install()
    are incorrect.

  - Fix the value returned by the Node.prevsiginfo() method to conform
    to a previous change when checking whether a node is current.

  - Supply a stack trace if the Taskmaster catches an exception.

  - When using a temporary file for a long link line on Win32 systems,
    (also) print the command line that is being executed through the
    temporary file.

  - Initialize the LIB environment variable when using the Intel
    compiler (icl).

  - Documentation fixes:  better explain the AlwaysBuild() function.

  From Laurent Pelecq:

  - When the -debug=pdb option is specified, use pdb.Pdb().runcall() to
    call pdb directly, don't call Python recursively.

  From Ben Scott:

  - Add support for a platform-independent CPPDEFINES variable.

  From Christoph Wiedemann:

  - Have the g++ Tool actually use g++ in preference to c++.

  - Have the gcc Tool actually use gcc in preference to cc.

  - Add a gnutools.py test of the GNU tool chain.

  - Be smarter about linking: use $CC by default and $CXX only if we're
    linking with any C++ objects.

  - Avoid SCons hanging when a piped command has a lot of output to read.

  - Add QT support for preprocessing .ui files into .c files.
