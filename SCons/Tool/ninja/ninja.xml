<?xml version="1.0"?>
<!--
 MIT License

 Copyright The SCons Foundation

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
 KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


This file is processed by the bin/SConsDoc.py module.
See its __doc__ string for a discussion of the format.
-->

<!DOCTYPE sconsdoc [
        <!ENTITY % scons SYSTEM '../../../doc/scons.mod'>
        %scons;
        <!ENTITY % builders-mod SYSTEM '../../../doc/generated/builders.mod'>
        %builders-mod;
        <!ENTITY % functions-mod SYSTEM '../../../doc/generated/functions.mod'>
        %functions-mod;
        <!ENTITY % tools-mod SYSTEM '../../../doc/generated/tools.mod'>
        %tools-mod;
        <!ENTITY % variables-mod SYSTEM '../../../doc/generated/variables.mod'>
        %variables-mod;
        ]>

<sconsdoc xmlns="http://www.scons.org/dbxsd/v1.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.scons.org/dbxsd/v1.0 http://www.scons.org/dbxsd/v1.0/scons.xsd">

    <tool name="ninja">
        <summary>
            <para>
                Sets up &b-link-Ninja; builder which generates a ninja build file, and then optionally runs &ninja;.
            </para>
            <note>
                <para>This is an experimental feature.
                </para>
                <para>This functionality is subject to change and/or removal without deprecation cycle.</para>
            </note>

        </summary>
        <sets>
            <item>NINJA_DISABLE_AUTO_RUN</item>
            <item>NINJA_ALIAS_NAME</item>
            <item>NINJA_DIR</item>
            <item>NINJA_COMPDB_EXPAND</item>
            <item>NINJA_ENV_VAR_CACHE</item>
            <item>NINJA_FILE_NAME</item>
            <item>NINJA_GENERATED_SOURCE_SUFFIXES</item>
            <item>NINJA_MSVC_DEPS_PREFIX</item>
            <item>NINJA_POOL</item>
            <item>NINJA_REGENERATE_DEPS</item>
            <item>NINJA_SYNTAX</item>
            <item>_NINJA_REGENERATE_DEPS_FUNC</item>
            <item>__NINJA_NO</item>
            <item>IMPLICIT_COMMAND_DEPENDENCIES</item>


            <!-- TODO: Document these -->
            <!--            <item>NINJA_RULES</item>-->
            <!--            <item>NINJA_POOLS</item>-->
            <!--            <item>NINJA</item>-->
            <!--            <item>GENERATING_NINJA</item>-->
            <!--            <item>NINJA_DIR</item>-->

        </sets>

        <uses>
            <item>AR</item>
            <item>ARCOM</item>
            <item>ARFLAGS</item>
            <item>CC</item>
            <item>CCCOM</item>
            <item>CCFLAGS</item>
            <item>CXX</item>
            <item>CXXCOM</item>
            <item>ESCAPE</item>
            <item>LINK</item>
            <item>LINKCOM</item>
            <item>PLATFORM</item>
            <item>RANLIB</item>
            <item>RANLIBCOM</item>
            <item>SHCCCOM</item>
            <item>SHCXXCOM</item>
            <item>SHLINK</item>
            <item>SHLINKCOM</item>
            <item>PROGSUFFIX</item>
            <item>PRINT_CMD_LINE_FUNC</item>
            <!--            <item>TEMPFILE</item>-->

            <!-- TODO: Document these
            <item>NINJA_MAX_JOBS</item>
            <item>NINJA_SKIP</item>
            <item>NINJA_CUSTOM_HANDLERS</item>
-->

        </uses>
    </tool>

    <builder name="Ninja">
        <summary>
            <para>
                &b-Ninja; is a special builder which
                adds a target to create a ninja build file.
                The builder does not require any source files to be specified.
            </para>
            <note>
                <para>This is an experimental feature. To enable it you must use one of the following methods
                </para>

<!--                NOTE DO NOT INDENT THE FOLLOWING AS IT WILL ALTER THE FORMATTING-->
                <example_commands>
    # On the command line
    --experimental=ninja

    # Or in your SConstruct
    SetOption('experimental', 'ninja')
                </example_commands>

                <para>This functionality is subject to change and/or removal without deprecation cycle.</para>


                <para>
                    To use this tool you must install pypi's <ulink url="https://pypi.org/project/ninja/">ninja
                    package</ulink>.
                    This can be done via
                    <command>pip install ninja</command>
                </para>

            </note>

            <para>
                If called with no arguments,
                the builder will default to a target name of
                <filename>ninja.build</filename>.
            </para>
            <para>
                If called with a single positional argument,
                &scons; will "deduce" the target name from that source
                argument, giving it the same name, and then
                ignore the source.
                This is the usual way to call the builder if a
                non-default target name is wanted.
            </para>
            <para>
                If called with either the
                <parameter>target=</parameter>
                or <parameter>source=</parameter> keyword arguments,
                the value of the argument is taken as the target name.
                If called with both, the
                <parameter>target=</parameter>
                value is used and <parameter>source=</parameter> is ignored.
                If called with multiple sources,
                the source list will be ignored,
                since there is no way to deduce what the intent was;
                in this case the default target name will be used.
            </para>
            <para>
                <emphasis>Available since &scons; 4.2.</emphasis>
            </para>
        </summary>
    </builder>


    <cvar name="NINJA_GENERATED_SOURCE_SUFFIXES">
        <summary>
            <para>
                The list of source file suffixes which are generated by SCons build steps.
                All source files which match these suffixes will be added to the _generated_sources alias in the output
                <filename>ninja.build</filename> file.
                Then all other source files will be made to depend on this in the <filename>ninja.build</filename> file, forcing the
                generated sources to be built first.
            </para>
        </summary>
    </cvar>

    <cvar name="NINJA_MSVC_DEPS_PREFIX">
        <summary>
            <para>
                This propagates directly into the generated <filename>ninja.build</filename> file.
                From Ninja's docs
                <quote>defines the string which should be stripped from msvcâ€™s /showIncludes output</quote>
            </para>
        </summary>
    </cvar>

    <cvar name="NINJA_DIR">
        <summary>
            <para>
                This propagates directly into the generated <filename>ninja.build</filename> file.
                From Ninja's docs:
                <blockquote>
                    <para>
                        builddir
                        A directory for some Ninja output files. ... (You can also store other build output in this
                        directory.)
                    </para>
                </blockquote>
            </para>
        </summary>
    </cvar>

    <cvar name="NINJA_REGENERATE_DEPS">
        <summary>
            <para>
                A generator function used to create a ninja depsfile which includes all the files which would require
                SCons to be invoked if they change.
                Or a list of said files.
            </para>
        </summary>
    </cvar>

    <cvar name="NINJA_COMPDB_EXPAND">
        <summary>
            <para>
                Boolean value (True|False) to instruct ninja to expand the command line arguments normally put into
                response files.
                This prevents lines in the compilation database like <quote>gcc @rsp_file</quote> and instead yields
                <quote>gcc -c -o myfile.o myfile.c -Ia -DXYZ</quote>
            </para>
            <para>
                Ninja's compdb tool added the <quote>-x</quote> flag in Ninja V1.9.0
            </para>
        </summary>
    </cvar>

    <cvar name="NINJA_ENV_VAR_CACHE">
        <summary>
            <para>
                A string that sets the environment for any environment variables that
                differ between the OS environment and the SCons command ENV.

                It will be compatible with the default shell of the operating system.

                If not explicitly specified, SCons will generate this dynamically from the Environment()'s 'ENV'
                <quote>env['ENV']</quote>
                where those values differ from the existing shell..
            </para>
        </summary>
    </cvar>

    <cvar name="NINJA_POOL">
        <summary>
            <para>
                Set the <quote>ninja_pool</quote> for this or all targets in scope for this env var.
            </para>
        </summary>
    </cvar>

    <cvar name="NINJA_DISABLE_AUTO_RUN">
        <summary>
            <para>
                Boolean (True|False). Default: False
                When True, SCons will not run ninja automatically after creating the <filename>ninja.build</filename> file.

                If not set, this will be set to True if <quote>--disable_execute_ninja</quote> or
                <code>SetOption('disable_execute_ninja', True)</code>
            </para>
        </summary>
    </cvar>

    <cvar name="__NINJA_NO">
        <summary>
            <para>
                Internal flag. Used to tell SCons whether or not to try to import pypi's ninja python package.
                This is set to True when being called by Ninja?
            </para>
        </summary>
    </cvar>


    <cvar name="NINJA_FILE_NAME">
        <summary>
            <para>
                The filename for the generated Ninja build file defaults to
                <filename>ninja.build</filename>
            </para>
        </summary>
    </cvar>

    <cvar name="NINJA_ALIAS_NAME">
        <summary>
            <para>
                Name of the Alias() which is will cause SCons to create the <filename>ninja.build</filename> file, and
                then (optionally) run ninja.
            </para>
        </summary>
    </cvar>

    <cvar name="NINJA_SYNTAX">
        <summary>
            <para>
                Theres also NINJA_SYNTAX which is the path to a custom ninja_syntax.py file which is used in generation.
                The tool currently assumes you have ninja installed through pip, and grabs the syntax file from that
                installation if none specified.
            </para>
        </summary>
    </cvar>

    <cvar name="_NINJA_REGENERATE_DEPS_FUNC">
        <summary>
            <para>
                Internal value used to specify the function to call with argument env to generate the list of files
                which if changed would require the ninja file to be regenerated.
            </para>
        </summary>
    </cvar>


</sconsdoc>
