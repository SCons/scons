<?xml version="1.0" encoding="UTF-8"?>
<!--
__COPYRIGHT__

This file is processed by the bin/SConsDoc.py module.
See its __doc__ string for a discussion of the format.
-->

<!DOCTYPE sconsdoc [
<!ENTITY % scons SYSTEM '../../../../doc/scons.mod'>
%scons;
<!ENTITY % builders-mod SYSTEM '../../../../doc/generated/builders.mod'>
%builders-mod;
<!ENTITY % functions-mod SYSTEM '../../../../doc/generated/functions.mod'>
%functions-mod;
<!ENTITY % tools-mod SYSTEM '../../../../doc/generated/tools.mod'>
%tools-mod;
<!ENTITY % variables-mod SYSTEM '../../../../doc/generated/variables.mod'>
%variables-mod;
]>

<sconsdoc xmlns="http://www.scons.org/dbxsd/v1.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.scons.org/dbxsd/v1.0 http://www.scons.org/dbxsd/v1.0/scons.xsd">


<tool name="install">
<summary>
<para>
Sets construction variables for file
and directory installation.
</para>
</summary>
<sets>
<item>INSTALL</item>
<item>INSTALLSTR</item>
</sets>
</tool>

<builder name="Install">
<summary>
<para>
Installs one or more source files or directories
in the specified target,
which must be a directory.
The names of the specified source files or directories
remain the same within the destination directory. The
sources may be given as a string or as a node returned by
a builder. &Install; is accumulative, additional calls
add additional files to the list to be copied to the target.
</para>

<example_commands>
env.Install(target='/usr/local/bin', source=['foo', 'bar'])
</example_commands>

<para>
Note that because of the kinds of paths often chosen for the
&Install; builder (and the related &InstallAs; and
&InstallVersionedLib; builders), the results can be surprising.
The above example will not, unless arrangements are made,
actually copy anything.
The target is "built" by copying the source files to it,
but the default behavior of SCons is to select for building
only those targets that are underneath the current directory.
In the example, <filename>/usr/local/bin</filename>
is not in that tree, so that target is not selected for building.
You modifiy the default behavior either by specifying targets on
the command line, or by calling the &Default; function to
set up your own choice of defaults. Since SCons always
respects the command line targets it is given, this is
one way to get the install to happen:
</para>
<example_commands>
scons /usr/local/bin
</example_commands>

<para>
If the <option>--install-sandbox</option> command line
option is given, the target directory will be prefixed
by the directory path specified.
This is useful to test installs without installing to
a "live" location in the system.
</para>

<para>
For more thoughts on installation, see the User Guide.
See also &FindInstalledFiles;.
</para>

</summary>
</builder>

<builder name="InstallAs">
<summary>
<para>
Installs one or more source files or directories
to specific names,
allowing changing a file or directory name
as part of the installation.
It is an error if the
target
and
source
arguments list different numbers of files or directories.
</para>

<example_commands>
env.InstallAs(target='/usr/local/bin/foo',
              source='foo_debug')
env.InstallAs(target=['../lib/libfoo.a', '../lib/libbar.a'],
              source=['libFOO.a', 'libBAR.a'])
</example_commands>

<para>
See the note under &Install;.
</para>

</summary>
</builder>

<builder name="InstallVersionedLib">
<summary>
<para>
Installs a versioned shared library. The symlinks appropriate to the
architecture will be generated based on symlinks of the source library.
</para>

<example_commands>
env.InstallVersionedLib(target='/usr/local/bin/foo',
                        source='libxyz.1.5.2.so')
</example_commands>

<para>
See the note under &Install;.
</para>

</summary>
</builder>

</sconsdoc>
