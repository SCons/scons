If you are reading this in the git repository, the contents
refer to *unreleased* changes since the last SCons release.
Past official release announcements appear at:

    https://scons.org/tag/releases.html

==================================================================

A new SCons release, 4.5.3, is now available on the SCons download page:

    https://scons.org/pages/download.html


Here is a summary of the changes since 4.5.2:

NEW FUNCTIONALITY
-----------------

- D compilers : added support for generation of .di interface files.
  New variables DI_FILE_DIR, DI_FILE_DIR_PREFIX, DI_FILE_DIR_SUFFIX,
  DI_FILE_SUFFIX.
- MSVC: If available, native arm64 tools will be used on arm64 hosts for VS2022.
- MSVC: If necessary, automatically define VSCMD_SKIP_SENDTELEMETRY for VS2019 and later
  on arm64 hosts when using an arm (32-bit) build of python to prevent a powershell
  error pop-up window (powershell dll not found).

DEPRECATED FUNCTIONALITY
------------------------

- List anything that's been deprecated since the last release

CHANGED/ENHANCED EXISTING FUNCTIONALITY
---------------------------------------

- When debugging (--debug=pdb), the filenames SConstruct and SConscript
  are now recognized when manipulating breakpoints. Previously,
  only a full pathname to an sconscript file worked, as pdb requires
  a .py extension to open a file that is not an absolute path.
- Three unused non-public methods of the Environment Base class
  were dropped: get_src_sig_type, get_tgt_sig_type, _changed_source.
  These were unused remnants of the previously removed SourceSignatures
  and TargetSignatures features (dropped in 3.1.2).
- The --debug flag now has a 'json' option which will write information
  generated by --debug={count, memory, time, action-timestamps} and about
  the build.
- Obsoleted YACCVCGFILESUFFIX, it's being replaced by YACC_GRAPH_FILE_SUFFIX.
  If YACC_GRAPH_FILE_SUFFIX is not set, it will respect YACCVCGFILESUFFIX.
- The yacc tool now understands the bison behavior of --header, --defines
  and --graph being called without an option-argument as being synonyms
  for -d (first two) and -g. -H also recognized as a synonym for -d.
  Default value for $YACC_GRAPH_FILE_SUFFIX changed to '.gv' to match
  current bison default (since bison 3.8). Set this variable to '.dot'
  if using byacc. Fixes #4326 and #4327.
- MSVC: When trying to find a valid msvc batch file, the existence of the msvc compiler
  executable is verified for VS6 to VS2015 to avoid executing the msvc batch file when
  the host/target tool is known not to be present. Always check that the msvc compiler
  executable is found on the msvc script environment path after running the msvc batch
  file.  This is predominately needed for recent versions of Visual Studio where the msvc
  batch file exists but an individual msvc toolset may not support the host/target
  architecture combination.  For example, when using VS2022 on arm64, the arm64 native
  tools are only installed for the 14.3x toolsets.
- Extend range of recognized Java versions to 20.
- Builder calls (like Program()) now accept pathlib objects in source lists.
- The Help() function now takes an additional keyword argument keep_local:
  when starting to build a help message, you can now retain help from AddOption
  calls (options added for the project_, but omit help for SCons' own cmdline
  options with "Help(newtext, append=True, local_only=True)".
- Calling SConscript() with a nonexistent file is now an error.
  Previously this succeeded - prior to SCons 3.0, silently; since 3.0, with
  a warning. Developers can still instruct such an SConscript() call not
  to fail by being explicit: pass keyword argument "must_exist=False".
  The "--warn=missing-sconscript" commandline option is no longer available
  as the warning was part of the transitional phase.
- Add missing directories to searched paths for mingw installs

FIXES
-----

- Fixed: when using the mingw tool, if an msys2 Python is used (os.sep
  is '/' rather than the Windows default '\'), certain Configure checks
  could fail due to the construction of the path to run the compiled check.
- C scanner's dictifyCPPDEFINES routine did not understand the possible
  combinations of CPPDEFINES - not aware of a "name=value" string either
  embedded in a sequence, or by itself.  The conditional C scanner thus
  did not always properly apply the defines. The regular C scanner does
  not use these, so was not affected.  [fixes #4193]
- MSVC: The installed msvc list is calculated once and cached.  There was an indirect
  dependency on the target architecture when determining if each version of msvc
  was installed based on the initial invocation.  It was possible that an msvc instance
  would not be considered installed due to the tools for the requested target
  architecture not being installed.  The initial call to construct the installed msvc
  list now uses an undefined target architecture to evaluate all potential host/target
  combinations when evaluating if the msvc tools are installed for a given Visual Studio
  installation.
- MSVC: Erroneous construction of the installed msvc list (as described above) caused an
  index error in the msvc support code.  An explicit check was added to prevent indexing
  into an empty list.  Fixes #4312.
- MSCommon: Test SConfTests.py would fail when mscommon debugging was enabled via the
  MSVC_MSCOMMON_DEBUG environment variable.  The mscommon logging filter class registered
  with the python logging module was refactored to prevent test failure.
- MSVS: Add arm64 to the MSVS supported architectures list for VS2017 and later to be
  consistent with the current documentation of MSVS_ARCH.
- FORTRAN: Fix gfortran tool initialization. Defaults to using binary named gfortran 
  as would be expected, and properly set's SHFORTRAN flags to include -fPIC
  where previously it was only doing so for the other fortran versions (F77,..)
- MSCommon: Added more error handling while reading msvc config cache.
  (Enabled/specified by SCONS_CACHE_MSVC_CONFIG).
  The existing cache will be discarded if there's a decode error reading it.
  It's possible there's a race condition creating this issue it in certain CI builds.

IMPROVEMENTS
------------

- Now tries to find mingw if it comes from Chocolatey install of msys2.

PACKAGING
---------

- The build of scons now matches the help text displayed - the targets
  listed there can all now be given as a target to build (except for
  the two full source balls; the source tar.gz is currently generated directly
  by the GitHub release process).

DOCUMENTATION
-------------

- Aligned manpage signature for Alias function to match implementation -
  if the previous *targets* parameter had been used as a keyword argument,
  the results would be incorrect (does not apply to positional argument
  usage, which had no problem).
- Changed the message about scons -H to clarify it shows built-in options only.
- Cachedir description updated.

DEVELOPMENT
-----------

- SCons test runner now uses pathlib to normalize and compare paths
  to test files, which allows test lists, exclude lists, and tests on
  the command line to "not care" about the OS convention for pathname
  separators.
- Class ActionBase is now an abstract base class to more accurately
  reflect its usage. Derived _ActionAction inherits the ABC, so it
  now declares (actually raises NotImplementedError) two methods it
  doesn't use so it can be instantiated by unittests and others.
- Added more type annotations to internal routines.
- Cleaned up dblite module (checker warnings, etc.).

Thanks to the following contributors listed below for their contributions to this release.
==========================================================================================
.. code-block:: text

    git shortlog --no-merges -ns 4.5.2..HEAD
